'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 7 May 2018 at 6:49:13 pm'!PinAssignMorph subclass: #PinAssignMorphExtra	instanceVariableNames: 'instVarName1 instVarName2 '	classVariableNames: 'ClassVarName1 ClassVarName2 '	poolDictionaries: ''	category: 'Studuino'!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll versionConflict keyPad fontButtons usbCSPanel serverProcess usbConnectionStatus paBoard paBoardExtra paBoardBase lastSBPosition '	classVariableNames: 'BoardStatus COMPort Clipboard DefaultArduinoSprite DefaultNotes DefaultSprite Fonts FontsXO IsXO LangDic NewScratchProject ScratchServers ScratchSkin ScratchSkinXO TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!!BlockMorph class methodsFor: 'accessing' stamp: 'KK 4/5/2018 19:37'!isValidBlock: s	"The block' parts is connected to Studuino board "	IOPort detect: [:each | each = s ]	ifNone:[ ^ false. ].	^ true.! !!CommandBlockMorph methodsFor: 'private' stamp: 'KK 4/5/2018 17:57'!canBecomeWatcher	"I determine which blocks can become watchers."	| i |	i _ selector asString findAnySubStr: #('mouse' 'key' 'touching' 'distance' 'lightSensor' 'touchSensor' 'soundSensor' 'refPhotosensor' 'temperatureSensor' 'accelerometer' 'onBoardButton' 'gyro' 'infraredReceiver' 'digitalSensor' 'analogSensor' 'httpGet') startingAt: 1.	^ (self isReporter) &	   (self argumentCount <= 1) &	   ((#(not atRandom abs rounded lineCountOfList: stringLength:) includes: selector) not) &	   (i > selector asString size)! !!CommandBlockMorph methodsFor: 'private' stamp: 'KK 4/16/2018 11:40'!uncoloredArgMorphFor: t1 	"Answer an argument morph for the given argument specification string."	| code |	" Check if a single character or a string."	(t1 size = 2) ifTrue: [		code _ t1 at: 2.	]	ifFalse: [		code _ t1 copyFrom: 2 to: (t1 size).].	$a = code ifTrue: [^ AttributeArgMorph new choice: 'volume'].	$A = code ifTrue: [^ PathSettingArgMorph new getOptionsSelector: #blockDotIniPath].	$b = code ifTrue: [^ BooleanArgMorph new].	$B = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #bzrPinNo;		 choice: 'A0'].	$c = code ifTrue: [^ ColorArgMorph new showPalette: true].	$C = code ifTrue: [^ ColorArgMorph new showPalette: false].	$d = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0';		 menuSelector: #directionMenu].	$D = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '48';		 menuSelector: #midiDrumMenu].	$e = code ifTrue: [^ EventTitleMorph new].	$E = code ifTrue: [^ NumericUpDownMorph new  setDefault:10 min:0 max:20 width:15 isEdit:true].	$f = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mathFunctionNames;		 choice: 'sqrt'].	$F = code ifTrue: [^ NumericUpDownMorph new  setDefault:90 min:0 max:180 width:20 isEdit:true].	$g = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #graphicEffectNames;		 choice: 'color'].	$G = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupGyroAccXYZ].	$H = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSensorNames].	$h = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupBooleanSensorNames].	$I = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #midiInstrumentMenu].	$i = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexMenu]."	$i = code ifTrue: [^ ExpressionArgMorph new numExpression: '10']."	$j = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorNo;		 choice: 'PIN'].	$J = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #svMotorNo;		 choice: 'PIN'].	$k = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #keyNames;		 choice: 'space'].	$L = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #listVarMenu].	$l = code ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #costumeNames;		 choice: 'costume1'].	$m = code ifTrue: [^ SpriteArgMorph new].	$M = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorNames].	$n = code ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$N = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '60';		 menuSelector: #noteSelector].	$o = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledOnOff;		 choice: 'on'].	$O = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSoundPin].	$p = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledPinNo;		 choice: 'A0'].	'p1' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #boardLED;			choice: 'Red(D5)'.].	$P = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupLightPin].	$q = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #moveDirection;		 choice: 'Forward'].	$s = code ifTrue: [^ ExpressionArgMorph new stringExpression: ''].	$S = code ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #soundNames;		 choice: 'pop'].	$t = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorOn;		 choice: 'cw.'].	$T = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorOff;		 choice: 'Brake'].	$v = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #varNamesMenu;		 choice: ''].	$V = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupTouchPin].	$w = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #temperaturePinNo].	$W = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorDirection].	$x = code ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #sceneNames;		 choice: ''].	$X = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARButton].	$y = code ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexForDeleteMenu]."	$y = code ifTrue: [^ ExpressionArgMorph new numExpression: '10']."	$Y = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARSensorXYZ].	$z = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARSensorNames].	$Z = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupIRPin].	'Z1' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #clockVars].	'D1' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #digOutNo; choice: 'PIN'].	'D2' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #digOutVal; choice: '0'].	'D3' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #digInNo; choice: 'PIN'].	'A1' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #anaOutNo; choice: 'PIN'].	'A2' = code ifTrue: [^ NumericUpDownMorph new  setDefault:0 min:0 max:255 width:20 isEdit:true].	'A3' = code ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #anaInNo; choice: 'PIN'].^ ExpressionArgMorph new numExpression: '10'! !!DCSliderMorph2 methodsFor: 'event handling' stamp: 'KK 4/26/2018 16:34'!mouseMove: evt	| calibMorph ratio |	(MotorCalibMorph2 dcCalibStatus = 1) ifTrue: [		super scrollAbsolute: evt.		(calibMorph _ self ownerThatIsA: MotorCalibMorph2) ifNotNil: [			ratio _ self getScaledValue.			calibMorph motorNo: (self getPortName) calibrationPower: ((ratio * 100) truncated).			calibMorph motorNo: (self getPortName) displayPower: ratio.		].	].! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 4/18/2018 10:50'!getValid	" set this Instance true:valid / false:invalid "	^ valid.! !!NumericUpDownMorph methodsFor: 'other' stamp: 'KK 4/17/2018 13:34'!notifyOwner: d	" I notify message to the owner "	" The owner is servomotor calibration board. "	| block frame sb pin ival offset portArg n b |	(block _ self ownerThatIsA: CommandBlockMorph).	block ifNotNil: [	" Owner is CommandBlockMorph "		(block selector = #motorNo:degree:) ifTrue: [	" Owner is servomotor block "			portArg _ block findA: ChoiceArgMorph.			n _ portArg choice.			" Check argument. "			n = '' ifTrue: [^self].			" Port is not open, return. "			frame _ self ownerThatIsA: ScratchFrameMorph.			sb  _ frame workPane studuinoBoard.			(sb portIsOpen) ifFalse: [ ^ self. ].			offset _ 0.			(n = 'D2') ifTrue: [	" D2 "				pin _ 16r0000.			"b0000 0000 0000 0000"				offset _ SvCalib at:(5).	" Servomotor offset"			].			(n = 'D4') ifTrue: [	" D4 "				pin _ 16r0200.			"b0000 0010 0000 0000"				offset _ SvCalib at:(6).	" Servomotor offset"			].			(n = 'D7') ifTrue: [	" D7 "				pin _ 16r0400.			"b0000 0100 0000 0000"				offset _ SvCalib at:(7).	" Servomotor offset"			].			(n = 'D8') ifTrue: [	" D8 "				pin _ 16r0600.			"b0000 0110 0000 0000"				offset _ SvCalib at:(8).	" Servomotor offset"			].			(n = 'D9') ifTrue: [	" D9 "				pin _ 16r0800.			"b0000 1000 0000 0000"				offset _ SvCalib at:(1).	" Servomotor offset"			].			(n = 'D10') ifTrue: [	" D10 "				pin _ 16r0A00.			"b0000 1010 0000 0000"				offset _ SvCalib at:(2).	" Servomotor offset"			].			(n = 'D11') ifTrue: [	" D11 "				pin _ 16r0C00.			"b0000 1100 0000 0000"				offset _ SvCalib at:(3).	" Servomotor offset"			].			(n = 'D12') ifTrue: [" D12 "				pin _ 16r0E00.			"b0000 1110 0000 0000"				offset _ SvCalib at:(4).	" Servomotor offset"			].			ival _ d asNumber.			ival _ ival + offset.	" Calibration "			(ival >= 180)  ifTrue: [ ival _ 180. ].			(ival <= 0)	 ifTrue: [ ival _ 0.   ].			ival _ pin + ival rounded.			"Transcript show:'ScriptableScratchMorph:: motorNo:degree:'; show: ival;cr."			sb data:ival msgID:1.		].		(block selector = #analog:value:) ifTrue: [	" Owner is servomotor block "			portArg _ block findA: ChoiceArgMorph.			n _ portArg choice.			" Check argument. "			n = '' ifTrue: [^self].			" Port is not open, return. "			frame _ self ownerThatIsA: ScratchFrameMorph.			sb  _ frame workPane studuinoBoard.			(sb portIsOpen) ifFalse: [ ^ self. ].			(n = 'D9') ifTrue: [	" D9 "				pin _ 16r0800.			"b0000 1000 0000 0000"			].			(n = 'D10') ifTrue: [	" D10 "				pin _ 16r0A00.			"b0000 1010 0000 0000"			].			(n = 'D11') ifTrue: [	" D11 "				pin _ 16r0C00.			"b0000 1100 0000 0000"			].			ival _ d asNumber.			(ival >= 255)  ifTrue: [ ival _ 255. ].			(ival <= 0)	 ifTrue: [ ival _ 0.   ].			ival _ pin + ival rounded.			sb data:ival msgID:4.		].	].	(b _ self ownerThatIsA: MotorCalibMorph2).	b ifNotNil: [	" Owner is Motor Calibration Board "		b reflectCalibration: self degree: d.	].! !!PinAssignMorph methodsFor: 'interaction' stamp: 'KK 4/19/2018 14:05'!returnPinAssignInfo	| index |	"Return pin assignment from temporary buffer"		index := 1.	pinAssignTemporary do: [ :parts |		self setCheckBox: index partsID: parts.		index := index + 1.	].! !!PinAssignMorph methodsFor: 'interaction' stamp: 'KK 4/19/2018 14:08'!savePinAssignInfo	"Set pin assignment to IOPort"		self setPinAssignInfo: pinAssignTemporary.! !!PinAssignMorph methodsFor: 'private' stamp: 'KK 4/19/2018 14:10'!sensorPartsName0123	"Answer a collection of A0-A3 connectable parts name."	^ #(		'Light sensor'		'Touch sensor'		'Sound sensor'		'IR photoreflector'		'Temperature sensor'		'LED'		'Buzzer'		)! !!PinAssignMorphExtra methodsFor: 'private' stamp: 'KK 4/19/2018 12:14'!sensorPartsName0123	"Answer a collection of A0-A3 connectable parts name."	^ #(		'Light sensor'		'Touch sensor'		'Sound sensor'		'IR photoreflector'		'Temperature sensor'		'LED'		'Buzzer'		'-'		'Digital input'		'Digital output'		'Analog input'		)! !!PinAssignMorphExtra methodsFor: 'private' stamp: 'KK 4/5/2018 18:53'!sensorPartsName45	"Answer a collection of A4,A5 connectable parts name."	^ #(		'Light sensor'		'Touch sensor'		'Sound sensor'		'IR photoreflector'		'Temperature sensor'		'Accelerometer'		'Gyro sensor'		'LED'		'Buzzer'		'-'		'Digital input'		'Digital output'		'Analog input'		)! !!PinAssignMorphExtra methodsFor: 'private' stamp: 'KK 4/5/2018 18:53'!sensorPartsName67	"Answer a collection of A6,A7 connectable parts name."	^ #(		'Light sensor'		'Sound sensor'		'IR photoreflector'		'Temperature sensor'		'-'		'Analog input'		)! !!PinAssignMorphExtra methodsFor: 'interaction' stamp: 'KK 4/19/2018 11:44'!setPinAssignInfo: buf	"Set pin assignment"		| cb name set i2cUsed |	" Initialize buf array "	1 to: (buf size) do: [:num |		buf at: num put: 0.	].	" Initialize some sensor's used flag "	i2cUsed := false.	InfraredReceiverUsed := -1.	UltrasonicUsed := false.	" Set buf information "	1 to: (pinInfo size) do: [:index |		set := pinInfo at: index.		cb := set findA: ToggleButton.	" Toggle button "		(index <= 2) ifTrue: [					" DC motor "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDDCMotor.]		].		((index >= 3) & (index <= 10)) ifTrue: [	" Servomotor "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDServomotor.]		].		((index >= 11) & (index <= 14)) ifTrue: [	" Button "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDButton.]		].		((index >= 15) & (index <= 22)) ifTrue: [	" Sensro / LED / Buzzer "			(cb isOn) ifTrue: [				" Get selected name. "				name := (set findA: ChoiceArgMorphForStuduino) choice.				(name = LightSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDLightSensor.].				(name = TouchSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDTouchSensor.].				(name = SoundSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDSoundSensor.].				(name = IRPhotoreflectorName) ifTrue: [ buf at: (index-4) put: StdnoPIDIR.].				(name = AccelerometerName) ifTrue: [ buf at: (index-4) put: StdnoPIDAcceleration.].				(name = LEDName) ifTrue: [ buf at: (index-4) put: StdnoPIDLED.].				(name = BuzzerName) ifTrue: [ buf at: (index-4) put: StdnoPIDBuzzer.].				(name = InfraredReceiverName) ifTrue: [					InfraredReceiverUsed := (index-4).					buf at: (index-4) put: StdnoPIDInfraredRecv.				].				(name = TemperatureSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDTemperature.].				(name = GyroSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDGyro.].				(name = UltrasonicSensorName) ifTrue: [					UltrasonicUsed := true.					buf at: (index-4) put: StdnoPIDUltrasonic.].				(name = ColorSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDColor.].				(name = BluetoothName) ifTrue: [ buf at: (index-4) put: StdnoPIDBluetooth.].				(name = DigitalInputName) ifTrue: [ buf at: (index-4) put: StdnoPIDDigitalInput.].				(name = DigitalOutputName) ifTrue: [ buf at: (index-4) put: StdnoPIDDigitalOutput.].				(name = AnalogInputName) ifTrue: [ buf at: (index-4) put: StdnoPIDAnalogInput.].			]		].	].	^ i2cUsed.! !!PinAssignMorphExtra methodsFor: 'accessing' stamp: 'KK 4/19/2018 14:05'!setCheckBox: portNumber partsID: pID	| set cb cmb |	" Set checkbox "	" If port connect nothing, do nothing. "	(pID = StdnoPIDOpen) ifTrue: [ ^ self. ].	" connect with something... "	(portNumber > 0) & (portNumber < 11) ifTrue: [	" M1 - D12 "		set := pinInfo at: portNumber.		" If the port connect with motor, set checkbox on. "		cb := set findA: ToggleButton.	" Toggle button "		cb onStuduino.	]	ifFalse: [	" A0 - A7 "		(pID = StdnoPIDButton) ifTrue: [			" Button "			set := pinInfo at: portNumber.			cb := set findA: ToggleButton.	"Toggle button "			cb onStuduino.		]		ifFalse: [			" Other Sensor or LED / Buzzer "			set := pinInfo at: (portNumber + 4).			cb := set findA: ToggleButton.			"Toggle button "			cmb := set findA: ChoiceArgMorphForStuduino.	" Parts name combo box "			cb onStuduino.			(pID = StdnoPIDLightSensor) ifTrue: [				cmb choice: LightSensorName			].			(pID = StdnoPIDTouchSensor) ifTrue: [				cmb choice: TouchSensorName			].			(pID = StdnoPIDSoundSensor) ifTrue: [				cmb choice: SoundSensorName			].			(pID = StdnoPIDIR) ifTrue: [				cmb choice: IRPhotoreflectorName			].			(pID = StdnoPIDAcceleration) ifTrue: [				cmb choice: AccelerometerName.			].			(pID = StdnoPIDLED) ifTrue: [				cmb choice: LEDName.			].			(pID = StdnoPIDBuzzer) ifTrue: [				cmb choice: BuzzerName.			].			(pID = StdnoPIDI2C) ifTrue: [				cmb choice: I2CDeviceName.			].			(pID = StdnoPIDInfraredRecv) ifTrue: [				cmb choice: InfraredReceiverName.				selectedIR := true.			].			(pID = StdnoPIDTemperature) ifTrue: [				cmb choice: TemperatureSensorName.			].			(pID = StdnoPIDGyro) ifTrue: [				cmb choice: GyroSensorName.			].			(pID = StdnoPIDDigitalInput) ifTrue: [				cmb choice: DigitalInputName.			].			(pID = StdnoPIDDigitalOutput) ifTrue: [				cmb choice: DigitalOutputName.			].			(pID = StdnoPIDAnalogInput) ifTrue: [				cmb choice: AnalogInputName.			].		].	].! !!PinAssignMorphExtra methodsFor: 'accessing' stamp: 'KK 4/16/2018 17:51'!setComboBox: portNumber partsID: pID	| set cmb |	" Set checkbox "	super setComboBox: portNumber partsID: pID.	" If port connect nothing, do nothing. "	(pID = StdnoPIDOpen) ifTrue: [ ^ self. ].	set := pinInfo at: (portNumber + 4).	cmb := set findA: ChoiceArgMorphForStuduino.	" Parts name combo box "	(pID = StdnoPIDDigitalInput) ifTrue: [		cmb choice: DigitalInputName	].	(pID = StdnoPIDDigitalOutput) ifTrue: [		cmb choice: DigitalOutputName	].	(pID = StdnoPIDAnalogInput) ifTrue: [		cmb choice: AnalogInputName	].	(pID = StdnoPIDIR) ifTrue: [		cmb choice:IRPhotoreflectorName	].! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'KK 4/19/2018 08:26'!initialize	super initialize.	fillScreenFlag _ false.	paintingInProgress _ false.	projectInfo _ Dictionary new.	watcherPositions _ Dictionary new.	justSaved _ false.	author _ ''.	loginName _ ''.	loginPassword _ ''.	viewMode _ #normal.	usbConnectionStatus _ false.	self createBasicPanes.	self createLogo.	self createMenuPanel.	self createUSBCSPanel.	self createFontSizeButton.	self createViewModeButtonsPanel.	self createStageButtonsPanel.	self createToolbar.	self extent: 1000@600.	paBoardBase _ PinAssignMorph new.	paBoardExtra _ PinAssignMorphExtra new.	paBoard _ paBoardBase.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/16/2018 09:57'!editMenu: aMenuTitleMorph 	| menu |	menu _ CustomMenu new.	menu add: 'Undelete' action: #undoTool.	menu addLine.	ScratchProcess blockHighlightMSecs <= 1		ifTrue: [menu add: 'Start Single Stepping' action: #toggleSingleStepping]		ifFalse: [menu add: 'Stop Single Stepping' action: #toggleSingleStepping].	menu add: 'Set Single Stepping' action: #setSingleStepping.	menu addLine.	(DuringTest = true)	" During a test ? "	ifTrue: [ 	" yes -> hide "		menu add: 'Port Settings' action: #setPinAssign.		"menu add: 'Board selection' action: #selectBoardType." "Uncomment if Board selection is needed."		self addServerCommandsTo: menu.		menu addLine.		workPane showStuduinoBlocks			ifTrue: [menu add: 'Hide Extra Blocks' action: #hideStuduinoBlocks]			ifFalse: [menu add: 'Show Extra Blocks' action: #showStuduinoBlocks]."		workPane showMotorBlocks			ifTrue: [menu add: 'Hide Motor Blocks' action: #hideMotorBlocks]			ifFalse: [menu add: 'Show Motor Blocks' action: #showMotorBlocks]."		menu localize.		#(3 4) do: [:t3 | menu labels at: t3 put: ((menu labels at: t3)					copyFrom: 1 to: (menu labels at: t3) size - 1)					, ScratchTranslator ellipsesSuffix].	]	ifFalse: [	" no -> show "		menu add: 'Motor Calibration' action: #calibrateMotor.		menu add: 'Port Settings' action: #setPinAssign.		"menu add: 'Board selection' action: #selectBoardType." "Uncomment if Board selection is needed."		self addServerCommandsTo: menu.		menu addLine.		workPane showStuduinoBlocks			ifTrue: [menu add: 'Hide Extra Blocks' action: #hideStuduinoBlocks]			ifFalse: [menu add: 'Show Extra Blocks' action: #showStuduinoBlocks]."		workPane showMotorBlocks			ifTrue: [menu add: 'Hide Motor Blocks' action: #hideMotorBlocks]			ifFalse: [menu add: 'Show Motor Blocks' action: #showMotorBlocks]."		menu localize.		#(3 4 5) do: [:t3 | menu labels at: t3 put: ((menu labels at: t3)					copyFrom: 1 to: (menu labels at: t3) size - 1)					, ScratchTranslator ellipsesSuffix].	].	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/19/2018 11:00'!hideStuduinoBlocks	workPane showStuduinoBlocks: false.	IOPort _ IOPort collect: [:each |		 ((each = StdnoPIDDigitalInput) |		  (each = StdnoPIDDigitalOutput) |		  (each = StdnoPIDAnalogInput)) ifTrue: [			each _ StdnoPIDLightSensor .		] ifFalse: [			each _ each.		].	].	viewerPane refresh.	self setLanguage: (ScratchTranslator currentLanguage).! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/16/2018 09:43'!paintSpriteMorph	| m |	self paintingInProgress ifTrue: [^ self beep].	m _ ScratchSpriteMorph new soleCostume: ImageMedia new.	self addAndView: m.	m editDrawingOldCostumeName: m costume mediaName deleteOnCancel: true.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/18/2018 11:01'!shiftToCalibrationMode	"Move onto calibration mode for Studuino."	| s line  dialogBox comPort msgID sb result calibData dcCalibData |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending1 ----------'; cr.		s sendCommand: 'TEST'.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						" Wait for program creation and updating to end  "		Transcript show: '---------- Recving2 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show: comPort; show:', '; show: line; cr.	" Display message "		" Send message "		Transcript show: '---------- Sending3 ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board "		sb _ workPane motorCalibrationBoard.		sb portIsOpen ifTrue: [			Transcript show:'[ScratchFrameMorph::calibrationMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self calibrateMotor.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Connected Studuino. "			ServomotorSynchroMotion _ false.			sb data: 16r0100 msgID: 5.			" Get offset data (Sv and DC) from PC to temporary value "			calibData _ Array new: 8.			dcCalibData _ Array new: 2.			ScratchFrameMorph getCalibData: calibData swap: true.			ScratchFrameMorph getDCCalibData: dcCalibData.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1.					sb setCalibrationField: (elm-2) valid: true.				] ifTrue: [					calibData at: (elm-2) put: 0.					sb setCalibrationField: (elm-2) valid: false.				].			].			" Set DC motor status "			(((IOPort at: 1) = 0) | ((IOPort at: 2) = 0)) ifTrue: [				" Set Unusable "				sb initDCMotorCalibrationField: false.			] ifFalse: [				" Set Usable "				sb initDCMotorCalibrationField: true.			].			" Hide communication box "			dialogBox no.			" Set temporary value to CalibrationMorph  "			sb setDefaultValue: calibData.			sb setDCDefaultValue: dcCalibData.			" Set default position to the servomotor. "			sb setDefaultPosition.			" Invalidate menu "			ScratchMenuTitleMorph setMenuEnable: false.			self showCalibrationBoard.			sb initSyncProc.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/19/2018 11:07'!showStuduinoBlocks	workPane showStuduinoBlocks: true.	viewerPane currentCategory: 'motion'.	viewerPane pageViewer vScrollRelative: 1.0.	self setLanguage: (ScratchTranslator currentLanguage).! !!ScratchFrameMorph methodsFor: 'view mode' stamp: 'KK 4/24/2018 09:48'!enterPresentationMode	"Go into presentation mode."	| presenter sb |	ScratchPlugin pluginAvailable ifFalse: [		self updateViewModeButtons.		^ self beep].	(viewMode = #presentation) ifTrue: [^ self].	DuringTest ifTrue: [		sb _ workPane studuinoBoard.		(sb ownerThatIsA: ScratchStageMorph) ifNil: [			lastSBPosition _ sb position.			sb position: scriptsPane position.		].	].	lastViewMode _ viewMode.	viewMode _ #presentation.	self closeDialogBoxes.	workPane isQuarterSize: false.	presenter _ ScratchPresenterMorph new frame: self.	self delete.	Display fillBlack.	Smalltalk fullScreenMode: true.	World restoreDisplay.	Display fillBlack.	World assuredCanvas.  "re-allocate canvas after entering full-screen mode"	((Display width >= 965) & (Display height >= 750))		ifTrue: [presenter beDoubleSize].	presenter extent: Display extent.	World addMorphFront: presenter.	World startSteppingSubmorphsOf: presenter.	World activeHand newKeyboardFocus: nil.	self updatePenPositions.	self updateViewModeButtons.	World assuredCanvas.  "re-allocate canvas after entering full-screen mode"	World fullRepaintNeeded.	World displayWorldSafely.! !!ScratchFrameMorph methodsFor: 'view mode' stamp: 'KK 4/24/2018 09:48'!exitPresentationMode	| sb |	"Exit presentation mode."	TakeOverScreen ifFalse: [		Smalltalk fullScreenMode: false.		World restoreDisplay].	ScriptableScratchMorph doubleSize: false.	self addMorphFront: workPane.	self fixLayout.	World addMorphFront: self.	World startSteppingSubmorphsOf: self.	World fullRepaintNeeded.	self updatePenPositions.	DuringTest ifTrue: [		sb _ workPane studuinoBoard.		(sb ownerThatIsA: ScratchStageMorph) ifNil: [			sb position: lastSBPosition.		].	].	lastViewMode = #normal ifTrue: [^ self enterNormalMode].	lastViewMode = #quarter ifTrue: [^ self enterQuarterMode].! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 5/2/2018 12:01'!installNewProject: newWorkpane	"Called after creating or reading a new project to clear the process scheduler, pick an object to view, clear the library thumbnails, and perform other housekeeping."	| viewTarget sb cb |	self stopAll.	SvCalib ifNil: [		SvCalib _ Array new:8. 		SvCalib atAllPut: 0.	].	DCCalib ifNil: [		DCCalib _ Array new:2. 		DCCalib atAllPut: 255.	].	IOPort ifNil: [ IOPort _ Array new:18. ].	SvDegree ifNil: [ SvDegree _ Array new:8. ].	SvDegreeTemp ifNil: [ SvDegreeTemp _ Array new:8. ].	SvSentAlready ifNil: [ SvSentAlready _ Array new:8. ].	SvDegree atAllPut: 90.	SvDegreeTemp atAllPut: 90.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.	newWorkpane class = ScratchStageMorph		ifFalse: [^ self inform: 'Incompatible Scratch file format'].	"self exitScratchSession."	workPane scratchServer ifNotNil: [		workPane scratchServer clearCaches.		workPane scratchServer stage: newWorkpane.		newWorkpane scratchServer: workPane scratchServer].	newWorkpane isQuarterSize: workPane isQuarterSize.	newWorkpane bounds: workPane bounds.	newWorkpane midiPortNum: workPane midiPortNum.	workPane closeMIDI.	"use the same sensorboard for the new project"	sb _ workPane sensorBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: SensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane sensorBoard: sb.	"use the same sensorboard for the new project"	sb _ workPane studuinoBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: StuduinoSensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane studuinoBoard: sb.	"use the same calibrationboard for the new project"	cb _ workPane motorCalibrationBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: MotorCalibMorph2) ifTrue: [			cb position: m position.			newWorkpane replaceSubmorph: m by: cb.			cb tryToOpenPort]].	newWorkpane motorCalibrationBoard: cb.	workPane owner replaceSubmorph: workPane by: newWorkpane.	workPane _ newWorkpane.	self fixByteReversedSounds.	"fix sprite positions (backward compatability)"	workPane submorphs do: [:m |		(m isKindOf: WatcherMorph) ifTrue: [m convertFromOldWatcher].		(m respondsTo: #costume) ifTrue: [			m position: m position + m costume rotationCenter]. "fix up positions"		m layoutChanged].	workPane layoutChanged.	"reset timer"	ScriptableScratchMorph resetTimer.	"pick an object view, or view the background if there is no other"	viewTarget _ workPane.	workPane submorphs do: [:m |		(m respondsTo: #scripts) ifTrue: [			m scripts size >= viewTarget scripts size ifTrue: [viewTarget _ m]]].	viewTarget viewBlocksAndScripts.	"populate the sprites list if it is empty (backward compatability)"	workPane sprites isEmpty ifTrue: [		workPane submorphs do: [:m |			(m isKindOf: ScriptableScratchMorph) ifTrue: [workPane sprites addLast: m]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	"start Arduino sensorboard if it has been restored"	self restoreArduinoSprites.	(projectInfo at: 'isHosting' ifAbsent: [false]) ifTrue: [		self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false]) ifTrue: [		self showMotorBlocks].	(projectInfo includesKey: 'penTrails') ifTrue: [		workPane penTrailsForm: (projectInfo at: 'penTrails')].	(projectInfo at: 'hasStuduinoBlocks' ifAbsent: [false]) ifTrue: [		self showStuduinoBlocks].	Clipboard _ nil.	World cleanseStepList.  "make sure garbage collect can clean up the old sprites"	Smalltalk garbageCollect.  "get rid of old sprite instances"	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/18/2018 10:59'!openScratchProjectNamed: fName	"Open a Scratch project with the given name."	| f projData newProj dir fn |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	fn _ fName.	f _ FileStream readOnlyFileNamedOrNil: fn. 	f ifNil: ["try a different encoding, fixes a Firefox bug, -Jens"		fn _ fName isoLatinToMac asUTF8.		f _ FileStream readOnlyFileNamedOrNil: fn.		f ifNil: [^ self inform: 'Could not read' withDetails: fName]].	[	projData _ f binary contentsOfEntireFile."		newProj _ self extractProjectFrom: projData.		projectInfo _ self extractInfoFrom: projData."		(fName endsWith: '.bpd') ifTrue: [			self getIOPort: projData.			newProj _ self extractScriptFrom: projData.			projectInfo _ self extractBPEInfoFrom: projData.		] ifFalse: [			newProj _ self extractProjectFrom: projData.			projectInfo _ self extractInfoFrom: projData.		].	] ifError: [:err :rcvr |		err = 'unsupported0' ifTrue: [			err _ 'Project created by Studuino mini'.			^ self inform: 'Could not load project. Project created for Studuino mini.' withDetails: ''].		err = 'Different board type' ifTrue: [			^ self inform: 'Could not load project. Project created using Optional Parts from Studuino 2.0.' withDetails: ''].		 ^ self inform: 'Could not read project; file may be damaged' withDetails: '(', err, ')'].	dir _ FileDirectory dirPathFor: fn.	projectDirectory _ FileDirectory on: dir.	ScratchFileChooserDialog setLastFolderTo: projectDirectory forType: #project.	projectName _ FileDirectory localNameFor: fn.	self installNewProject: newProj.	(fName endsWith: '.bpd') ifTrue: [		self moveScriptFromStageToStuduinoSprite.	].	self initializeWatcherPositions.	viewerPane updateContents.	" updating calibration info "	CalibInfoLocation = 1 ifTrue: [		(projectInfo includesKey: 'calibsv') ifTrue: [			SvCalib _ (projectInfo at: 'calibsv')].		(projectInfo includesKey: 'calibdc') ifTrue: [			DCCalib _ (projectInfo at: 'calibdc')].		(projectInfo includesKey: 'calibdcImm') ifTrue: [			DCCalib _ (projectInfo at: 'calibdcImm')].		self updateCalibInfo	] ifFalse: [		ScratchFrameMorph getCalibData: SvCalib swap: true.		ScratchFrameMorph getDCCalibData: DCCalib.	].	(projectInfo includesKey: 'stdn pin assign') ifTrue: [		IOPort _ (projectInfo at: 'stdn pin assign')].Transcript show:IOPort;cr.	" updating I/O "	self updateIOInfo.		" Reset view pane and blocks at script area. "	self viewerPane refresh.	self setLanguage: (ScratchTranslator currentLanguage).! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/18/2018 11:08'!saveScratchProject	| fName result r |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	fName _ ScratchFileChooserDialog saveScratchFileFor: self.	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self].	[(result _ ScratchFileChooserDialog confirmFileOverwriteIfExisting: fName) = false] whileTrue: [		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].		fName _ ScratchFileChooserDialog saveScratchFileFor: self.		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].		(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self]].	(result = #cancelled) ifTrue: [^ self].	self updateLastHistoryEntryIfNeeded.	fName _ (self nameFromFileName: fName), '.bpdc'.	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: fName).	projectName _ FileDirectory localNameFor: fName.	projectInfo at: 'author' put: author.	" saving calibration info "	CalibInfoLocation = 1 ifTrue: [		projectInfo at: 'calibsv' put: SvCalib.		projectInfo at: 'calibdc' put: DCCalib.		r _ Array new:2.		r at: 1 put: (((DCCalib at: 1) / 255.0) * 100.0) truncated.		r at: 2 put: (((DCCalib at: 2) / 255.0) * 100.0) truncated.		projectInfo at: 'calibdc' put: r.		projectInfo at: 'calibdcImm' put: DCCalib.	].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.	self deleteBackupFile.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 5/1/2018 19:31'!saveScratchProjectBPE	| fName result r |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	fName _ ScratchFileChooserDialog saveScratchFileFor: self.	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	(fName size = 0 or: [fName = #cancelled]) ifTrue: [^self].	[(result _ ScratchFileChooserDialog confirmFileOverwriteIfExisting: fName) = false] whileTrue: [		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].		fName _ ScratchFileChooserDialog saveScratchFileFor: self.		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].		(fName size = 0 or: [fName = #cancelled]) ifTrue: [^self]].	(result = #cancelled) ifTrue: [^self].	self updateLastHistoryEntryIfNeeded.	fName _ (self nameFromFileName: fName), '.bpdc'.	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: fName).	projectName _ FileDirectory localNameFor: fName.	projectInfo at: 'author' put: author.	" saving calibration info "	CalibInfoLocation = 1 ifTrue: [		projectInfo at: 'calibsv' put: SvCalib.		r _ Array new:2.		r at: 1 put: (((DCCalib at: 1) / 255.0) * 100.0) truncated.		r at: 2 put: (((DCCalib at: 2) / 255.0) * 100.0) truncated.		projectInfo at: 'calibdc' put: r.		projectInfo at: 'calibdcImm' put: DCCalib].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.	self deleteBackupFile.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/18/2018 11:09'!saveScratchProjectNoDialog	| fName dir r |	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	self closeMediaEditorsAndDialogs ifFalse: [^ self].	projectName ifNil: [projectName _ ''].	fName _ self nameFromFileName: projectName.	dir _ ScratchFileChooserDialog getLastFolderForType: #project.	(fName size = 0 | (dir fileExists: fName , '.bpdc') not) ifTrue: [^ self saveScratchProject].	ScratchFileChooserDialog lastFolderIsSampleProjectsFolder ifTrue:  [^ self saveScratchProject].	self updateLastHistoryEntryIfNeeded.	projectName _ FileDirectory localNameFor: (fName, '.bpdc').  "ignore path, if any; save in the original project directory"	projectDirectory _ dir.	" saving calibration info "	CalibInfoLocation = 1 ifTrue: [		projectInfo at: 'calibsv' put: SvCalib.		projectInfo at: 'calibdc' put: DCCalib.		r _ Array new:2.		r at: 1 put: (((DCCalib at: 1) / 255.0) * 100.0) truncated.		r at: 2 put: (((DCCalib at: 2) / 255.0) * 100.0) truncated.		projectInfo at: 'calibdc' put: r.		projectInfo at: 'calibdcImm' put: DCCalib].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.	self deleteBackupFile.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/20/2018 17:11'!writeScratchProject	"Write this Scratch project to the file named projectFile in the project directory. Called by saveScratchProject."	| oldScriptsTarget oldTab oldViewerCategory oldPosition saveError out |	self stopAll.	self world ifNotNil: [self world activeHand newKeyboardFocus: nil].  "terminates active editor"	"share duplicate sounds and images"	self canonicalizeSoundsBits: nil saveOriginal: false.	self canonicalizeImagesQuality: nil saveOriginal: false.	oldScriptsTarget _ scriptsPane target.	oldTab _ scriptsPane tabPane currentTab.	oldViewerCategory _ viewerPane currentCategory.	scriptsPane target: nil.	workPane updateSpritesList.	oldPosition _ workPane position.	workPane delete; position: 0@0.	self updatePenPositions.	ScriptableScratchMorph buildBlockSpecDictionary.	workPane allMorphsDo: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m blocksBin allMorphsDo: [:b |				(b isKindOf: BlockMorph) ifTrue: [b stop]].			m convertStacksToTuples]].	saveError _ nil.	[	out _ FileStream newFileNamed: (projectDirectory unusedNameStartingWith: 'tmp').		out			ifNil: [saveError _ 'Folder may be locked or read-only']			ifNotNil: [				out binary.				out nextPutAll: 'ScratchV02' asByteArray.				self storeProjectInfoOn: out.				ObjStream new storeObj: workPane on: out.				out close].	] ifError: [:err :rcvr |		out ifNotNil: [			[	out close.				projectDirectory deleteFileNamed: out localName.			] ifError: []].  "clean up, ignoring any errors"		saveError _ err].	workPane allMorphsDo: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertTuplesToStacks]].	self addMorph: (workPane position: oldPosition).	oldScriptsTarget ifNil: [oldScriptsTarget _ workPane].	oldScriptsTarget viewBlocksAndScripts.	scriptsPane tabPane currentTab: oldTab."	self restoreArduinoBoards."	viewerPane currentCategory: oldViewerCategory.	self updatePenPositions.	saveError		ifNil: [			justSaved _ true.			self updateProjectName.			projectDirectory deleteFileNamed: projectName.			[projectDirectory rename: out localName toBe: projectName]				ifError: [^ self inform: 'Save failed' withDetails: 'Is the folder read-only?' localized].			projectDirectory setMacFileNamed: projectName type: 'STsb' creator: 'MITS']		ifNotNil: [			projectName _ ''.			self inform: 'Save failed' withDetails: saveError].! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 5/7/2018 13:26'!initStuduinoGlobalVars	""	| arrayID svSize index |	(BoardType = 0 or: [BoardType = 2]) ifTrue: [ " Studuino "Transcript show: 'Studuino selected.'.		arrayID := Array new: 18.		index _ 1.		#(1 1 0 0 0 0 2 2 2 0 21 21 21 21 0 0 0 0) do: [:each |			arrayID at: index put: each.			index _ index + 1.		].		svSize _ 8.]	ifFalse: [ "BoardType 1: Studuino mini"Transcript show: 'Studuino mini selected.'.		arrayID := Array new: 19.		index _ 1.		#(0 0 5 5 5 2 2 0 0 0 0 0 0 0 0 0 0 0 0) do: [:each |			arrayID at: index put: each.			index _ index + 1.		].		svSize _ 5.].Transcript show: 'size: ', arrayID size asString; cr."Transcript show:IOPort;show:', ';show:arrayID;show:', ';show:svSize;cr."	" Redefine IOPOrt basing on arrayID size."	IOPort _ arrayID.	self updateIOInfo.	SvCalib _ Array new: svSize.	SvCalib atAllPut: 0.	DCCalib _ Array new: 2.	DCCalib atAllPut: 255.	CalibInfoLocation = 1 ifTrue: [		self updateCalibInfo	] ifFalse: [		ScratchFrameMorph getCalibData: SvCalib swap: false.		ScratchFrameMorph getDCCalibData: DCCalib.	].	SvDegree _ Array new: svSize.	SvDegree atAllPut: 90.	SvDegreeTemp _ Array new: svSize.	SvDegreeTemp atAllPut: 90.	SvSentAlready _ Array new: svSize.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/19/2018 08:28'!setPinAssign	| pab index resp |		" Set pin assing. "	workPane showStuduinoBlocks		ifTrue: [paBoard := paBoardExtra.]		ifFalse: [paBoard := paBoardBase.].	paBoard addReadouts.	pab _ paBoard.	pab setFrameMorph: self.	pab setAllOff.	" set all checkbox off "	pab position: (self extent - pab extent) / 2.	"	self world addMorph: pab."	" Set check box "	index := 1.	IOPort		do: [ :parts | 			pab setCheckBoxOn: index partsID: parts.			index := index + 1 ].	index := 1.	IOPort		do: [ :parts | 			pab setComboBox: index partsID: parts.			index := index + 1 ].	" Waiting for the response. "	ScratchMenuTitleMorph setMenuEnable: false.	resp := pab getUserResponse.	resp		ifTrue: [ 			self viewerPane refresh.			self refreshWorkPane.			DuringTest ifTrue: [				self testModeOff.			].	 ].	ScratchMenuTitleMorph setMenuEnable: true.	self updateIOInfo.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/19/2018 14:07'!setScaling: aNumber	"Set my language and update my blocks."	| tempJustSaved |	ScratchTranslator fontScale: aNumber.	tempJustSaved _ justSaved.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertStacksToTuples]].	"ScratchTranslator setLanguage: (ScratchTranslator isoCodeForName: aString)."	viewerPane rebuildCategorySelectors.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertTuplesToStacks]].	self updatePanes.	self		view: scriptsPane target		tab: scriptsPane tabPane currentTab		category: viewerPane currentCategory.	justSaved _ tempJustSaved.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/23/2018 08:17'!shiftToTestMode	"Move onto test mode for Studuino."	| s dialogBox line sb mid ival comPort msgID result partsID type documentsPath userProfilePath saveDirectory file saveFile backupFile |	Smalltalk isMacOSX ifFalse: [		" Auto save processing "		documentsPath _ FileDirectory on: (ScratchPlugin primGetFolderPath: 3).	" MyDocument Folder"		userProfilePath _ documentsPath parentDirectory.						" User Folder "		saveDirectory _ userProfilePath pathName.								" Object -> String "		saveDirectory _ saveDirectory, '\AppData\Local\Temp\Studuino\'.			" Set save directory "		[(FileDirectory new createDirectory: saveDirectory)] ifError: [ " Exist directory already " ].	" Create save directory "		file _ (self projectName), '.bpdc'.		" Create temporary file name "		saveFile _ saveDirectory, file. 			" Create temporary file. "		self autoSaveScratchProject: saveFile.	" Auto save under AppData folder "		" Rename project file name to backup file name "		file = 'backup.bpd2' ifFalse: [	" if project name defferent backup.bpd2 then rename project name to backup.bpd2 "			file _ 'backup.bpdc'.			backupFile _ saveDirectory, file.			(FileDirectory new) deleteFileNamed: backupFile.				(FileDirectory new) primRename: saveFile to: backupFile.		].	].		(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'TEST'.		" Wait for program creation and updating to end  "		Transcript show: '---------- Recving ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].Transcript show: line; cr.		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show: comPort; show:', '; show: line; cr.	" Display message "		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board ""sc _ workPane servoCalibrationBoard."		sb _ workPane studuinoBoard.		sb portIsOpen ifTrue: [Transcript show:'[ScratchFrameMorph::testMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self testMode.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Send port configuration "			mid _ 5.			0 to: 7 do: [: index |				partsID _ IOPort at: (11 + index).				((partsID = 17) | (partsID = 21) | (partsID = StdnoPIDDigitalInput)) ifTrue: [					type _ 0]. "Digital"				((partsID = 16) | (partsID = 18) | (partsID = 19)) ifTrue: [					type _ 1]. "Analog"				(partsID = StdnoPIDAnalogInput) ifTrue: [					type _ 6]. "Analog2"				(partsID = 20) ifTrue: [					type _ 2]. "Accelerometer"				(partsID = 24) ifTrue: [					type _ 3]. "Temperature"				(partsID = 25) ifTrue: [					type _ 4]. "Gyro"				(((partsID > 15) & (partsID < 26)) | (partsID = StdnoPIDDigitalInput) | (partsID = StdnoPIDAnalogInput)) ifTrue: [					ival _ 16r0100 + (type bitShift: 4) + index.					sb data: ival msgID: mid.]].			" Set A0 as digital input for dummy if no sensor is selected.			  It's necessary for preventing from the disconnection. "			(IOPort select: [:each | (each > 15) & (each < 26) | (each = StdnoPIDDigitalInput) | (each = StdnoPIDAnalogInput)]) size = 0				ifTrue: [ 					Transcript show: 'Stop Sensor out'; cr.					sb data: 16r0100 msgID: 5.				].			" Set Servomotors' degree connected Studuino. "			1 to: (SvDegree size) do: [ : i |				SvDegree at: i put: 90.				SvDegreeTemp at:i put:90.			].			ServomotorSynchroMotion _ false.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1]].			" Hide communication box "			dialogBox no.			self showStuduinoSensorBoard.			sb initSyncProc.			DuringTest _ true.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/18/2018 11:14'!updateCalibInfo	" Updating calibration files with the latest info. [Variables -> Files] "	| filename f |	"---------------------------------------------------------"	" Get Servomotor Info "	"---------------------------------------------------------"	filename _ '..\common\sv_offset_ini'.	f _ StandardFileStream fileNamed: filename.	f binary.	SvCalib do: [:elm |		(elm < 0) ifTrue: [			f nextPut: elm + 256]		ifFalse: [			f nextPut: elm]].	f close.	"---------------------------------------------------------"	" Get DC motor Info "	"---------------------------------------------------------"	filename _ '..\common\dc_calib_ini_imm'.	f _ StandardFileStream fileNamed: filename.	f binary.	DCCalib do: [:elm |		elm <= 100 ifTrue: [			f nextPut: ((elm / 100.0) * 255) truncated.		] ifFalse: [			f nextPut: elm]	].	f close.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/19/2018 13:50'!updatePanes	| p |	usbCSPanel ifNotNil: [ usbCSPanel delete. ].	self createUSBCSPanel.	usbConnectionStatus ifNotNil: [		self setUSBConnectionStatus: usbConnectionStatus.	].	menuPanel ifNotNil: [ menuPanel delete. ].	self createMenuPanel.	toolbarPanel delete.	self createToolbar.	viewModeButtonsPanel delete.	self createViewModeButtonsPanel.	stageButtonsPanel delete.	self createStageButtonsPanel.	titlePane addMorph: stageButtonsPanel.	scriptsPane tabPane delete.	scriptsPane createTabPane.	readoutPane delete.	self createReadoutPane.	" Sensor Board "	workPane sensorBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ workPane sensorBoard position].	workPane sensorBoard addReadouts.	p ifNotNil:[		self showSensorBoard.		workPane sensorBoard position: p].	" Studuino Sensor Board "	workPane studuinoBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ workPane studuinoBoard position].	workPane studuinoBoard addReadouts.	p ifNotNil:[		self showStuduinoSensorBoard.		workPane studuinoBoard position: p].	" Calibration Board "	workPane motorCalibrationBoard owner		ifNil: [p _ nil]		ifNotNil: [			p _ workPane motorCalibrationBoard position.			workPane motorCalibrationBoard saveCalibrationInfo.		].	workPane motorCalibrationBoard addReadouts.	p ifNotNil:[		workPane motorCalibrationBoard setCalibrationInfo.		self showCalibrationBoard.		workPane motorCalibrationBoard position: p.	].	" Pin Assign Board "	paBoard ifNotNil: [		paBoard savePinAssignInfo.		paBoard addReadouts.		paBoard returnPinAssignInfo.	].	libraryPane clearLibrary.	self scratchWatchers do: [:w | w languageChanged].	self listWatchers do: [:w | w fixLayoutForNewLanguage].	World startSteppingSubmorphsOf: self.	self fixLayout.	scriptsPane fixLayout.	self updateViewModeButtons.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'KK 4/18/2018 11:16'!getDCCalibData: buf2Array 	| filename f dir |	"Set my language and update my blocks."	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini_imm'.	] ifFalse: [	" for Unix / Mac "		dir _ FileDirectory default.	" Get target directory "		filename := dir pathName, '/../common/dc_calib_ini_imm'.	].	f _ FileStream fileNamed: filename.	f binary.	" If file is not exist, intialize 100 and create file. "	f size = 0 ifTrue: [		buf2Array at:1 put:255.		buf2Array at:2 put:255.		f nextPut: 255.		f nextPut: 255.	] ifFalse: [		buf2Array at:1 put:(f next).		buf2Array at:2 put:(f next).	].	f close.! !!ScriptableScratchMorph methodsFor: 'looks ops' stamp: 'KK 4/16/2018 17:38'!anaInNo	" Check I/O pin configuration and reflect for argument "	"Answer a collection of servo motor number."	| offset id validAnalogInPin |	offset _ 10.	validAnalogInPin _ OrderedCollection new.	1 to: 8 do: [ :index |		id _ IOPort at: (index + offset).		id = StdnoPIDAnalogInput ifTrue: [			validAnalogInPin add: 'A', (index-1) asString.		]	].		^ validAnalogInPin.! !!ScriptableScratchMorph methodsFor: 'looks ops' stamp: 'KK 4/19/2018 08:52'!anaOutNo	" Check I/O pin configuration and reflect for argument "	"Answer a collection of servo motor number."	| offset id validAnalogOutPin svUsed |	svUsed _ false.	offset _ 2.	validAnalogOutPin _ OrderedCollection new.	1 to: 8 do: [ :index |		id _ IOPort at: (index + offset).		id = 2 ifTrue: [			svUsed _ true.		]	].	" do not use any servo motor "	svUsed ifFalse: [		validAnalogOutPin add: 'D9'.		validAnalogOutPin add: 'D10'.		validAnalogOutPin add: 'D11'.	].	^ validAnalogOutPin.! !!ScriptableScratchMorph methodsFor: 'looks ops' stamp: 'KK 4/16/2018 17:36'!digInNo	" Check I/O pin configuration and reflect for argument "	"Answer a collection of servo motor number."	| offset id validDigitalInPin |	offset _ 10.	validDigitalInPin _ OrderedCollection new.	1 to: 8 do: [ :index |		id _ IOPort at: (index + offset).		id = StdnoPIDDigitalInput ifTrue: [			validDigitalInPin add: 'A', (index-1) asString.		]	].		^ validDigitalInPin.! !!ScriptableScratchMorph methodsFor: 'looks ops' stamp: 'KK 4/16/2018 11:24'!digOutNo	" Check I/O pin configuration and reflect for argument "	"Answer a collection of servo motor number."	| offset id validDigitalOutPin |	offset _ 10.	validDigitalOutPin _ OrderedCollection new.	1 to: 8 do: [ :index |		id _ IOPort at: (index + offset).		id = StdnoPIDDigitalOutput ifTrue: [			validDigitalOutPin add: 'A', (index-1) asString.		]	].		^ validDigitalOutPin.! !!ScriptableScratchMorph methodsFor: 'looks ops' stamp: 'KK 4/16/2018 11:27'!digOutVal	"Answer a collection of 0/1."	^ #(		'0'		'1')! !!ScriptableScratchMorph methodsFor: 'sensing ops' stamp: 'KK 4/17/2018 10:15'!analogSensor: sensorName	"Answer the value of the given sensor, or zero if the sensorboard is not available."	^ self studuinoSensor: sensorName.! !!ScriptableScratchMorph methodsFor: 'sensing ops' stamp: 'KK 4/17/2018 10:15'!digitalSensor: sensorName	"Answer the value of the given sensor, or zero if the sensorboard is not available."	^ self studuinoSensor: sensorName.! !!ScriptableScratchMorph methodsFor: 'list ops' stamp: 'KK 4/19/2018 09:11'!defaultArgsFor: blockSpec	"Answer the default argument for the given block specification."	| defaultArgs stage sel currentSize list offset isDetect partsID arrPort svUsed |	defaultArgs _ blockSpec copyFrom: 4 to: blockSpec size.  "may be empty"	stage _ self ownerThatIsA: ScratchStageMorph.	sel _ (blockSpec at: 3) asSymbol.	#gotoX:y: = sel ifTrue: [		defaultArgs _ Array			with: self referencePosition x rounded			with: self referencePosition y rounded].	#glideSecs:toX:y:elapsed:from: = sel ifTrue: [		defaultArgs _ Array			with: 1			with: self referencePosition x rounded			with: self referencePosition y rounded].	#motor:direction: = self ifTrue: [		defaultArgs _ Array with: 'reverse' localized with: 'this way' localized with: 'that way'].	#setSizeTo: = sel ifTrue: [		currentSize _ (100.0 * (self scalePoint x max: self scalePoint y)) rounded.		defaultArgs _ Array with: currentSize].	#getAttribute:of: = sel ifTrue: [		(stage _ self ownerThatIsA: ScratchStageMorph) ifNotNil: [			list _ stage submorphs select: [:m | m isKindOf: ScratchSpriteMorph].			" I remove ArduinoScratchSpriteMorph from initialize value "			list _ list reject: [:m | m isKindOf: ArduinoScratchSpriteMorph.].			list sort: [:s1 :s2 | s1 objName asLowercase < s2 objName asLowercase].			list size > 0				ifTrue: [defaultArgs _ Array with: 'x position' with: list first]				ifFalse: [defaultArgs _ Array with: 'background #' with: stage]]		ifNil:[defaultArgs _ Array with: 'x position' with: self]].	#concatenate:with: = sel ifTrue: [		defaultArgs _ Array with: 'hello ' localized with: 'world' localized].	#doAsk = sel ifTrue: [		defaultArgs _ Array with: 'What''s your name?' localized].	#letter:of: = sel ifTrue: [		defaultArgs _ Array with: 1 with: 'world' localized].	#stringLength: = sel ifTrue: [		defaultArgs _ Array with: 'world' localized].	#say:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized with: 2].	#say: = sel ifTrue: [		defaultArgs _ Array with: 'Hello!!' localized].	#think:duration:elapsed:from: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized with: 2].	#think: = sel ifTrue: [		defaultArgs _ Array with: 'Hmm...' localized].	(#(lookLike: showBackground:) includes: sel) ifTrue: [		defaultArgs _ Array with: self costumeNames last].	(#(playSound: doPlaySoundAndWait) includes: sel) ifTrue: [		list _ self soundNames.		defaultArgs _ list size <= 2			ifTrue: [Array with: '']			ifFalse: [Array with: (list at: (list size - 2))]].	(#(broadcast: doBroadcastAndWait) includes: sel) ifTrue: [		stage ifNotNil: [defaultArgs _ Array with: stage defaultEventName]].	(#(append:toList: deleteLine:ofList: insert:at:ofList: list:export:) includes: sel) ifTrue: [		defaultArgs size >= 1 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized]].	(#(append:toList: deleteLine:ofList: getLine:ofList: insert:at:ofList: lineCountOfList: list:export:)		includes: sel) ifTrue: [			defaultArgs _ defaultArgs copyWith: self defaultListName].	#setLine:ofList:to: = sel ifTrue: [		defaultArgs size >= 3 ifTrue: [			defaultArgs at: 2 put: self defaultListName.			defaultArgs at: 3 put: (defaultArgs at: 3) localized]].	#appendLettersOf:toList: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: self defaultListName]].	#list:contains: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: self defaultListName.			defaultArgs at: 2 put: (defaultArgs at: 2) localized]].	#list:export: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: self defaultListName.			defaultArgs at: 2 put: (UTF8 withAll: (PathSettingArgMorph getDefaultPath, '\', self defaultListName, '.txt')).]].	((#motorNo:power: = sel) | (#motorNo:dcMotorOn: = sel) | (#motorNo:dcMotorOff: = sel)) ifTrue: [		isDetect _ false.			" detect DC motor? "		offset _ 0.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r01.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 2 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				(index = 1) ifTrue: [ defaultArgs at: 1 put: 'M1'. isDetect _ true. ].				(index = 2) ifTrue: [ defaultArgs at: 1 put: 'M2'. isDetect _ true. ].			]		].	].	#motorNo:degree: = sel ifTrue: [		isDetect _ false.			" detect servo motor? "		offset _ 2.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r02.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.	""		(BoardType = 0 or: [BoardType = 2]) ifTrue: [			arrPort _ #('D2' 'D4' 'D7' 'D8' 'D9' 'D10' 'D11' 'D12').]		ifFalse: [ " Studuino mini "			arrPort _ #('D5' 'D6' 'D9' 'D10' 'D11').].		1 to: (arrPort size) do: [:index |			((IOPort at: (index + offset)) = partsID) ifTrue: [				defaultArgs at: 1 put: (arrPort at: index).				^ defaultArgs.].]."		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				(index = 1) ifTrue: [ defaultArgs at: 1 put: 'D2'. isDetect _ true. ].				(index = 2) ifTrue: [ defaultArgs at: 1 put: 'D4'. isDetect _ true. ].				(index = 3) ifTrue: [ defaultArgs at: 1 put: 'D7'. isDetect _ true. ].				(index = 4) ifTrue: [ defaultArgs at: 1 put: 'D8'. isDetect _ true. ].				(index = 5) ifTrue: [ defaultArgs at: 1 put: 'D9'. isDetect _ true. ].				(index = 6) ifTrue: [ defaultArgs at: 1 put: 'D10'. isDetect _ true. ].				(index = 7) ifTrue: [ defaultArgs at: 1 put: 'D11'. isDetect _ true. ].				(index = 8) ifTrue: [ defaultArgs at: 1 put: 'D12'. isDetect _ true. ].			]		]."	].	(#ledPin:onOff: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r03.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 6 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	((#buzzerPin:freq: = sel) | (#buzzerPin: = sel)) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r04.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 6 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#lightSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r10.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		(BoardType = 0 or: [BoardType = 2]) ifTrue: [			arrPort _ #('A0' 'A1' 'A2' 'A3' 'A4' 'A5' 'A6' 'A7').]		ifFalse: [ " Studuino mini "			arrPort _ #('A0' 'A1' 'A2' 'A3' 'A4' 'A5').].		1 to: (arrPort size) do: [:index |			((IOPort at: (index + offset)) = partsID) ifTrue: [				defaultArgs at: 1 put: (arrPort at: index).				^ defaultArgs.].]."		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		]."	].	(#touchSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r11.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 6 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#soundSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r12.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#refPhotosensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r13.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#accelerometer: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r14.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: 'X'.				isDetect _ true.			]		].	].	(#onBoardButton: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r15.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		1 to: 4 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#temperatureSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r18.		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	(#gyroSensor: = sel) ifTrue: [		isDetect _ false.			" detect gyro? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ StdnoPIDGyro.		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: 'X(Acc)'.				isDetect _ true.			]		].	].	(#boardLED:onOff: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		partsID _ 16r05.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"Transcript show: (IOPort at: 3); cr.		defaultArgs at: 1 put: ''.		((IOPort at: 3) = partsID) & (isDetect not) ifTrue: [			defaultArgs at: 1 put: 'Red(D5)'.			isDetect _ true].		((IOPort at: 4) = partsID) & (isDetect not) ifTrue: [			defaultArgs at: 1 put: 'Yellow(D6)'.			isDetect _ true].		((IOPort at: 5) = partsID) & (isDetect not) ifTrue: [			defaultArgs at: 1 put: 'Green(D9)'.			isDetect _ true].	].	" Digital input "	(#digitalSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ StdnoPIDDigitalInput.		defaultArgs at: 1 put: ''.		1 to: 6 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	" Digital output "	(#digital:value: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ StdnoPIDDigitalOutput.		defaultArgs at: 1 put: ''.		1 to: 6 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	" Analog input "	(#analogSensor: = sel) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ StdnoPIDAnalogInput.		defaultArgs at: 1 put: ''.		1 to: 8 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				defaultArgs at: 1 put: ('A', (index-1) asString).				isDetect _ true.			]		].	].	" Analog output "	(#analog:value: = sel) ifTrue: [		isDetect _ false.			" detect servo motor? "		offset _ 2.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r02.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		defaultArgs at: 1 put: ''.		arrPort _ #('D2' 'D4' 'D7' 'D8' 'D9' 'D10' 'D11' 'D12').		svUsed _ false.	" true: Servo motor used / false: not used "		1 to: (arrPort size) do: [:index |			((IOPort at: (index + offset)) = partsID) ifTrue: [				svUsed _ true.			]		].		svUsed ifFalse: [		" Servo motor not used "			defaultArgs at: 1 put: 'D9'.		].	].	" HTTP block "	#httpGet:param: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: (defaultArgs at: 2) localized		]	].	" Paramter block "	#paramKey:value: = sel ifTrue: [		defaultArgs size >= 2 ifTrue: [			defaultArgs at: 1 put: (defaultArgs at: 1) localized.			defaultArgs at: 2 put: (defaultArgs at: 2) localized		]	].	^ defaultArgs! !!ScriptableScratchMorph methodsFor: 'motor ops' stamp: 'KK 4/26/2018 16:42'!motorNo:n power: p	"Set Power the DC motor selected"	| stage sb mid ival tmp ratio |	"Check argument."	n = '' ifTrue: [^0].	(stage := self ownerThatIsA: ScratchStageMorph) ifNil: [^0].	sb _ stage studuinoBoard.	"sb tryToOpenPort ifFalse:[^0]."	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [		ratio _ (DCCalib at:1) / 255.0.		tmp _ 16r0400.		"b0000 0100 0000 0000"	].	(n = 'M2') ifTrue: [		ratio _ (DCCalib at:2) / 255.0.		tmp _ 16r0C00.		"b0000 1100 0000 0000"	].	ival _ (p asNumber) * ratio.	(ival >= 100)  ifTrue: [ ival _ 100. ].	(ival <= 0)	 ifTrue: [ ival _ 0.   ].	ival _ tmp + (ival rounded).				"b0000 n100 + val "	^sb data:ival msgID:mid.! !!ScriptableScratchMorph methodsFor: 'other ops' stamp: 'KK 4/20/2018 16:22'!analog: n value: d 	| stage sb ival pin |	" Check argument. "	n = '' ifTrue: [^0].	(stage := self ownerThatIsA: ScratchStageMorph) ifNil: [^0].	sb _ stage studuinoBoard.	(n = 'D9') ifTrue: [		pin _ 16r0800.			"b0000 1000 0000 0000"	].	(n = 'D10') ifTrue: [		pin _ 16r0A00.			"b0000 1010 0000 0000"	].	(n = 'D11') ifTrue: [		pin _ 16r0C00.			"b0000 1100 0000 0000"	].	ival _ d asNumber.	(ival >= 255)  ifTrue: [ ival _ 255. ].	(ival <= 0)	 ifTrue: [ ival _ 0.   ].	ival _ pin + ival rounded.	^sb data: ival msgID: 4.! !!ScriptableScratchMorph methodsFor: 'other ops' stamp: 'KK 4/17/2018 13:06'!digital: n value: s	"Set On/Off the LED selected"	| stage sb mid ival |	"Check argument."	n = '' ifTrue: [^0].	(stage := self ownerThatIsA: ScratchStageMorph) ifNil: [^0].	sb _ stage studuinoBoard.	"sb tryToOpenPort ifFalse:[^0]."	mid _ 3.		" 3: LED ID "	(n = 'A0') ifTrue: [ ival _ 16r0000. ].		" b0000 0000 0000 0000 "	(n = 'A1') ifTrue: [ ival _ 16r0200. ].		" b0000 0010 0000 0000 "	(n = 'A2') ifTrue: [ ival _ 16r0400. ].		" b0000 0100 0000 0000 "	(n = 'A3') ifTrue: [ ival _ 16r0600. ].		" b0000 0110 0000 0000 "	(n = 'A4') ifTrue: [ ival _ 16r0800. ].		" b0000 1000 0000 0000 "	(n = 'A5') ifTrue: [ ival _ 16r0A00. ].		" b0000 1010 0000 0000 "	(s = '0') ifTrue: [ ival _ ival + 16r0000. ].	" b0000 xxx0 0000 0000 "	(s = '1') ifTrue: [ ival _ ival + 16r0100. ].	" b0000 xxx1 0000 0000 "	^sb data: ival msgID: mid.! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/20/2018 15:30'!blockFromSpec: spec color: blockColor	"Create a block from the given block specification. Answer nil if I don't implement the block spec selector."	| blockLabelSpec blockType selector defaultArgs block rcvr argPermutation dispBlockColor isDetect offset partsID invalidR invalidG invalidB sFrame stage |	invalidR _ 0.6.	invalidG _ 0.6.	invalidB _ 0.6.	blockLabelSpec _ ScratchTranslator translationFor: (spec at: 1).	argPermutation _ CommandBlockMorph argPermutationForSpec: (spec at: 1) withTranslation: blockLabelSpec.	blockType _ spec at: 2.	selector _ (spec at: 3) asSymbol.	defaultArgs _ self defaultArgsFor: spec.	dispBlockColor _ blockColor.	((defaultArgs size ~= 0)			& 	 ((#lightSensor: = selector)		|	  (#touchSensor: = selector)		|	  (#soundSensor: = selector)		|	  (#refPhotosensor: = selector)	|	  (#temperatureSensor: = selector)	|	  (#gyroSensor: = selector)	|	  (#accelerometer: = selector)	|	  (#onBoardButton: = selector)	|	  (#motorNo:degree: = selector)	|	  (#motorNo:power: = selector)	|	  (#motorNo:dcMotorOn: = selector)	|	  (#motorNo:dcMotorOff: = selector)	|	  (#buzzerPin:freq: = selector)	|	  (#buzzerPin: = selector)		|	  (#ledPin:onOff: = selector)		|	  (#digital:value: = selector)		|	  (#analog:value: = selector)		|	  (#digitalSensor: = selector)		|	  (#analogSensor: = selector)	)	 ) ifTrue: [		((defaultArgs at: 1) = '') ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).		]	].	sFrame _ self ownerThatIsA: ScratchFrameMorph.	sFrame ifNotNil: [		stage _ sFrame workPane.		(stage showStuduinoBlocks) ifTrue: [		] ifFalse: [ 			((#analog:value: = selector)		|			 (#httpGet:param: = selector)		|			 (#paramKey:value: = selector)			) ifTrue: [				dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).			].		].	].	(BoardType = 1) ifTrue: [	" Clock's validity check. "	((IOPort at: 19) ~= 6) ifTrue: [		(#hour:min: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#month:day:year: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#alhour:almin: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#red:green:blue: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBackLight: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBuzzerOnFreq:For:elapsed:from: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBuzzerOff = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clockValue: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#isInAlarm = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].].].	" Color LED is used ? "	(#ledColor:onOff: = selector) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r05.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		1 to: 4 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				isDetect _ true.			]		].		isDetect = false ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).		].	].	(#(E K M S W) includes: blockType) ifTrue: [		^ (self hatBlockType: blockType) color: blockColor].	"basic block type: normal or C-shaped"	(blockType includes: $c)		ifTrue:	[			selector = #doIfElse				ifTrue: [block _ IfElseBlockMorph new isSpecialForm: true]				ifFalse: [block _ CBlockMorph new isSpecialForm: true]]		ifFalse:	[			(blockType includes: $r) | (blockType includes: $b)				ifTrue: [block _ ReporterBlockMorph new]				ifFalse: [block _ CommandBlockMorph new]].	(blockType includes: $b) ifTrue: [block isBoolean: true].	(blockType includes: $s) ifTrue: [block isSpecialForm: true].	(blockType includes: $t) ifTrue: [block isTimed: true].	(ScriptableScratchMorph isSpriteSpecificTarget: self selector: selector)		ifTrue: [rcvr _ self]		ifFalse: [rcvr _ self ownerThatIsA: ScratchStageMorph].	^ block		argPermutation: argPermutation;"		color: blockColor;"		color: dispBlockColor;		selector: selector;		commandSpec: blockLabelSpec;		defaultArgs: defaultArgs;		receiver: rcvr! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/19/2018 10:45'!blocksFor: aCategory	"Answer a collection of blocks for the given category. Mixed with the blocks are dash and tilde symbols (#- and #~) indicating where full and half spaces should be inserted when laying out the blocks."	| blockColor blocksList category b |	blockColor _ self class blockColorFor: aCategory.	blocksList _ OrderedCollection new.	category _ nil.	self class blockSpecs do: [:spec |		((spec isKindOf: String) and: [spec ~= #- and: [spec ~= #~]])			ifTrue: [category _ spec]			ifFalse: [				category = aCategory ifTrue: [					(spec = #-) | (spec = #~)						ifTrue: [blocksList addLast: spec]						ifFalse: [							(b _ self blockFromSpec: spec color: blockColor) ifNotNil: [								blocksList addLast: b]]]]].	^ blocksList asArray! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 17:59'!viewerPageForMotion	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin isStage addMotorBlocks addStuduinoBlocks s x y font m |	bin _ ScratchBlockPaletteMorph new.	(self isKindOf: ScratchStageMorph)		ifTrue: [			isStage _ true.			addMotorBlocks _ self showMotorBlocks.			addStuduinoBlocks _ self showStuduinoBlocks]		ifFalse: [			isStage _ false.			s _ self ownerThatIsA: ScratchStageMorph.			addMotorBlocks _ s notNil and: [s showMotorBlocks].			addStuduinoBlocks _ s notNil and: [s showStuduinoBlocks]].	(isStage & ((addMotorBlocks not) & (addStuduinoBlocks not))) ifTrue: [		font _ (ScratchFrameMorph getFont: #ViewerPage).		x _ 20.		y _ 12.		m _ StringMorph contents: 'Stage selected:' localized font: font.		bin addMorph: (m color: Color white; position: x@y).		m _ StringMorph contents: 'No motion blocks' localized font: font.		bin addMorph: (m color: Color white; position: x@(y + 17)).		^ bin].	x _ 12.	y _ 10.	(self blocksFor: 'motion') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"				(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	((addMotorBlocks not) & (addStuduinoBlocks not)) ifTrue: [^ bin].	isStage ifFalse: [		y _ y + 7.		bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).		y _ y + 20].	addStuduinoBlocks ifTrue: [		(self blocksFor: 'studuino') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].		(self blocksFor: 'studuino control') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	]."	isStage ifFalse: [		y _ y + 7.		bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).		y _ y + 20]."	addMotorBlocks ifTrue: [		(self blocksFor: 'motor') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	" Only for Studuino mini "	(BoardType = 1) ifTrue: [		(self blocksFor: 'motion mini') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].].	^ bin! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 18:00'!viewerPageForSensing	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin x y s addExtraBlocks |	bin _ ScratchBlockPaletteMorph new.	s _ self ownerThatIsA: ScratchStageMorph.	addExtraBlocks _ s notNil and: [s showStuduinoBlocks].	x _ 12.	y _ 10.	(self blocksFor: 'sensing') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"				(blockOrSym = #~) ifTrue: [					y _ y + 7.					bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).					y _ y + 20]]			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	addExtraBlocks ifTrue: [		(self blocksFor: 'sensingextra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [						y _ y + 7.						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 20.]]				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	" Only for Studuino mini "	(BoardType = 1) ifTrue: [		(self blocksFor: 'sensing mini') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"					(blockOrSym = #~) ifTrue: [						y _ y + 7.						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 20]]				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].].	^ bin! !!ScriptableScratchMorph methodsFor: 'networking' stamp: 'KK 4/19/2018 10:20'!httpGet: aUrl| splitUrl |Transcript show: aUrl; cr.splitUrl := aUrl asByteArray asString findTokens: '?'.^ splitUrl size > 1 	ifTrue: [ (HTTPSocket httpGet: splitUrl first args: splitUrl second accept: 'application/text') contents ]	ifFalse: [ (HTTPSocket httpGet: splitUrl first) contents ]! !!ScriptableScratchMorph methodsFor: 'networking' stamp: 'KK 4/19/2018 10:19'!httpGet: aUrl param: params	| splitParam p pNum param sFrame stage |	sFrame _ self ownerThatIsA: ScratchFrameMorph.	sFrame ifNil: [^ self].	stage _ sFrame workPane.	(stage showStuduinoBlocks) ifFalse: [		^ ''.	].	Transcript show: aUrl; show: ', '; show: params; cr.	splitParam _ params findTokens: '&'.	param _ ''.	pNum _ splitParam size.	1 to: pNum do: [:index|		p _ splitParam at: index.		(p findString: '=') = 0 ifFalse: [			" Valid Paramter "			param _ param, p.			index = pNum ifFalse: [ param _ param, '&'. ].		]	].	Transcript show: aUrl; show: ','; show: param; cr.	^ param = ''		ifTrue: [ (HTTPSocket httpGet: aUrl) contents ]		ifFalse: [ (HTTPSocket httpGet: aUrl, '?', param) contents]! !!ScriptableScratchMorph methodsFor: 'networking' stamp: 'KK 4/19/2018 10:17'!paramKey: aKey value: aValue	| sFrame stage |	sFrame _ self ownerThatIsA: ScratchFrameMorph.	sFrame ifNil: [^ self].	stage _ sFrame workPane.	(stage showStuduinoBlocks) ifTrue: [		^ ('&', aKey, '=', aValue)	] ifFalse: [		^ ''.	].! !!ArduinoScratchSpriteMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 18:23'!viewerPageForMotion	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin s addExtraBlocks x y |	bin := ScratchBlockPaletteMorph new.	s _ self ownerThatIsA: ScratchStageMorph.	addExtraBlocks _ s notNil and: [s showStuduinoBlocks].	x _ 12.	y _ 10.	(self blocksFor: 'studuino') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"				(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	(addExtraBlocks not) ifTrue: [^ bin].	y _ y + 7.	bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).	y _ y + 20.	addExtraBlocks ifTrue: [		(self blocksFor: 'studuinoextra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	^ bin! !!ArduinoScratchSpriteMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 18:24'!viewerPageForSensing	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin x y s addExtraBlocks |	bin := ScratchBlockPaletteMorph new.	s _ self ownerThatIsA: ScratchStageMorph.	addExtraBlocks _ s notNil and: [s showStuduinoBlocks].	x _ 12.	y _ 10.	(self blocksFor: 'sensing') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"				(blockOrSym = #~) ifTrue: [					y _ y + 7.					bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).					y _ y + 20]]			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	(addExtraBlocks not) ifTrue: [^ bin].	y _ y + 7.	bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).	y _ y + 20.	addExtraBlocks ifTrue: [		(self blocksFor: 'sensingextra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	" Only for Studuino mini "	(BoardType = 1) ifTrue: [		(self blocksFor: 'sensing mini') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"					(blockOrSym = #~) ifTrue: [						y _ y + 7.						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 20]]				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].].	^ bin! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'KK 4/5/2018 18:03'!blockColorFor: aCategory	"Answer the block color for the given category."	'studuino control' = aCategory ifTrue: [^ (Color h: 41 s: 0.85 v: 0.9)].	'control' = aCategory ifTrue: [^ (Color h: 41 s: 0.85 v: 0.9)].	('motion' = aCategory or: ['studuino' = aCategory]) ifTrue: [^ (Color h: 225 s: 0.65 v: 0.83)].	'studuinoextra' = aCategory ifTrue: [^ (Color h: 225 s: 0.65 v: 0.83)].	'motor' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'motion mini' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'looks' = aCategory ifTrue: [^ (Color h: 264 s: 0.62 v: 0.89)].	'pen' = aCategory ifTrue: [^ (Color h: 165 s: 1 v: 0.63)].	'operators' = aCategory ifTrue: [^ (Color h: 93 s: 0.9 v: 0.76)].	'sound' = aCategory ifTrue: [^ (Color h: 296 s: 0.66 v: 0.85)].	'sensing' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'sensing mini' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'sensingextra' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'variables' = aCategory ifTrue: [^ (Color h: 25 s: 0.88 v: 0.95)].	'list' = aCategory ifTrue: [^ ListBlockColor].	'notSensing' = aCategory ifTrue: [^ (Color h: 0 s: 0 v: 0.5)].	'compatible' = aCategory ifTrue: [^ (Color h: 28 s: 0.61 v: 0.96)].	^ (Color h: 0 s: 0.81 v: 0.83)  "a shade of red"! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'KK 4/16/2018 14:12'!blockSpecs	"Answer a collection of block specifications for the blocks that are common to all objects. Block specificatons (Arrays) are interspersed with category names (Strings). A block specification is an Array of the form: (<block spec string> <block type> <selector> [optional initial argument values]).	Explanation of flags:		-	no flags		b	boolean reporter		c	c-shaped block containing a sequence of commands (always special form)		r	reporter		s	special form command with its own evaluation rule		t	timed command, like wait or glide		E	message event hat		K	key event hat		M	mouse-click event hat		S	start event hat		W	when <condition> hat (obsolete)"	| blocks |	blocks _ #(		'control'			('when %m clicked'				S	-)			('when %k key pressed'			K	-)			('when %m clicked'				M	-)			-			('wait %n secs'					t	wait:elapsed:from: 1)			-			('forever'						c	doForever)			('repeat %n'						c	doRepeat 10)			-			('broadcast %e'					-	broadcast:)			('broadcast %e and wait'			s	doBroadcastAndWait)			('when I receive %e'			E	-)			-			('forever if %b'					c	doForeverIf)			('if %b'							c	doIf)			('if %b'							c	doIfElse)			('wait until %b'					s	doWaitUntil)			('repeat until %b'				c	doUntil)			-			('stop script'					s	doReturn)			('stop all'						-	stopAll)		'operators'			('%n + %n'						r	+ - -)			('%n - %n'						r	- - -)			('%n * %n'						r	* - -)			('%n / %n'						r	/ - -)			-			('pick random %n to %n'		r	randomFrom:to: 1 10)			-			('%s < %s'						b	< '' '')			('%s = %s'						b	= '' '')			('%s > %s'						b	> '' '')			-			('%b and %b'					b	&)			('%b or %b'						b	|)			('not %b'						b	not)			-			('join %s %s'					r	concatenate:with: 'hello ' 'world')			('letter %n of %s'				r	letter:of: 1 'world')			('length of %s'					r	stringLength: 'world')			-			('%n mod %n'					r	\\ - -)			('round %n'						r	rounded -)			-			('%f of %n'						r	computeFunction:of: 'sqrt' 10)		'sound'			('play sound %S'				-	playSound:)			('play sound %S until done'		s	doPlaySoundAndWait)			('stop all sounds'				-	stopAllSounds)			-			('play drum %D for %n beats'	t 	drum:duration:elapsed:from: 48 0.2)			('rest for %n beats'				t 	rest:elapsed:from: 0.2)			-			('play note %N for %n beats'	t	noteOn:duration:elapsed:from: 60 0.5)			('set instrument to %I'			- 	midiInstrument: 1)			-			('change volume by %n'		- 	changeVolumeBy: -10)			('set volume to %n%'			- 	setVolumeTo: 100)			('volume'						r 	volume)			-			('change tempo by %n'			- 	changeTempoBy: 20)			('set tempo to %n bpm'			- 	setTempoTo: 60)			('tempo'							r 	tempo)		'studuino'			('Set servomotor %J to %F degrees'			-	motorNo:degree: 'PIN' 90)			('DC motor %j power %n'		-	motorNo:power: 'PIN' 100)			('DC motor %j on at %t'		-	motorNo:dcMotorOn: 'PIN' 'cw.')			('DC motor %j off %T'		-	motorNo:dcMotorOff:'PIN' 'Brake')			('Buzzer %B on frequency %N'	-	buzzerPin:freq: 'PIN' 60)			('Buzzer %B off'					-	buzzerPin: 'PIN')			('LED %p %o'					-	ledPin:onOff: 'PIN' 'on')		'studuino control'			-			('Servomotor synchro motion speed:%E'						c	doSvmSyncMotion2 10)		'studuino'			-			('digital %D1 value %D2'			-	digital:value: 'PIN' 0)			('analog %A1 value %A2'		-	analog:value: 'PIN' 0)		'motor'			('motor on for %n secs'			t	motorOnFor:elapsed:from: 1)			('motor on'						-	allMotorsOn)			('motor off'						-	allMotorsOff)			('motor power %n'				-	startMotorPower: 100)			('motor direction %W'			-	setMotorDirection: 'this way')		'variables'			('show variable %v'				-	showVariable:)			('hide variable %v'				-	hideVariable:)		'list'			('add %s to %L'					-	append:toList: 'thing')			-			('delete %y of %L'				-	deleteLine:ofList: 1)			('insert %s at %i of %L'			-	insert:at:ofList: 'thing' 1)			('replace item %i of %L with %s'		-	setLine:ofList:to: 1 'list' 'thing')			-			('item %i of %L'					r	getLine:ofList: 1)			('length of %L'					r	lineCountOfList:)			('%L contains %s'				b	list:contains: 'list' 'thing')			-			('write %L to %A as text file'	-	list:export: 'list' 'path')	).	^ blocks, self obsoleteBlockSpecs! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'jm 4/1/2005 07:25'!buildBlockSpecDictionary	"self buildBlockSpecDictionary"	| blockColor sel |	BlockSpecDict _ IdentityDictionary new: 250.	BlockColorDict _ IdentityDictionary new: 250.	self withAllSubclassesDo: [:cl |		blockColor _ Color blue.		cl blockSpecs do: [:spec |			((spec isKindOf: String) and: [spec size > 1]) ifTrue: [				"set color  for this category"				blockColor _ self blockColorFor: spec].			(spec isMemberOf: Array) ifTrue: [				sel _ spec at: 3.				BlockSpecDict at: sel put: spec.				BlockColorDict at: sel put: blockColor]]].! !!ScratchSpriteMorph class methodsFor: 'block specs' stamp: 'KK 4/16/2018 14:11'!blockSpecs	| blocks |	blocks _ #(		'motion'			('move %n steps'				-	forward:)			('turn %n degrees'				-	turnRight: 15)	"icon shows turn direction"			('turn %n degrees'				-	turnLeft: 15)	"icon shows turn direction"			-			('point in direction %d'			-	heading: 90)			('point towards %m'				-	pointTowards:)			-			('go to x:%n y:%n'				-	gotoX:y: 0 0)			('go to %m'						-	gotoSpriteOrMouse:)			('glide %n secs to x:%n y:%n'	t	glideSecs:toX:y:elapsed:from: 1 50 50)			-			('change x by %n'				-	changeXposBy: 10)			('set x to %n'					-	xpos: 0)			('change y by %n'				-	changeYposBy: 10)			('set y to %n'					-	ypos: 0)			-			('if on edge, bounce'			-	bounceOffEdge)			-			('x position'						r	xpos)			('y position'						r	ypos)			('direction'						r	heading)		'pen'			('clear'							-	clearPenTrails)			-			('pen down'						-	putPenDown)			('pen up'						-	putPenUp)			-			('set pen color to %c'			-	penColor:)			('change pen color by %n'		-	changePenHueBy:)			('set pen color to %n'			-	setPenHueTo: 0)			-			('change pen shade by %n'		-	changePenShadeBy:)			('set pen shade to %n'			-	setPenShadeTo: 50)			-			('change pen size by %n'		-	changePenSizeBy: 1)			('set pen size to %n'				-	penSize: 1)			-			('stamp'							-	stampCostume)	).	blocks _ blocks, #(		'looks'			('switch to costume %l'			-	lookLike:)			('next costume'					-	nextCostume)			('costume #'						r	costumeIndex)			-			('say %s for %n secs'			t	say:duration:elapsed:from: 'Hello!!' 2)			('say %s'						-	say: 'Hello!!')			('think %s for %n secs'			t	think:duration:elapsed:from: 'Hmm...' 2)			('think %s'						-	think: 'Hmm...')			-			('change %g effect by %n'		-	changeGraphicEffect:by: 'color' 25)			('set %g effect to %n'			-	setGraphicEffect:to: 'color' 0)			('clear graphic effects'			-	filterReset)			-			('change size by %n'			-	changeSizeBy:)			('set size to %n%'				-	setSizeTo: 100)			('size'							r	scale)			-			('show'							-	show)			('hide'							-	hide)			-			('go to front'					-	comeToFront)			('go back %n layers'			-	goBackByLayers: 1)		'sensing'			('touching %m?' 				b	touching:)			('touching color %C?' 			b	touchingColor:)			('color %C is touching %C?'		b	color:sees:)			-			('ask %s and wait'				s	doAsk 'What''s your name?')			('answer'						r	answer)			-			('mouse x'						r	mouseX)			('mouse y'						r	mouseY)			('mouse down?'					b	mousePressed)			-			('key %k pressed?'				b	keyPressed: 'space')			-			('distance to %m'				r	distanceTo:)			-			('reset timer'					-	timerReset)			('timer'							r	timer)			-			('%a of %m'						r	getAttribute:of:)			-			('loudness'						r	soundLevel)			('loud?'							b	isLoud)			~			('%H sensor value'				r	sensor: 'slider')			('sensor %h?'					b	sensorPressed: 'button pressed')			-		'sensingextra'			~			('Value of digital sensor %D3'	r	digitalSensor: 'PIN')			('Value of analog sensor %A3'	r	analogSensor: 'PIN')			-			('Get data from %s with %s'		r	httpGet:param: 'URL' 'Parameter')			('Paramter %s and %s'			r    paramKey:value: 'key' 'value')"			('Light Sensor %Z value'		r	lightSensor: 'A0')			('Touch Sensor %V value'	r	touchSensor: 'A0')			('Sound Sensor %Z value'	r	sensor: 'A0')			('Reflective Photosensor %Z value'	r	sensor: 'A0')			('3-Axis Digital Accelerometer %Y value'	r	sensor: 'X')			('Button %X value'	r	sensor: 'A0')"		).	^ blocks, super blockSpecs! !!ArduinoScratchSpriteMorph class methodsFor: 'block specs' stamp: 'KK 4/5/2018 18:24'!blockColorFor: aCategory	"Answer the block color for the given category."	'studuinoextra' = aCategory ifTrue: [^ (Color h: 225 s: 0.65 v: 0.83)].	'control' = aCategory ifTrue: [^ (Color h: 41 s: 0.85 v: 0.9)].	('motion' = aCategory or: ['studuino' = aCategory]) ifTrue: [^ (Color h: 225 s: 0.65 v: 0.83)].	'motor' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'looks' = aCategory ifTrue: [^ (Color h: 264 s: 0.62 v: 0.89)].	'pen' = aCategory ifTrue: [^ (Color h: 165 s: 1 v: 0.63)].	'operators' = aCategory ifTrue: [^ (Color h: 93 s: 0.9 v: 0.76)].	'sound' = aCategory ifTrue: [^ (Color h: 296 s: 0.66 v: 0.85)].	'sensing' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'sensingextra' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'variables' = aCategory ifTrue: [^ (Color h: 25 s: 0.88 v: 0.95)].	'list' = aCategory ifTrue: [^ ListBlockColor].	^ (Color h: 0 s: 0.81 v: 0.83)  "a shade of red"! !!ArduinoScratchSpriteMorph class methodsFor: 'block specs' stamp: 'KK 4/16/2018 14:25'!blockSpecs"self buildBlockSpecDictionary"	| blocks |	blocks _ #(		'motion'		'studuino'			('Set servomotor %J to %F degrees'			-	motorNo:degree: 'PIN' 90)			('DC motor %j power %n'		-	motorNo:power: 'PIN' 100)			('DC motor %j on at %t'		-	motorNo:dcMotorOn: 'PIN' 'cw.')			('DC motor %j off %T'		-	motorNo:dcMotorOff:'PIN' 'Brake')			('Buzzer %B on frequency %N'	-	buzzerPin:freq: 'PIN' 60)			('Buzzer %B off'					-	buzzerPin: 'PIN')			('LED %p %o'					-	ledPin:onOff: 'PIN' 'on')		'studuinoextra'			('digital %D1 value %D2'			-	digital:value: 'PIN' 0)			('analog %A1 value %A2'		-	analog:value: 'PIN' 0)		'motion mini'			('Onboard LED %p1 %o'			-	boardLED:onOff: 'Red(D5)' 'on')			('Set time %nh %nm'			-	hour:min: 0 0)			('Set date %n/%n/%n'			-	month:day:year: 1 1 2016)			('Set alarm %nh %nm'			-	alhour:almin: 0 0)			('Set backlight R%n G%n B%n'	-	red:green:blue: 0 0 0)			('Backlight %o'					-	clkBackLight: 'on')			('Clock''s buzzer on frequency %N for %n'	t	clkBuzzerOnFreq:For:elapsed:from: 60 1)		'control'			('when %m clicked'				S	-)			('when %k key pressed'			K	-)			-			('wait %n secs'					t	wait:elapsed:from: 1)			-			('forever'						c	doForever)			('repeat %n'						c	doRepeat 10)			-			('broadcast %e'					-	broadcast:)			('broadcast %e and wait'			s	doBroadcastAndWait)			('when I receive %e'			E	-)			-			('forever if %b'					c	doForeverIf)			('if %b'							c	doIf)			('if %b'							c	doIfElse)			('wait until %b'					s	doWaitUntil)			('repeat until %b'				c	doUntil)			('Servomotor synchro motion speed:%E'						c	doSvmSyncMotion2 10)			-			('stop script'					s	doReturn)			('stop all'						-	stopAll)		'compatible'			('Servomotor synchro motion delay:%E'						c	doSvmSyncMotion 10)		'studuino control'			('Servomotor synchro motion speed:%E'						c	doSvmSyncMotion2 10)		'looks'		'sensing'			('Light Sensor %P value'		r	lightSensor: 'PIN')			('Touch Sensor %V value'	r	touchSensor: 'PIN')			('Sound Sensor %O value'	r	soundSensor: 'PIN')			('IR Photoreflector %Z value'	r	refPhotosensor: 'PIN')						('Temperature sensor %w value'	r	temperatureSensor: 'PIN')			('3-Axis Digital Accelerometer %Y value'	r	accelerometer: 'AXIS')			('Gyro sensor %G value'	r	gyroSensor: 'X(Acc)')"			('Infrared receiver value'	r	infraredReceiver)"			('Button %X value'	r		onBoardButton: 'PIN')			~			('mouse x'					r	mouseX)			('mouse y'					r	mouseY)			('mouse down?'				b	mousePressed)			-			('key %k pressed?'			b	keyPressed: 'space')			-			('reset timer'				-	timerReset)			('timer'						r	timer)		'sensingextra'			~			('Value of digital sensor %D3'	r	digitalSensor: 'PIN')			('Value of analog sensor %A3'	r	analogSensor: 'PIN')			-			('Get data from %s with %s'		r	httpGet:param: 'URL' 'Parameter')			('Paramter %s and %s'			r    paramKey:value: 'key' 'value')		'sensing mini'			('Clock''s %Z1'	r	clockValue: 'Hour')			('becoming in alarm time'		b	isInAlarm)			('Onboard Light Sensor value'	r		onBoardLightSensor)			('Power value'	r		power)		'sound'		'operators'			('%n + %n'						r	+ - -)			('%n - %n'						r	- - -)			('%n * %n'						r	* - -)			('%n / %n'						r	/ - -)			-			('pick random %n to %n'		r	randomFrom:to: 1 10)			-			('%s < %s'						b	< '' '')			('%s = %s'						b	= '' '')			('%s > %s'						b	> '' '')			-			('%b and %b'					b	&)			('%b or %b'						b	|)			('not %b'						b	not)			-			('join %s %s'					r	concatenate:with: 'hello ' 'world')			('letter %n of %s'				r	letter:of: 1 'world')			('length of %s'					r	stringLength: 'world')			-			('%n mod %n'					r	\\ - -)			('round %n'						r	rounded -)			-			('%f of %n'						r	computeFunction:of: 'sqrt' 10)		'pen'		'variables'			('show variable %v'				-	showVariable:)			('hide variable %v'				-	hideVariable:)		'list'			('add %s to %L'					-	append:toList: 'thing')			-			('delete %y of %L'				-	deleteLine:ofList: 1)			('insert %s at %i of %L'			-	insert:at:ofList: 'thing' 1)			('replace item %i of %L with %s'		-	setLine:ofList:to: 1 'list' 'thing')			-			('item %i of %L'					r	getLine:ofList: 1)			('length of %L'					r	lineCountOfList:)			('%L contains %s'				b	list:contains: 'list' 'thing')			-			('write %L to %A as text file'	-	list:export: 'list' 'path')	).	 ^ blocks! !!ScratchStageMorph class methodsFor: 'block specs' stamp: 'KK 4/16/2018 14:09'!blockSpecs	| blocks |	blocks _ #(		'sensing'			('ask %s and wait'			s	doAsk 'What''s your name?')			('answer'					r	answer)			-			('mouse x'					r	mouseX)			('mouse y'					r	mouseY)			('mouse down?'				b	mousePressed)			-			('key %k pressed?'			b	keyPressed: 'space')			-			('reset timer'				-	timerReset)			('timer'						r	timer)			-			('%a of %m'					r	getAttribute:of:)			-			('loudness'					r	soundLevel)			('loud?'						b	isLoud)			~			('%H sensor value'			r	sensor: 'slider')			('sensor %h?'				b	sensorPressed: 'button pressed')			-		'sensingextra'			~			('Value of digital sensor %D3'	r	digitalSensor: 'PIN')			('Value of analog sensor %A3'	r	analogSensor: 'PIN')			-			('Get data from %s with %s'		r	httpGet:param: 'URL' 'Parameter')			('Paramter %s and %s'			r    paramKey:value: 'key' 'value')		'looks'			('switch to background %l'	-	showBackground: 'background1')			('next background'			-	nextBackground)			('background #'				r	backgroundIndex)			-			('change %g effect by %n'	-	changeGraphicEffect:by: 'color' 25)			('set %g effect to %n'		-	setGraphicEffect:to: 'color' 0)			('clear graphic effects'		-	filterReset)			-"xxx			('place sprites for scene %x'	-	showScene:) "		'pen'			('clear'						-	clearPenTrails)	).	^ blocks, super blockSpecs! !!StuduinoSensorBoardMorph methodsFor: 'private' stamp: 'KK 4/20/2018 17:38'!processScratchByte: aByte	"Process one byte of the incoming data stream from a Scratch sensor board."	"Sensor messages are two bytes with the following format:		Byte1: <1><sensor number (4 bits)><sensor value high bits (3 bits)>		Byte2: <0><sensor value low bits (7 bits)>"	| sensorNum val dtype pos isExtendedRead obj id |	(aByte bitShift: -5) = 4 ifTrue: [		dtype _ aByte bitAnd: 16r1F.		dtype = 0 ifTrue: [	"ACK"			resCommand _ 1].		dtype = 1 ifTrue: [	"NACK"			resCommand _ -1].		dtype = 16r1F ifTrue: [	"syncFinish"			onSyncServo _ false].		^ self].	" Not update if the data is dummy. (No sensor is selected but A0 dat comes as dummy.) "	(IOPort select: [:each | (each > 15) & (each < 26) | (each = StdnoPIDDigitalInput) | (each = StdnoPIDAnalogInput)]) size = 0		ifTrue: [^ self].	"Extended data coming."	isExtendedRead _ false.	(((aByte bitShift: -6) = 2) | ((aByte bitShift: -6) = 3)) ifTrue: [		isExtendedRead _ true].	currentState = #idle ifTrue: [  "wait for first byte of message"		(aByte bitShift: -6) = 0 ifTrue: [			currentState _ #firstByteSeen.			highByte _ aByte].		^ self].	currentState = #firstByteSeen ifTrue: [		(aByte bitShift: -6) = 0 ifTrue: [  "must have lost second byte; stay in firstByteSeen state"			highByte _ aByte.			^ self].		"good second byte: report the sensor value"		sensorNum _ ((highByte bitShift: -2) bitAnd: 16rF) + 1.		val _ ((highByte bitAnd: 3) bitShift: 6) + (aByte bitAnd: 16r3F).		" Checking an extended data. "		sensorNum <= 8 ifTrue: [			"Temperature sensor"			id _ IOPort at: (10 + sensorNum).			((id = 16r18) | (id = StdnoPIDAnalogInput)) ifTrue: [				isExtendedRead ifFalse: [					secondByte _ aByte.					^ self				].				val _ ((highByte bitAnd: 3) bitShift: 6) + (secondByte bitAnd: 16r3F).				val _ val + ((aByte bitAnd: 16r3F) bitShift: 8)			]		] ifFalse: [			"Gyro sensor"			(IOPort at: 15) = 16r19 ifTrue: [				isExtendedRead ifFalse: [					secondByte _ aByte.					^ self.				] ifTrue: [					(((aByte bitShift: -6) bitAnd: 3) = 2) ifTrue: [						thirdByte _ aByte.						^ self					].				].				val _ ((highByte bitAnd: 3) bitShift: 6) + (secondByte bitAnd: 16r3F).				val _ val + ((thirdByte bitAnd: 16r1F) bitShift: 8).				val _ val + ((aByte bitAnd:16r07) bitShift: 13).				(val > 32767) ifTrue: [					val _ val - 65536.				].			]		].		(val = 128) ifTrue: [ ^ self ].		(val = 128) ifTrue: [ val _ 0. ].	" 128 is open port or output parts "		(BoardType = 1) & (sensorNum = (readouts size)) ifTrue: [			val _ (val / 10.0)].		sensorNum <= sensorValues size ifTrue: [			pos _ sensorNum.			((sensorNum = 7 ) | (sensorNum = 8))				ifTrue: [					(readouts size ) > 8 ifTrue: [ pos _ sensorNum + 1]. "A6/A7 position increment by Acc"					(readouts size ) > 10 ifTrue: [ pos _ sensorNum + 4]]. "A6/A7 position increment by Gyro"			sensorNum > 8				ifTrue: [					pos _ sensorNum - 4.  "Accelerometer readout position to I2C"					(IOPort at: 15) = StdnoPIDAcceleration ifTrue: [						val _ self convertAccelerometer: val					].					(IOPort at: 15) = StdnoPIDGyro ifTrue: [						val _ (self convertGyro: val kind: sensorNum).					].				] ifFalse: [					(IOPort at: (10 + sensorNum)) = 16r18						ifTrue: [							obj _ listTempBuf at: sensorNum.							val _ (obj average: (self convertToCelcius: val)) asFloat.]].			sensorValues at: pos put: val.			sensorNum = 16 ifTrue: [				(val == 3) | (val == 4) ifTrue: [					scratchBoardV3 _ true]]].  "ScratchBoard, version 3 or 4"		currentState _ #idle].! !!StuduinoSensorBoardMorph methodsFor: 'initialization' stamp: 'KK 4/17/2018 09:34'!addReadouts	| readoutNames sensorID offset light touch sound infrared acceleration button setAcceleration open led buzzer colorLED kindOfSensor sizeAx tmp header cont temperature setGyro |	" Check IOPort ""	Transcript show:'[SensorBoardMorph::addReadouts] ';show:(IOPort);cr."	setGyro _ false.	" Set gyro sensor flag "	offset _ 10.		" Offset for sensor ID "	open _ 16r00.			" Not connected "	led _ 16r03.				" LED ID "	buzzer _ 16r04.			" Buzzer ID "	colorLED _ 16r05.		" Color LED ID "	light _ 16r10.			" Light sensor ID "	touch _ 16r11.			" Touch sensor ID "	sound _ 16r12.			" Sound sensor ID "	infrared _ 16r13.		" IR Photoreflector ID "	acceleration _ 16r14.		" Accelerometer ID "	button _ 16r15.			" Button sensor ID "	temperature _ 16r18.		" Temperature sensor ID "	setAcceleration _ false.	" Set acceleration sensor flag "	(BoardType = 0 or: [BoardType = 2]) ifTrue: [		sizeAx _ 8.]	ifFalse: [		sizeAx _ 6.].	readoutNames _ OrderedCollection new.	1 to: sizeAx do: [ :index |		sensorID _ IOPort at: (index + offset).		(sensorID = open) ifTrue: [	" Not connected "			readoutNames add:'[A', (index - 1) asString,']',' Not connected'.		].		(sensorID = led) ifTrue: [	" LED "			readoutNames add:'[A', (index - 1) asString,']',' LED'.		].		(sensorID = buzzer) ifTrue: [	" Buzzer "			readoutNames add:'[A', (index - 1) asString,']',' Buzzer'.		].		(sensorID = colorLED) ifTrue: [	" Color LED "			readoutNames add:'[A', (index - 1) asString,']',' Color LED'.		].		(sensorID = light) ifTrue: [	" Light Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Light sensor'.		].		(sensorID = touch) ifTrue: [	" Touch Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Touch sensor'.		].		(sensorID = sound) ifTrue: [	" Sound Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Sound sensor'.		].		(sensorID = infrared) ifTrue: [	" IR Photoreflector "			readoutNames add:'[A', (index - 1) asString,']',' IR Photoreflector'.		].		(sensorID = acceleration) ifTrue: [	" Accelerometer "			(setAcceleration = false) ifTrue: [				readoutNames add:'[A4/A5] Accelerometer (X)'.				readoutNames add:'[A4/A5] Accelerometer (Y)'.				readoutNames add:'[A4/A5] Accelerometer (Z)'.				setAcceleration _ True.			].		].		(sensorID = temperature) ifTrue: [	" Temperature sensor "			readoutNames add:'[A', (index - 1) asString,']',' Temperature sensor'.			listTempBuf at: index put: (TemperatureSensor new).		].		(sensorID = StdnoPIDGyro) ifTrue: [	" Gyro Sensor "			(setGyro = false) ifTrue: [				readoutNames add:'[A4/A5] Gyro sensor (X(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (Y(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (Z(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (X(Gyro))'.				readoutNames add:'[A4/A5] Gyro sensor (Y(Gyro))'.				readoutNames add:'[A4/A5] Gyro sensor (Z(Gyro))'.				setGyro _ True.			].		].		(sensorID = button) ifTrue: [	" Button "			readoutNames add:'[A', (index - 1) asString,']',' Button'.		].		(sensorID = StdnoPIDDigitalInput) ifTrue: [	" Digital input "			readoutNames add:'[A', (index - 1) asString,'] ', DigitalInputName.		].		(sensorID = StdnoPIDAnalogInput) ifTrue: [	" Analog input "			readoutNames add:'[A', (index - 1) asString,'] ', AnalogInputName.		].		(sensorID = StdnoPIDDigitalOutput) ifTrue: [	" Digital output "			readoutNames add:'[A', (index - 1) asString,'] ', DigitalOutputName.		].		(sensorID = StdnoPIDAnalogOutput) ifTrue: [	" Analog output "			readoutNames add:'[A', (index - 1) asString,'] ', AnalogOutputName.		].	].	column _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (193/255) g: (196/255) b: (199/255));		borderWidth: 2;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	titleMorph _ StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	column addMorph: titleMorph.	self updateTitle.	column addMorphBack: (Morph new color: column color; extent: 5@3).  "spacer"	self removeAllMorphs.	readouts _ readoutNames collect: [:i |		(((i findString: 'Not connected') ~= 0) | 		 ((i findString: 'LED') ~= 0) | 		 ((i findString: 'Buzzer') ~= 0) |		 ((i findString: DigitalOutputName) ~= 0) | 		 ((i findString: AnalogOutputName) ~= 0)) ifTrue: [			kindOfSensor _ false.		] ifFalse: [			kindOfSensor _ true.		].		(i size = 1)			ifTrue:[self addReadoutLabeled: i isSensor: kindOfSensor]			ifFalse:[				tmp _ i findTokens: ' '.				header _ tmp at: 1.				cont _ ''.				2 to: (tmp size) do: [:index |					cont _ cont, (tmp at: index).					(index = tmp size) ifFalse: [cont _ cont, ' '].].				self addReadoutLabeled: (header localized, ' ', cont localized) isSensor: kindOfSensor.]	].	" For Studuino mini "	(BoardType = 1) ifTrue: [		readouts add: (self addReadoutLabeled: 'Onboard LightSensor' localized).		readouts add: (self addReadoutLabeled: 'Battery voltage [V]' localized).		clock _ ColorClock new].	column position: self position - 2.	self addMorph: column.	self extent: column extent - 4.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/18/2018 10:41'!addReadoutLabeled: aString field: clmn	"Add a readout row with the given label. Answer the stringmorph that's the readout."	| row box readout |	row _ AlignmentMorph newRow		color: clmn color;		inset: 2.	row addMorphBack: (Morph new color: clmn color; extent: 1@3). "spacer"	row addMorphBack: (StringMorph contents: aString capitalized font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	row addMorphBack: (AlignmentMorph new color: clmn color; extent: 10@1; hResizing: #spaceFill). "spacer"	box _ NumericUpDownMorph new		extent: 42@14;		color: (ScriptableScratchMorph blockColorFor: 'sensing').	box setDefault: 0 min: -15 max: 15 width: 30 isEdit: false.	Boxes add: box.	" Set the box "	row addMorphBack: box.	row addMorphBack: (StringMorph contents: ('deg.' localized) font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	readout _ StringMorph contents: '0' font: (StrikeFont fontName: 'VerdanaBold' size: 10).	readout color: Color white.	clmn addMorphBack: row.	ServoMotorField add: row.	^ readout! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/18/2018 10:42'!setDCDefaultValue: data	| index def ratio |	index _ 1.	Sliders do: [:sliderInfo |		def _ data at:index.		sliderInfo submorphs do: [ :earch |			(earch isMemberOf: DCSliderMorph2) ifTrue: [				ratio _ def / 255.0.				earch setScaledValue: ratio.	" Set slider position. "				self motorNo: (earch getPortName) displayPower: ratio.			].		].		index _ index + 1.	].! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/18/2018 11:28'!setDefaultPosition	|  partsID box val pin pins |	pins _ #(16r0000 16r0200 16r0400 16r0600 16r0800 16r0A00 16r0C00 16r0E00). 	3 to: 10 do: [ :i |		partsID _ IOPort at:i.		" Get Parts ID "		" Send only servomotor info to board "		(partsID = StdnoPIDServomotor) ifTrue: [			pin _ pins at: (i - 2).			box _ Boxes at: (i - 2).			val _ box getValue.			val _ val + 90.			val _ pin + val rounded.			self data: val msgID: 1.		].	].! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 4/26/2018 16:36'!motorNo: n calibrationPower: p	"Set Power the DC motor selected"	| mid ival tmp |	"Check argument."	n = '' ifTrue: [^0].	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [		tmp _ 16r0400.		"b0000 0100 0000 0000"	].	(n = 'M2') ifTrue: [		tmp _ 16r0C00.		"b0000 1100 0000 0000"	].	ival _ (p asNumber).	(ival >= 100)  ifTrue: [ ival _ 100. ].	(ival <= 0)	 ifTrue: [ ival _ 0.   ].	ival _ tmp + (ival rounded).				"b0000 n100 + val "	^self data: ival msgID: mid.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/18/2018 10:47'!reset	"Reset calibration"		Boxes do: [ :box |		box getValid ifTrue: [			box numExpression: 0.			box notifyOwner: 0.		].	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/18/2018 10:49'!setDCCalibration	"Set calibration"		| filename f index val |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/dc_calib_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	index _ 1.		Sliders do: [ :sliderInfo |		sliderInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				val _ (elm getScaledValue * 100) truncated.				f nextPut: val.			].		].		index _ index + 1.	].	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/18/2018 10:49'!setDCCalibrationImm	"Set calibration"		| filename f index val |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini_imm'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/dc_calib_ini_imm'.	].	f _ FileStream fileNamed: filename.	f binary.	index _ 1.		Sliders do: [ :sliderInfo |		sliderInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				val _ (elm getScaledValue * 255) truncated.				DCCalib at: index put: val.				f nextPut: val.			].		].		index _ index + 1.	].	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/18/2018 10:50'!yes	"Set calibration"		((DCCalibStatus = 0) | (DCCalibStatus = -1)) ifTrue: [	" if STOP and Invalid status... "		Smalltalk isMacOSX ifFalse: [			self stop.		].		self setServoCalibration.		self setDCCalibration.		self setDCCalibrationImm.		self closePort.		self delete.		ScratchMenuTitleMorph setMenuEnable: true.		DuringCalib _ false.	].! !ArduinoScratchSpriteMorph removeSelector: #analog:value:!ScriptableScratchMorph removeSelector: #digitalOut!ScriptableScratchMorph removeSelector: #hookupDigitalOutPin!ScratchFrameMorph removeSelector: #readCalibInfo!ScratchFrameMorph removeSelector: #shiftToCalibrationMode2!