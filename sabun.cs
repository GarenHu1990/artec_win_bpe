'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 8 March 2018 at 9:27:17 am'!SimpleSliderMorph subclass: #DCSliderMorph2	instanceVariableNames: 'portName display '	classVariableNames: ''	poolDictionaries: ''	category: 'Studuino'!ExpressionArgMorph subclass: #NumericUpDownMorph	instanceVariableNames: 'buttons downMorph upMorph minimum maximum valid '	classVariableNames: 'DownForm UpForm '	poolDictionaries: ''	category: 'Scratch-Blocks'!ScriptableScratchMorph subclass: #ScratchStageMorph	instanceVariableNames: 'zoom hPan vPan penTrailsForm lastPenPositions runningBlocks inProcessStep sensorBoard servoCalibrationBoard midiPortNum midiPort notePlayerDict obsoleteSavedState sprites scratchServer isQuarterSize cachedForm showMotorBlocks motorCalibBoard '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Objects'!SensorBoardMorph subclass: #MotorCalibMorph2	instanceVariableNames: 'kindOfAck sketchActivation dcMotorCalibArea '	classVariableNames: 'Boxes BoxesTemp DCButtons DCCalibStatus DCMotorStatus DCSliderMorph DecisionButtons ServoMotorField SliderValueTemp Sliders '	poolDictionaries: ''	category: 'Studuino'!MotorCalibMorph2 class	instanceVariableNames: ''!!DCSliderMorph2 methodsFor: 'scrolling' stamp: 'KK 1/30/2018 14:19'!scrollAbsolute: event	| sFrame sScript |	super scrollAbsolute: event.		(sFrame _ self ownerThatIsA: ScratchFrameMorph) ifNil: [		Transcript show:'sFrame nil';cr.	].	(sScript _ self ownerThatIsA: ScriptableScratchMorph) ifNil: [		Transcript show:'sScript nil';cr.	].	Transcript show:self getScaledValue;cr.! !!DCSliderMorph2 methodsFor: 'event handling' stamp: 'KK 2/8/2018 13:45'!mouseDown: evt	(MotorCalibMorph2 dcCalibStatus = 1) ifTrue: [	" start "		super mouseDown: evt.	].! !!DCSliderMorph2 methodsFor: 'event handling' stamp: 'KK 2/8/2018 13:45'!mouseMove: evt	| calibMorph ratio |	(MotorCalibMorph2 dcCalibStatus = 1) ifTrue: [		super scrollAbsolute: evt.		(calibMorph _ self ownerThatIsA: MotorCalibMorph2) ifNotNil: [			ratio _ self getScaledValue.			calibMorph motorNo: (self getPortName) calibrationPower: ((ratio * 100) truncated).			calibMorph motorNo: (self getPortName) displayPower: ratio.		].	].! !!DCSliderMorph2 methodsFor: 'private' stamp: 'KK 1/30/2018 14:20'!getPortName	"Get M1 or M2 port Name"	^ portName.! !!DCSliderMorph2 methodsFor: 'private' stamp: 'KK 2/2/2018 11:17'!setDisplayValue: val	"Set M1 or M2 port Name"	display _ val.! !!DCSliderMorph2 methodsFor: 'private' stamp: 'KK 1/30/2018 14:20'!setPortName: name	"Set M1 or M2 port Name"	portName _ name.! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:50'!color: c	color _ c.! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:51'!getValue	^ labelMorph contents asNumber.! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:52'!notifyOwner: d	" I notify message to the owner "	" The owner is servomotor calibration board. "	| block frame sb pin ival offset portArg n b |	(block _ self ownerThatIsA: CommandBlockMorph).	block ifNotNil: [	" Owner is CommandBlockMorph "		(block selector = #motorNo:degree:) ifTrue: [	" Owner is servomotor block "			portArg _ block findA: ChoiceArgMorph.			n _ portArg choice.			" Check argument. "			n = '' ifTrue: [^self].			" Port is not open, return. "			frame _ self ownerThatIsA: ScratchFrameMorph.			sb  _ frame workPane sensorBoard.			(sb portIsOpen) ifFalse: [ ^ self. ].			offset _ 0.			(n = 'D2') ifTrue: [	" D2 "				pin _ 16r0000.			"b0000 0000 0000 0000"				offset _ SvCalib at:(5).	" Servomotor offset"			].			(n = 'D4') ifTrue: [	" D4 "				pin _ 16r0200.			"b0000 0010 0000 0000"				offset _ SvCalib at:(6).	" Servomotor offset"			].			(n = 'D7') ifTrue: [	" D7 "				pin _ 16r0400.			"b0000 0100 0000 0000"				offset _ SvCalib at:(7).	" Servomotor offset"			].			(n = 'D8') ifTrue: [	" D8 "				pin _ 16r0600.			"b0000 0110 0000 0000"				offset _ SvCalib at:(8).	" Servomotor offset"			].			(n = 'D9') ifTrue: [	" D9 "				pin _ 16r0800.			"b0000 1000 0000 0000"				offset _ SvCalib at:(1).	" Servomotor offset"			].			(n = 'D10') ifTrue: [	" D10 "				pin _ 16r0A00.			"b0000 1010 0000 0000"				offset _ SvCalib at:(2).	" Servomotor offset"			].			(n = 'D11') ifTrue: [	" D11 "				pin _ 16r0C00.			"b0000 1100 0000 0000"				offset _ SvCalib at:(3).	" Servomotor offset"			].			(n = 'D12') ifTrue: [" D12 "				pin _ 16r0E00.			"b0000 1110 0000 0000"				offset _ SvCalib at:(4).	" Servomotor offset"			].			ival _ d asNumber.			ival _ ival + offset.	" Calibration "			(ival >= 180)  ifTrue: [ ival _ 180. ].			(ival <= 0)	 ifTrue: [ ival _ 0.   ].			ival _ pin + ival rounded.			"Transcript show:'ScriptableScratchMorph:: motorNo:degree:'; show: ival;cr."			sb data:ival msgID:1.		].	].	(b _ self ownerThatIsA: MotorCalibMorph2).	b ifNotNil: [	" Owner is Motor Calibration Board "		b reflectCalibration: self degree: d.	].! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:51'!setValid: v	" set this Instance true:valid / false:invalid "	valid _ v.	v ifFalse: [		labelMorph textColor: (Color gray: 0.7).		upMorph actionSelector: #noReaction.		downMorph actionSelector: #noReaction.	] ifTrue: [		labelMorph textColor: (Color black).		upMorph actionSelector: #incValue.		downMorph actionSelector: #decValue.	].! !!NumericUpDownMorph methodsFor: 'other' stamp: 'KK 2/19/2018 13:51'!enterKeyPressed	| val tmp |	"Respond to the enter key being pressed in one of my input fields."	tmp _ World activeHand keyboardFocus.	World activeHand newKeyboardFocus: nil.	val _ labelMorph contents asNumber.	(val > maximum) ifTrue: [ val _ maximum ].	(val < minimum) ifTrue: [ val _ minimum ].	self numExpression: val.	self notifyOwner: val.	World activeHand newKeyboardFocus: tmp.! !!NumericUpDownMorph methodsFor: 'private' stamp: 'KK 2/19/2018 13:53'!noReaction! !!NumericUpDownMorph methodsFor: 'initialization' stamp: 'KK 2/19/2018 13:54'!setDefault: defVal	" Set initial value, minimum value, maximum value, and up/down button. "	self numExpression: defVal.! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'KK 2/19/2018 14:57'!createMenuPanel	"Create and add a panel containing the menus and close button."	| menuSpecs m code |	"create panel"	menuPanel _ AlignmentMorph new		color: Color transparent;		centering: #center;		inset: 0;		height: 0.	"will grow as needed"	self addShortcutButtonsTo: menuPanel.	"menuSpecs defines the menus"	code _ ScratchTranslator currentLanguage.	(code = 'en') | (code = 'ja') | (code = 'ja_HIRA') ifTrue:[		menuSpecs _ #(			"name			selector"			(File			fileMenu:)			(Edit			editMenu:)			(Run			runMenu:)"			(Setting			settingMenu:)"			(Help			helpMenu:)		)]	ifFalse: [		menuSpecs _ #(			"name			selector"			(File			fileMenu:)			(Edit			editMenu:)			(Run			runMenu:)			(Help			helpMenu:)		)].	" Check motor calibration mode "	workPane motorCalibrationBoard ifNotNil: [		workPane motorCalibrationBoard owner		ifNil: [			ScratchMenuTitleMorph setMenuEnable: true.		].	].	menuSpecs do: [:spec |		m _ ScratchMenuTitleMorph new			contents: (spec at: 1) localized;			target: self selector: (spec at: 2).		menuPanel addMorphBack: m.		#helpMenu: = (spec at: 2) ifFalse: [			menuPanel addMorphBack: (Morph new color: Color transparent; extent: 12@5)]].	topPane addMorph: menuPanel.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 2/26/2018 09:33'!calibrateMotor	(BoardType = 0) ifTrue: [		self shiftToCalibrationMode].	(BoardType = 1) ifTrue: [		self shiftToCalibrationModeMini].	(BoardType = 2) ifTrue: [		self shiftToCalibrationModeMini].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 2/19/2018 14:32'!runOnBoard	"I create a source file written in Arduino language. 	 I make it and run on board in communication with board manager"	| s line dialogBox comPort msgID doBuild comNumber res |	" If test mode on, test mode off "	(DuringTest = true) ifTrue: [	" During a test? "		self testModeOff.	].	" Create a UserProgram.cpp "	doBuild _ self writeArduLangFile: 'user\artecRobot.cpp'.	(doBuild = false) ifTrue: [		" STOP Serial Communication "		^ self.	].	s _ self createBMHandle.	s ifNil: [^ self].	" Success in connection "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: 'RUN'.	" Display Status DialogBox "	dialogBox _ NotificationMessage show: 16r10.	"Building and updating"	" Waiting for BM's completing to build a program."	" Only if a board is Studuino mini. "	(BoardType = 1 or: [BoardType = 2]) ifTrue: [		Transcript show: '---------- Recving1 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		res _ line.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line. " Number "Transcript show: res; show: ' '; show: msgID; cr.		dialogBox no.		(res = 'OK') ifTrue: [			" Asking user to push a reset button. "			dialogBox _ NotificationMessage show: 16r20.	"Waiting for RESET"]		ifFalse: [	" Build error "			ErrorMessage show: msgID asNumber.			^ self.].	].	" Wait for program creation and updating to end  "	Transcript show: '---------- Recving2 ----------'; cr.	line _ self waitForBMResponse: s.	(line = '-1') ifTrue: [		dialogBox ifNotNil: [dialogBox no].		^ self].	comPort _ line.	COMPort _ comPort.	" set class value "	line _ self waitForBMResponse: s.	(line = '-1') ifTrue: [		dialogBox ifNotNil: [dialogBox no].		^ self].	msgID _ line sansSemicolonSuffix.Transcript show:comPort; show:', '; show:msgID;cr.	" Display message "	" Hide Status DialogBox "	dialogBox no.	Transcript show:line;cr.	" Display message "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: 'BREAK'.	s disconnect.	s destroy.	BoardStatus _ 0.	(comPort ~= 'ERR') ifTrue: [		BoardStatus _ 2.	] ifFalse: [		(msgID = '2') ifTrue: [			" Close port if port was opened  by myself "			comNumber _ 1.			32 timesRepeat: [				ScratchPlugin closePort:comNumber.				comNumber _ comNumber + 1.			].		].		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 2/19/2018 14:34'!setBoardIO| result |[	 | s line filename f b i |	ScratchMenuTitleMorph setMenuEnable: false.	" Communicate with Board Manager "	s _ self createBMHandle.	s ifNil: [^ self].	" Success in connection "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: 'CONFIG'.	" Wait for program creation and updating to end  "	Transcript show: '---------- Recving ----------'; cr.	line _ self waitForBMResponse: s For: 36000.	(line = '-1') ifTrue: [^ self].	result _ line sansSemicolonSuffix.	line _ self waitForBMResponse: s.	(line = '-1') ifTrue: [^ self].	Transcript show:line;cr.	" Display message "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: 'BREAK'.	"Delay forSeconds: 1."	"1000 timesRepeat: []."	s disconnect.	s destroy.	" If I/O Configuration is updated, update IOPort and TestMode OFF. "	result = 'UPDATE' ifTrue: [		" Get Configuration Info "		filename := 'Board.cfg'.		f _ FileStream fileNamed: filename.		f binary.		i _ 1.		[f atEnd] whileFalse: [			b _ f next.	" PartsID "			" I/O Port Configuration "			IOPort at:(i) put:b.			i _ i + 1.		].		(DuringTest = true)	" During a test ? "		ifTrue: [ self testModeOff. ].	" yes -> off "Transcript show:IOPort;cr.		self viewerPane refresh.		f close.		self setLanguage: (ScratchTranslator currentLanguage).	].	ScratchMenuTitleMorph setMenuEnable: true.] fork.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 2/28/2018 10:10'!shiftToCalibrationMode	"Move onto calibration mode for Studuino."	| s line  dialogBox comPort msgID sb result calibData dcCalibData |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending1 ----------'; cr.		s sendCommand: 'TEST'.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						" Wait for program creation and updating to end  "		Transcript show: '---------- Recving2 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show: comPort; show:', '; show: line; cr.	" Display message "		" Send message "		Transcript show: '---------- Sending3 ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board "		sb _ workPane motorCalibrationBoard.		sb portIsOpen ifTrue: [			Transcript show:'[ScratchFrameMorph::calibrationMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self calibrateMotor.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Connected Studuino. "			ServomotorSynchroMotion _ false.			sb data: 16r0100 msgID: 5.			calibData _ Array new: 8.			dcCalibData _ Array new: 2.			ScratchFrameMorph getCalibData: calibData swap: true.			ScratchFrameMorph getDCCalibData: dcCalibData.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1.					sb setCalibrationField: (elm-2) valid: true.				] ifTrue: [					calibData at: (elm-2) put: 0.					sb setCalibrationField: (elm-2) valid: false.				].			].			" Set DC motor status "			(((IOPort at: 1) = 0) | ((IOPort at: 2) = 0)) ifTrue: [				" Set Unusable "				sb initDCMotorCalibrationField: false.			] ifFalse: [				" Set Usable "				sb initDCMotorCalibrationField: true.			].			" Hide communication box "			dialogBox no.			" Set default value to Servo and DC "			sb setDefaultValue: calibData.			sb setDCDefaultValue: dcCalibData.			" Set default position to the servomotor. "			sb setDefaultPosition.			" Invalidate menu "			ScratchMenuTitleMorph setMenuEnable: false.			self showCalibrationBoard.			sb initSyncProc.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 2/19/2018 14:40'!showCalibrationBoard	| sc |	sc _ workPane motorCalibrationBoard.	sc position: stageFrame position - ((sc width)@0) + (-20@20).	sc openInWorld.	World startSteppingSubmorphsOf: sc.! !!ScratchFrameMorph methodsFor: 'stepping' stamp: 'KK 2/19/2018 14:44'!waitForBMResponse: s For: seconds	| line |	" I receive message from Board Manager and return message"	line _ WriteStream on: String new.	line _ s getBMResponseFor: seconds.	^ line sansSemicolonSuffix.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 2/19/2018 14:30'!installNewProject: newWorkpane	"Called after creating or reading a new project to clear the process scheduler, pick an object to view, clear the library thumbnails, and perform other housekeeping."	| viewTarget sb cb |	self stopAll.	IOPort ifNil: [ IOPort _ Array new:18. ].	SvCalib ifNil: [ SvCalib _ Array new:8. ].	DCCalib ifNil: [ DCCalib _ Array new:2. ].	SvDegree ifNil: [ SvDegree _ Array new:8. ].	SvDegreeTemp ifNil: [ SvDegreeTemp _ Array new:8. ].	SvSentAlready ifNil: [ SvSentAlready _ Array new:8. ].	SvCalib atAllPut: 0.	DCCalib atAllPut: 100.	SvDegree atAllPut: 90.	SvDegreeTemp atAllPut: 90.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.	newWorkpane class = ScratchStageMorph		ifFalse: [^ self inform: 'Incompatible Scratch file format'].	"self exitScratchSession."	workPane scratchServer ifNotNil: [		workPane scratchServer clearCaches.		workPane scratchServer stage: newWorkpane.		newWorkpane scratchServer: workPane scratchServer].	newWorkpane isQuarterSize: workPane isQuarterSize.	newWorkpane bounds: workPane bounds.	newWorkpane midiPortNum: workPane midiPortNum.	workPane closeMIDI.	"use the same sensorboard for the new project"	sb _ workPane sensorBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: SensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane sensorBoard: sb.	"use the same calibrationboard for the new project"	cb _ workPane motorCalibrationBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: MotorCalibMorph2) ifTrue: [			cb position: m position.			newWorkpane replaceSubmorph: m by: cb.			cb tryToOpenPort]].	newWorkpane motorCalibrationBoard: cb.	workPane owner replaceSubmorph: workPane by: newWorkpane.	workPane _ newWorkpane.	self fixByteReversedSounds.	"fix sprite positions (backward compatability)"	workPane submorphs do: [:m |		(m isKindOf: WatcherMorph) ifTrue: [m convertFromOldWatcher].		(m respondsTo: #costume) ifTrue: [			m position: m position + m costume rotationCenter]. "fix up positions"		m layoutChanged].	workPane layoutChanged.	"reset timer"	ScriptableScratchMorph resetTimer.	"pick an object view, or view the background if there is no other"	viewTarget _ workPane.	workPane submorphs do: [:m |		(m respondsTo: #scripts) ifTrue: [			m scripts size >= viewTarget scripts size ifTrue: [viewTarget _ m]]].	viewTarget viewBlocksAndScripts.	"populate the sprites list if it is empty (backward compatability)"	workPane sprites isEmpty ifTrue: [		workPane submorphs do: [:m |			(m isKindOf: ScriptableScratchMorph) ifTrue: [workPane sprites addLast: m]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	(projectInfo at: 'isHosting' ifAbsent: [false]) ifTrue: [		self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false]) ifTrue: [		self showMotorBlocks].	(projectInfo includesKey: 'penTrails') ifTrue: [		workPane penTrailsForm: (projectInfo at: 'penTrails')].	Clipboard _ nil.	World cleanseStepList.  "make sure garbage collect can clean up the old sprites"	Smalltalk garbageCollect.  "get rid of old sprite instances"	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/22/2018 15:27'!createBMHandle	| filename f port |	" I connect to Board Manager through localhost. "	" Get IP Port Number "	filename := 'portNumber.info'.	f _ FileStream fileNamed: filename.	f binary.	port _ f uint32.	f close.	^ self createBMHandle: port.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/19/2018 14:28'!initStuduinoGlobalVars	""	| arrayID svSize index |	(BoardType = 0 or: [BoardType = 2]) ifTrue: [ " Studuino "Transcript show: 'Studuino selected.'.		arrayID := Array new: 18.		index _ 1.		#(1 1 0 0 0 0 2 2 2 0 21 21 21 21 0 0 0 0) do: [:each |			arrayID at: index put: each.			index _ index + 1.		].		svSize _ 8.]	ifFalse: [ "BoardType 1: Studuino mini"Transcript show: 'Studuino mini selected.'.		arrayID _ #(0 0 5 5 5 2 2 0 0 0 0 0 0 0 0 0 0 0 0).		svSize _ 5.].Transcript show: 'size: ', arrayID size asString; cr.	" Redefine IOPOrt basing on arrayID size."	IOPort _ arrayID.	self updateIOInfo.	SvCalib _ Array new: svSize.	SvCalib atAllPut: 0.	DCCalib _ Array new: 2.	DCCalib atAllPut: 100.	CalibInfoLocation = 1 ifTrue: [		self updateCalibInfo].	SvDegree _ Array new: svSize.	SvDegree atAllPut: 90.	SvDegreeTemp _ Array new: svSize.	SvDegreeTemp atAllPut: 90.	SvSentAlready _ Array new: svSize.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/19/2018 14:33'!sendMessageToBM: aMessage	 | s line result |	" Communicate with Board Manager "	s _ self createBMHandle.	s ifNil: [^ self].	" Success in connection "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: aMessage.	" Wait for program creation and updating to end  "	Transcript show: '---------- Recving ----------'; cr.	line _ self waitForBMResponse: s.	(line = '-1') ifTrue: [^ self].	result _ line sansSemicolonSuffix.	line _ self waitForBMResponse: s.	(line = '-1') ifTrue: [^ self].	Transcript show:line;cr.	" Display message"	" Send message "	Transcript show: '---------- Sending BREAK----------'; cr.	s sendCommand: 'BREAK'.	s disconnect.	s destroy.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/22/2018 15:29'!shiftToTestMode	"Move onto test mode for Studuino."	| s dialogBox line sb mid ival comPort msgID result partsID type |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'TEST'.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						" Wait for program creation and updating to end  "		Transcript show: '---------- Recving ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show:comPort; show:', '; show:line;cr.	" Display message "		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board ""sc _ workPane servoCalibrationBoard."		sb _ workPane sensorBoard.		sb portIsOpen ifTrue: [Transcript show:'[ScratchFrameMorph::testMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self testMode.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Send port configuration "			mid _ 5.			0 to: 7 do: [: index |				partsID _ IOPort at: (11 + index).				((partsID = 17) | (partsID = 21)) ifTrue: [					type _ 0]. "Digital"				((partsID = 16) | (partsID = 18) | (partsID = 19)) ifTrue: [					type _ 1]. "Analog"				(partsID = 20) ifTrue: [					type _ 2]. "Accelerometer"				(partsID = 24) ifTrue: [					type _ 3]. "Temperature"				(partsID = 25) ifTrue: [					type _ 4]. "Gyro"				(partsID > 15) & (partsID < 26) ifTrue: [					ival _ 16r0100 + (type bitShift: 4) + index.					sb data:ival msgID:mid.					Transcript show: ival; cr]].			" Set A0 as digital input for dummy if no sensor is selected.			  It's necessary for preventing from the disconnection. "			(IOPort select: [:each | (each > 15) & (each < 25)]) size = 0				ifTrue: [ sb data: 16r0100 msgID: 5 ].			" Set Servomotors' degree connected Studuino. "			1 to: (SvDegree size) do: [ : i |				SvDegree at: i put: 90.				SvDegreeTemp at:i put:90.			].			ServomotorSynchroMotion _ false.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1]].			" Hide communication box "			dialogBox no.			self showSensorBoard.			sb initSyncProc.			DuringTest _ true.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/19/2018 14:39'!shiftToTestModeMini2	"Move onto test mode for Studuino mini."	| s line sb res socketCommand port notification portCommand portSensor socketSensor |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending TEST----------'; cr.		s sendCommand: 'TEST'.		" Asking user to push a reset button. - 1 - "		notification _ NotificationMessage show: 16r20.	"Waiting for RESET"		" Waiting for BM to transfer a testmode program. "		Transcript show: '---------- Recving1 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			notification ifNotNil: [notification no].			^ self].		res _ line.		notification no.		(res = 'OK') ifFalse: [			" Getting error number "			line _ self waitForBMResponse: s.			(line = '-1') ifTrue: [				notification ifNotNil: [notification no].				^ self].			" Notify timeout error. "			ErrorMessage show: line asNumber.			^ self].		" Asking user to push a reset button. - 2 - "		notification _ NotificationMessage show: 16r21.	"Waiting for RESET"		" Waiting for BM to transfer a testmode program. "		Transcript show: '---------- Recving1 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			notification ifNotNil: [notification no].			^ self].		res _ line.		notification no.		(res = 'OK') ifFalse: [			" Getting error number "			line _ self waitForBMResponse: s.			(line = '-1') ifTrue: [				notification ifNotNil: [notification no].				^ self].			" Notify timeout error. "			ErrorMessage show: line asNumber.			^ self].		Transcript show: '---------- Recving3 ----------'; cr.		"Waiting INITOK"		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			notification ifNotNil: [notification no].			^ self].		res _ line sansSemicolonSuffix.		(res = 'INITOK') ifTrue: [			Transcript show: '---------- Sending TEST2S----------'; cr.			s sendCommand: 'TEST2S'.			line _ self waitForBMResponse: s.			(line = '-1') ifTrue: [				notification ifNotNil: [notification no].				^ self].			port _ line asNumber.]		ifFalse: [			notification no.			ErrorMessage show: 100.			^ self].	].Transcript show: res; cr.	(port > 0) ifTrue: [	" Success to Transfer "		"Check if the port is available."		portCommand _ (port asNumber) bitAnd: 16rFFFF.		portSensor _ portCommand + ((port asNumber) bitShift: -16).		sb _ workPane sensorBoard.		sb socketIsOpen ifTrue: [Transcript show:'[ScratchFrameMorph::testMode] close & open port';cr.			sb closeSocket.		]."		sb socket: s."		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		socketSensor _ self createBMHandle: portSensor.		socketSensor ifNil: [^ self.].		sb socket: socketSensor.		socketCommand _ self createBMHandle: port.		socketCommand ifNil: [^ self.].		sb socketCommand: socketCommand.		"  Set sensorboard items "		sb addReadouts.		" Send port configuration "		self showSensorBoard.		DuringTest _ true.	].	notification no.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 2/19/2018 14:43'!waitForBMResponse: s	| line |	" I receive message from Board Manager and return message"	line _ WriteStream on: String new.	line _ s getBMResponse.	^ line sansSemicolonSuffix.! !!ScratchFrameMorph methodsFor: '-- all --' stamp: 'KK 2/19/2018 14:43'!updatePanes	| p |	menuPanel ifNotNil: [ menuPanel delete ].	self createMenuPanel."----------	toolbarPanel delete.	self createToolbar.----------"	viewModeButtonsPanel delete.	self createViewModeButtonsPanel.	stageButtonsPanel delete.	self createStageButtonsPanel.	titlePane addMorph: stageButtonsPanel."----------	scriptsPane tabPane delete.	scriptsPane createTabPane.	readoutPane delete.	self createReadoutPane.----------"	workPane sensorBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ stageFrame position - ((workPane sensorBoard width)@0) + (-20@20)].	workPane sensorBoard addReadouts.	p ifNotNil:[		self showSensorBoard.		workPane sensorBoard position: p].	" Calibration Board "	workPane motorCalibrationBoard owner		ifNil: [p _ nil]		ifNotNil: [			p _ workPane motorCalibrationBoard position.			workPane motorCalibrationBoard saveCalibrationInfo.		].	workPane motorCalibrationBoard addReadouts.	p ifNotNil:[		workPane motorCalibrationBoard setCalibrationInfo.		self showCalibrationBoard.		workPane motorCalibrationBoard position: p.	].	" Pin Assign Board "	paBoard ifNotNil: [		paBoard savePinAssignInfo.		paBoard addReadouts.		paBoard returnPinAssignInfo.	].	libraryPane clearLibrary.	self scratchWatchers do: [:w | w languageChanged].	self listWatchers do: [:w | w fixLayoutForNewLanguage].	World startSteppingSubmorphsOf: self.	self fixLayout.	scriptsPane fixLayout.	self updateViewModeButtons.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'KK 2/19/2018 14:24'!getCalibData: buf8Array swap: s	| filename f b index dir |	"Set my language and update my blocks."	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\sv_offset_ini'.	] ifFalse: [	" for Unix / Mac "		dir _ FileDirectory default.	" Get target directory "		filename := dir pathName, '/../common/sv_offset_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	" If file is not exist, intialize 0 and create file. "	f size = 0 ifTrue: [		1 to: 8 do: [ :i |			" PartsID "			buf8Array at:i put: 0.			f nextPut: 0.		].	] ifFalse: [		s ifTrue: [			1 to: 8 do: [ :i |				" PartsID "				b _ f next.				(b > 15) ifTrue: [ b _ b - 256. ].	" Two's complement "						(i <= 4) ifTrue: [					index _ i + 4.				].				(i > 4) ifTrue: [					index _ i - 4.				].				buf8Array at:index put:b.			].		] ifFalse: [			1 to: 8 do: [ :i |				" PartsID "				b _ f next.				(b > 15) ifTrue: [ b _ b - 256. ].	" Two's complement "				buf8Array at:i put: b.			].		].	].	f close.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'KK 2/19/2018 14:24'!getDCCalibData: buf2Array 	| filename f dir |	"Set my language and update my blocks."	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini'.	] ifFalse: [	" for Unix / Mac "		dir _ FileDirectory default.	" Get target directory "		filename := dir pathName, '/../common/dc_calib_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	" If file is not exist, intialize 100 and create file. "	f size = 0 ifTrue: [		buf2Array at:1 put:100.		buf2Array at:2 put:100.		f nextPut: 100.		f nextPut: 100.	] ifFalse: [		buf2Array at:1 put:(f next).		buf2Array at:2 put:(f next).	].	f close.! !!ScratchStageMorph methodsFor: 'initialization' stamp: 'KK 2/19/2018 14:01'!initialize	super initialize.	color _ Color white.	self enableDragNDrop: true.	objName _ 'Stage' localized.	costume _ self defaultImageMedia.	media _ OrderedCollection with: costume with: SoundMedia new.	zoom _ 1.0.	hPan _ 0.	vPan _ 0.	runningBlocks _ OrderedCollection new.	inProcessStep _ false.	sensorBoard _ SensorBoardMorph new.	motorCalibBoard _ MotorCalibMorph2 new.	midiPortNum _ -1.	notePlayerDict _ Dictionary new.	obsoleteSavedState _ nil.	sprites _ OrderedCollection new.	showMotorBlocks _ false.	servoCalibrationBoard _ SensorBoardMorph new.! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 14:01'!motorCalibrationBoard	^ motorCalibBoard! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 14:02'!motorCalibrationBoard: aCalibrationBoardMorph	motorCalibBoard _ aCalibrationBoardMorph.! !!SensorBoardMorph methodsFor: 'serial port' stamp: 'KK 2/26/2018 09:31'!data: d msgID: id	"I make message and send it to board."	| mid high low msgh msgl msg carry sendMessage checksum |	(BoardType = 0) ifTrue: [		(self portIsOpen) ifFalse: [ ^0. ].]	ifFalse: [		(self socketIsOpen) ifFalse: [^0. ].].	mid _ id bitShift: 4.			 " mid = id << 4 "	high _ d bitShift: -8.		 " high = d >> 8""Transcript show:'high:'; show:high;cr."	carry _ d bitShift: -7.		 " low side carry = d >> 7""Transcript show:'carry:'; show:carry;cr."	carry _ carry bitAnd: 16r01.	 " carry = carry & 0x01""Transcript show:'carry:'; show:carry;cr."	high _ high + carry.		 " high = high + carry""Transcript show:'high:'; show:high;cr.""	high _ d bitShift: -7."	high _ high bitAnd: 16r0F.	" high = high & 0x0F"	low _ d bitAnd: 16r7F.		" low = d & 0x7F"	msgh _ 16r80 + mid + high.	" msgh = 0x80 + mid + high"	msgl _ low.					" msgl = low"	msg _ #(0 0 0) asByteArray.	msg at: 1 put: msgh.	msg at: 2 put: msgl.	(BoardType = 0) ifTrue: [		checksum _ (msgh + msgl) bitAnd: 16rFF.		msg at: 3 put: checksum.		self sendStuduinoData: msg ]	ifFalse: [		sendMessage _ String fromBytes: msg.		sendMessage _ 'REQSEND', sendMessage.		socketCommand sendCommand: sendMessage.		"self stopStepping."		socketCommand getResponseShowing: true.   "Waiting ACK"		"self startStepping.""		socket sendCommand: 'REQSEND'.		socket sendCommand: (String fromBytes: msg)."].! !!SensorBoardMorph methodsFor: 'serial port' stamp: 'KK 2/20/2018 10:52'!isBoardSetup	"Answer true if a Arduino Board is connected to serial port."	| buf temp start timeOut |	temp _ port flushInputBuffer.	(temp = -1) ifTrue: [Transcript show:'error1';cr.		^ false.	].	self sendForInit.	buf _ port readByteArray.	(buf) ifNil: [Transcript show:'error2';cr.		^ false.	].	timeOut _ 4000.	start _ Time millisecondClockValue.	[buf size = 0] whileTrue: [		(Delay forMilliseconds: 500) wait.		self sendForInit.		buf _ port readByteArray.		(buf) ifNil: [			^ false.		].		(Time millisecondClockValue - start > timeOut) ifTrue: [			Transcript show: 'Time out'; cr.			^ false].	].	^ true.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 2/6/2018 15:50'!addDCReadoutLabeled: aString power: p field: clmn	"Add a readout row with the given label. Answer the stringmorph that's the readout."	| row slider power ratio |	ratio := ScratchTranslator renderScale."	cbRatio := 1.0.	ratio > 1.5 ifTrue: [ cbRatio := ratio - 0.2. ]."	row _ AlignmentMorph newRow		color: clmn color;		inset: 2.	row addMorphBack: (Morph new color: clmn color; extent: 1@3). "spacer"	row addMorphBack: (StringMorph contents: aString capitalized).	row addMorphBack: (Morph new color: clmn color; extent: 15@3). "spacer"	power _ StringMorph contents: p capitalized.	row addMorphBack: power.	slider _ DCSliderMorph2 new.	slider minVal: 0.5; maxVal: 1.0;		setValue: 1.0;		truncate: false;		extent: (128*ratio)@(10*ratio).	slider setPortName: aString.	slider setValue: 255.	row addMorphBack: (Morph new color: row color; extent: 10@3). "spacer"	row addMorphBack: slider.	Sliders add: row.	clmn addMorphBack: row.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 2/5/2018 11:06'!addReadoutLabeled: aString field:clmn	"Add a readout row with the given label. Answer the stringmorph that's the readout."	| row box readout |	row _ AlignmentMorph newRow		color: clmn color;		inset: 2.	row addMorphBack: (Morph new color: clmn color; extent: 1@3). "spacer"	row addMorphBack: (StringMorph contents: aString capitalized font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	row addMorphBack: (AlignmentMorph new color: clmn color; extent: 10@1; hResizing: #spaceFill). "spacer"	box _ NumericUpDownMorph new		extent: 42@14;		color: (ScriptableScratchMorph blockColorFor: 'sensing').	box setDefault: 0 min: -15 max: 15 width: 30 isEdit: false.	Boxes add: box.	" Set the box "	row addMorphBack: box.	row addMorphBack: (StringMorph contents: ('deg.' localized) font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	readout _ StringMorph contents: '0' font: (StrikeFont fontName: 'VerdanaBold' size: 10).	readout color: Color white.	clmn addMorphBack: row.	ServoMotorField add: row.	^ readout! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 2/13/2018 13:09'!addReadouts	| buttonRow spacer svCalibMorph svCalibArea title svTitleAndButton button dcCalibArea dcTitleAndButton dcCalibMorph buttonStart buttonStop   buttonOK buttonCancelled |	Boxes _ OrderedCollection new.	Sliders _ OrderedCollection new.	ServoMotorField _ OrderedCollection new.	DCButtons _ OrderedCollection new.	DecisionButtons _ OrderedCollection new.	" Make all alignment column "	column _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (193/255) g: (196/255) b: (199/255));		borderWidth: 2;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	" Make title morph and add column and update "	titleMorph _ StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 14).	column addMorph: titleMorph.	self updateTitle.	column addMorphBack: (Morph new color: column color; extent: 5@3).  "spacer"	self removeAllMorphs.	" ----------------------------------------------------------------- "	" Make servomotors calibration's morpsh "	" ----------------------------------------------------------------- "	svCalibArea _ AlignmentMorph newColumn	" servormotor area "		centering: #left;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (240/255) g: (128/255) b: (128/255));		borderWidth: 1;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	" --- Title And Button --- "	svTitleAndButton _ AlignmentMorph newRow		color: svCalibArea color.	title _ StringMorph		contents: ('Servomotor' localized)		font: (StrikeFont fontName: 'VerdanaBold' size: 12).	button _ self buttonLabel: 'Reset' localized action: #reset.	" --- Calibration --- "	svCalibMorph _ AlignmentMorph newRow		color: svCalibArea color.	self updateCalib: svCalibMorph.	" --- add to column --- "	column addMorphBack: svCalibArea.	svCalibArea addMorphBack: svTitleAndButton.	svCalibArea addMorphBack: svCalibMorph.	spacer _ (svCalibArea fullBounds corner)			 - (title fullBounds corner)			 - (button fullBounds corner).	spacer setX: ((spacer x)-10) setY:0.	svTitleAndButton addMorphBack: title.	svTitleAndButton addMorphBack: (Morph new extent:spacer).	svTitleAndButton addMorphBack: button.	" ----------------------------------------------------------------- "	"  Spacer "	" ----------------------------------------------------------------- "	column addMorphBack: (Morph new color: column color; extent: 5@5).	" ----------------------------------------------------------------- "	" Make DC motors calibration's morpsh "	" ----------------------------------------------------------------- "	dcCalibArea _ AlignmentMorph newColumn	" DC motor area "		centering: #left;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (143/255) g: (188/255) b: (139/255));		borderWidth: 1;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	" --- Title And Button --- "	dcTitleAndButton _ AlignmentMorph newRow		color: dcCalibArea color.	title _ StringMorph		contents: ('DC motor' localized) 		font: (StrikeFont fontName: 'VerdanaBold' size: 12).	buttonStart _ self buttonLabel: 'Rotate' localized action: #start.	buttonStop _ self buttonLabel: 'Stop' localized action: #stop.	" --- Calibration --- "	dcCalibMorph _ AlignmentMorph newColumn		color: dcCalibArea color.	self updateDCCalib: dcCalibMorph.	column addMorphBack: dcCalibArea.	dcCalibArea addMorphBack: dcTitleAndButton.	dcCalibArea addMorphBack: dcCalibMorph.	spacer _ (svCalibArea fullBounds corner)			 - (title fullBounds corner)			 - (buttonStart fullBounds corner)			 - (buttonStop fullBounds corner).	spacer setX: ((spacer x)-15) setY:0.	dcTitleAndButton addMorphBack: title.	dcTitleAndButton addMorphBack: (Morph new extent:spacer).	dcTitleAndButton addMorphBack: buttonStart.	dcTitleAndButton addMorphBack: (Morph new extent:5@0).	dcTitleAndButton addMorphBack: buttonStop.	DCButtons add: buttonStart.	DCButtons add: buttonStop."	self updateCalib: dcCalibMorph."	" Make button alignment morph and add column and update "	buttonRow _ AlignmentMorph newRow		color: Color transparent;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		height: 32.	column addMorphBack: buttonRow.	spacer _ Morph new extent: 10@5; color: Color transparent.	buttonRow removeAllMorphs.	buttonRow addMorphBack: spacer fullCopy.	buttonOK _ (self buttonLabel: 'OK' localized action: #yes).	buttonRow addMorphBack: buttonOK.	buttonRow addMorphBack: spacer fullCopy.	buttonCancelled _  (self buttonLabel: 'Cancel' localized action: #cancelled).	buttonRow addMorphBack: buttonCancelled.	DecisionButtons add: buttonOK.	DecisionButtons add: buttonCancelled.	column position: self position - 2.	self addMorph: column.	self extent: column extent - 4.	dcMotorCalibArea _ dcCalibArea.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 1/30/2018 15:34'!getPortName	" Return port name. "	^ self portNames.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 1/31/2018 10:03'!initialize"	self addReadouts."	super initialize.! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 2/7/2018 15:00'!setDCDefaultValue: data	| index def ratio |	index _ 1.	Sliders do: [:sliderInfo |		def _ data at:index.		sliderInfo submorphs do: [ :earch |			(earch isMemberOf: DCSliderMorph2) ifTrue: [				ratio _ def / 100.0.				earch setScaledValue: ratio.	" Set slider position. "				self motorNo: (earch getPortName) displayPower: ratio.			].		].		index _ index + 1.	].! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 1/30/2018 15:34'!setDefaultPosition	|  partsID box val dh dm dl |	3 to: 10 do: [ :i |		partsID _ IOPort at:i.		" Get Parts ID "		" Send only servomotor info to board "		(partsID = StdnoPIDServomotor) ifTrue: [			box _ Boxes at: (i-2).			val _ box getValue.			dh _ i - 3.			val _ val + 90.			dm _ (val bitShift: -6) bitAnd: 16r03.			dl _ val bitAnd: 16r3F.			self partsID: 1 high: dh middle: dm low: dl.		].	].! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 1/31/2018 10:09'!setDefaultValue: data	| index def |	index _ 1.	Boxes do: [:earch |		def _ data at: index.		earch setDefault: def.	" Set NumericUpDown value. "		index _ index + 1.	].! !!MotorCalibMorph2 methodsFor: 'private' stamp: 'KK 1/30/2018 15:52'!buttonLabel: labelString action: actionSelector	"Answer a new button with the given label and selector. The button target will be me and it will use my button forms."	"(DialogBoxMorph new buttonLabel: 'Yes' action: #beep) openInWorld"	| onForm offForm button overForm |	onForm _ ScratchFrameMorph skinAt: #btnPressed.	offForm _ ScratchFrameMorph skinAt: #btn.	overForm _ ScratchFrameMorph skinAt: #btn.	button _ ResizableToggleButton2 new		offForm: offForm		onForm: onForm		overForm: overForm.	^ button		padding: 20@10;		label: labelString font: (ScratchFrameMorph getFont: #DialogBoxButton);		target: self;		actionSelector: actionSelector;		setLabelColor: (Color gray: 0.15)! !!MotorCalibMorph2 methodsFor: 'private' stamp: 'KK 2/8/2018 14:33'!doNothing	" Do nothing "! !!MotorCalibMorph2 methodsFor: 'private' stamp: 'KK 1/30/2018 15:19'!updateCalib:  morph	"Update servomotor calibration."	|  readoutNames calbCol1 calbCol2 |	calbCol1 _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: morph color;		borderColor:  morph color;		useRoundedCorners;		inset: 3.	readoutNames _ #(D2 D4 D7 D8).	readouts _ readoutNames collect: [:i |		(i size = 1)			ifTrue:[self addReadoutLabeled: i field: calbCol1]			ifFalse:[self addReadoutLabeled: i localized field: calbCol1]].	morph addMorph: calbCol1.	morph addMorphBack: (AlignmentMorph new color: morph color; extent: 10@1; hResizing: #spaceFill). "spacer"	calbCol2 _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: morph color;		borderColor:  morph color;		useRoundedCorners;		inset: 3.	readoutNames _ #(D9 D10 D11 D12).	readouts _ readoutNames collect: [:i |		(i size = 1)			ifTrue:[self addReadoutLabeled: i field: calbCol2]			ifFalse:[self addReadoutLabeled: i localized field: calbCol2]].	morph addMorphBack: calbCol2.! !!MotorCalibMorph2 methodsFor: 'private' stamp: 'KK 2/2/2018 09:38'!updateDCCalib:  morph	"Update servomotor calibration."	|  calbCol1 |	calbCol1 _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: morph color;		borderColor:  morph color;		useRoundedCorners;		inset: 3.	self addDCReadoutLabeled: ('M1' localized) power: ('255' localized) field: calbCol1.	self addDCReadoutLabeled: ('M2' localized) power: ('255' localized) field: calbCol1.	morph addMorph: calbCol1.! !!MotorCalibMorph2 methodsFor: 'private' stamp: 'KK 1/30/2018 15:19'!updateTitle	"Update my title to reflect the current protocol and port number."	| s  |	s _ 'Motor Calibration' localized.	s = titleMorph contents ifFalse: [titleMorph contents: s].! !!MotorCalibMorph2 methodsFor: 'event handling' stamp: 'KK 2/6/2018 13:37'!handlesMouseDown: evt	^ true! !!MotorCalibMorph2 methodsFor: 'event handling' stamp: 'KK 2/6/2018 13:38'!preemptsMouseDown: evt	^ false! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/8/2018 13:50'!initDCMotorCalibrationField: v	" Set calibration field to valid or invalid."	v ifTrue: [		MotorCalibMorph2 dcCalibStatus: 0.	" STOP status "		self setDCMotorCalibrationField.	] ifFalse: [		MotorCalibMorph2 dcCalibStatus: -1.	" INVALID status "		self setDCMotorCalibrationField.	].! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/8/2018 14:04'!invalidateSlider: v	v ifTrue: [		Sliders do: [ :slider |			slider submorphs do: [ :elm |				(elm isMemberOf: StringMorph) ifTrue: [					elm color: (Color gray: 0.5).				].				(elm isMemberOf: DCSliderMorph2) ifTrue: [					elm sliderColor: (Color gray: 0.5).				].			].		].	] ifFalse: [		Sliders do: [ :slider |			slider submorphs do: [ :elm |				(elm isMemberOf: StringMorph) ifTrue: [					elm color: (Color black).				].				(elm isMemberOf: DCSliderMorph2) ifTrue: [					elm sliderColor: (Color gray: 0.75).				].			].		].	].! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 1/30/2018 15:36'!isSketchActivated: time kind: id	"I receive notify of activation of sketch on Studuino "	| buf pollMSecs msecsSincePoll |	pollMSecs _ Time millisecondClockValue.	" Get current time. "	msecsSincePoll _ 0.	kindOfAck _ 0.	" Initialize result value "	[msecsSincePoll < time] whileTrue:[		msecsSincePoll _ Time millisecondClockValue - pollMSecs.	" Updtate counter. "		" Read buffer and if there is data, return data. "		buf _ port readByteArray.		buf do: [:b | self processScratchByte: b].		(kindOfAck > 0) ifTrue: [			(kindOfAck = id) ifTrue: [				^ true.			]		]	].	" Time over "	^ false.! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/8/2018 13:02'!motorNo: n calibrationPower: p	"Set Power the DC motor selected"	| mid ival tmp |	"Check argument."	n = '' ifTrue: [^0].	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [		tmp _ 16r0400.		"b0000 0100 0000 0000"	].	(n = 'M2') ifTrue: [		tmp _ 16r0C00.		"b0000 1100 0000 0000"	].	ival _ (p asNumber).	(ival >= 100)  ifTrue: [ ival _ 100. ].	(ival <= 0)	 ifTrue: [ ival _ 0.   ].	ival _ tmp + (ival rounded).				"b0000 n100 + val "	^self data:ival msgID:mid.! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/6/2018 15:51'!motorNo: n displayPower: r	| dcInfo |	"Display DC motor's power "	(n = 'M1') ifTrue: [		dcInfo _ Sliders at: 1.	] ifFalse: [		dcInfo _ Sliders at: 2.	].	dcInfo submorphs do: [ :elm |		(elm isMemberOf: StringMorph) ifTrue: [			(elm contents = n) ifFalse: [				elm contents: ((r * 255.0) truncated asString localized).			].		].	].	! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 1/31/2018 14:23'!motorNoOff:n	"Set On/Off the DC motor selected"	| mid ival |	"Check argument."	n = '' ifTrue: [^0].	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [ ival _ 16r0200. ].		"b0000 0010 0000 0000"	(n = 'M2') ifTrue: [ ival _ 16r0A00. ].	"b0000 1010 0000 0000"	ival _ ival + 0.		" break "	^self data:ival msgID:mid.! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/26/2018 09:28'!motorNoOn:n	"Set On/Off the DC motor selected"	| mid ival |	"Check argument."	n = '' ifTrue: [^0].	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [ ival _ 16r0100. ].		" b0000 0001 0000 0000 "	(n = 'M2') ifTrue: [ ival _ 16r0900. ].		" b0000 1001 0000 0000 "	ival _ ival + 0.	" ccw "	^self data: ival msgID: mid.! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 1/31/2018 18:28'!reflectCalibration: tar degree: car	" Reflect calibration to real servomotor "	| deg offset mid pin ival |	(self portIsOpen) ifFalse: [ ^ self. ].	" Create Angle "	offset _ car asNumber.	deg _ 90 + offset.	(deg >= 180)  ifTrue: [ deg _ 180. ].	(deg <= 0)	 ifTrue: [ deg _ 0.   ].	mid _ 1.		" 1 : Servo Motor ID"	pin _ -1.	((tar owner) submorphs) do: [ :kind |		(kind isMemberOf: StringMorph) ifTrue: [			(kind contents = 'D2') ifTrue: [ pin _ 0 ].			(kind contents = 'D4') ifTrue: [ pin _ 1 ].			(kind contents = 'D7') ifTrue: [ pin _ 2 ].			(kind contents = 'D8') ifTrue: [ pin _ 3 ].			(kind contents = 'D9') ifTrue: [ pin _ 4 ].			(kind contents = 'D10') ifTrue: [ pin _ 5 ].			(kind contents = 'D11') ifTrue: [ pin _ 6 ].			(kind contents = 'D12') ifTrue: [ pin _ 7 ].			(pin ~= -1) ifTrue: [				pin _ (pin bitShift: 9) bitAnd: 16r0E00.				ival _ pin + deg rounded.				^self data: ival msgID: mid.			].		].	].! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/5/2018 11:10'!setCalibrationField: i valid: v	" Set calibration field to valid or invalid."	| box field |	box _ Boxes at: i.	box setValid: v.	field _ ServoMotorField at: i.	field submorphs do: [ :elm |		(elm isMemberOf: StringMorph) ifTrue: [			v ifTrue: [ elm color: (Color black). ]			ifFalse:   [ elm color: (Color gray: 0.5). ].		].	].! !!MotorCalibMorph2 methodsFor: 'accessing' stamp: 'KK 2/26/2018 09:24'!setDCMotorCalibrationField	| |	" Set calibration field to valid or invalid."	(DCCalibStatus = -1) ifTrue: [	" invalidate "		self invalidateSlider: true.		(DCButtons at: 1) setLabelColor: (Color gray: 0.5); on; toggleButtonMode: true; toggleMode: false.		(DCButtons at: 2) setLabelColor: (Color gray: 0.5); on; toggleButtonMode: true; toggleMode: false.	].	(DCCalibStatus = 0) ifTrue: [	" stop "		self invalidateSlider: true.		(DCButtons at: 1) setLabelColor: (Color black); off; toggleButtonMode: false; toggleMode: true.		(DCButtons at: 2) setLabelColor: (Color gray: 0.5); on; toggleButtonMode: true; toggleMode: false.		(DecisionButtons at: 1) setLabelColor: (Color black);			off;			toggleButtonMode: false;			toggleMode: true.		(DecisionButtons at: 2) setLabelColor: (Color black);			off;			toggleButtonMode: false;			toggleMode: true.	].	(DCCalibStatus = 1) ifTrue: [	" start "		self invalidateSlider: false.		(DCButtons at: 1) setLabelColor: (Color gray: 0.5); on; toggleButtonMode: true; toggleMode: false.		(DCButtons at: 2) setLabelColor: (Color black); off; toggleButtonMode: false; toggleMode: true.		(DecisionButtons at: 1) setLabelColor: (Color gray: 0.5);			on;			toggleButtonMode: true;			toggleMode: false.		(DecisionButtons at: 2) setLabelColor: (Color gray: 0.5);			on;			toggleButtonMode: true;			toggleMode: false.	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/13/2018 09:52'!cancelled	" Only close port "	((DCCalibStatus = 0) | (DCCalibStatus = -1)) ifTrue: [	" if STOP or Invalid status... "		Smalltalk isMacOSX ifFalse: [			self stop.		].		self closePort.		self delete.		ScratchMenuTitleMorph setMenuEnable: true.		DuringCalib _ false.		].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 1/30/2018 15:39'!reset	"Reset calibration"		Boxes do: [ :box |		box numExpression: 0.		box notifyOwner: 0.	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/7/2018 11:50'!saveCalibrationInfo	|  |	"Save calibration value temporary"		BoxesTemp _ OrderedCollection new.	SliderValueTemp _ OrderedCollection new.	Boxes do: [ :elm |		BoxesTemp add: (elm getValue).	].	Sliders do: [ :elm |		(elm submorphs) do: [ :slider |			(slider isMemberOf: DCSliderMorph2) ifTrue: [				SliderValueTemp add: (slider getScaledValue).			].		].	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/8/2018 14:45'!setCalibrationInfo	| index partsID box dcInfo |	"Set saved calibration value"		" Servo motor status "	3 to: 10 do: [ :i |		partsID _ IOPort at:i.		" Get Parts ID "		" Send only servomotor info to board "		(partsID = StdnoPIDServomotor) ifFalse: [			self setCalibrationField:(i-2) valid:false.		].	].	" Set DC motor status "	(((IOPort at: 1) = 0) | ((IOPort at: 2) = 0)) ifTrue: [		" Set Unusable "		self initDCMotorCalibrationField: false.	] ifFalse: [		self initDCMotorCalibrationField: true.	].	index _ 1.	BoxesTemp do: [ :elm |		box _ Boxes at: index.		box setDefault: elm. 		index _ index + 1.	].	index _ 1.	SliderValueTemp do: [ :ratio |		dcInfo _ Sliders at: index.		dcInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				elm setScaledValue: ratio.				self motorNo: (elm getPortName) displayPower: ratio.			].		].		index _ index + 1.	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/7/2018 14:16'!setDCCalibration	"Set calibration"		| filename f index val |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/dc_calib_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	index _ 1.		Sliders do: [ :sliderInfo |		sliderInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				val _ (elm getScaledValue * 100) truncated.				DCCalib at: index put: val.				f nextPut: val.			].		].		index _ index + 1.	]."	m1Val _ ((Sliders at:1) getScaledValue * 100) truncated.	m2Val _ ((Sliders at:2) getScaledValue * 100) truncated.	DCCalib at: 1 put: m1Val.	DCCalib at: 2 put: m2Val.	f nextPut: m1Val.	f nextPut: m2Val."	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 1/30/2018 15:41'!setServoCalibration	"Set calibration"		| val filename f each |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\sv_offset_ini'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/sv_offset_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	" D9 - D12 "	5 to: 8 do: [:i |		each _ Boxes at: i.		" Get target  "		val _ each getValue.	" Get calibration degree "				SvCalib at:(i-4) put:val.		" Two's complement "		val < 0 ifTrue: [ val _ 256 + val. ].		f nextPut: val.	].	" D2 - D8 "	1 to: 4 do: [:i |		each _ Boxes at: i.		" Get target  "		val _ each getValue.	" Get calibration degree "				SvCalib at:(i+4) put:val.		" Two's complement "		val < 0 ifTrue: [ val _ 256 + val. ].		f nextPut: val.	].	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/26/2018 09:26'!start	| m1SliderInfo |	"Start DC motor"		(MotorCalibMorph2 dcCalibStatus = 0) ifTrue: [	" if STOP status... "		MotorCalibMorph2 dcCalibStatus: 1.	" Change START status. "		self setDCMotorCalibrationField.		m1SliderInfo _ Sliders at: 1.		m1SliderInfo submorphs do: [ :slider |			(slider isMemberOf: DCSliderMorph2) ifTrue: [				self motorNo: 'M1' calibrationPower: (slider getScaledValue) * 100.0.			].		].		m1SliderInfo _ Sliders at: 2.		m1SliderInfo submorphs do: [ :slider |			(slider isMemberOf: DCSliderMorph2) ifTrue: [				self motorNo: 'M2' calibrationPower: (slider getScaledValue) * 100.0.			].		].		self motorNoOn: 'M1'.		self motorNoOn: 'M2'.	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/8/2018 13:55'!stop	"Start DC motor"		(MotorCalibMorph2 dcCalibStatus = 1) ifTrue: [	" if START status... "		self motorNoOff: 'M1'.		self motorNoOff: 'M2'.		MotorCalibMorph2 dcCalibStatus: 0.	" change STOP status. "		self setDCMotorCalibrationField.	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 2/13/2018 09:53'!yes	"Set calibration"		((DCCalibStatus = 0) | (DCCalibStatus = -1)) ifTrue: [	" if STOP and Invalid status... "		Smalltalk isMacOSX ifFalse: [			self stop.		].		self setServoCalibration.		self setDCCalibration.		self closePort.		self delete.		ScratchMenuTitleMorph setMenuEnable: true.		DuringCalib _ false.	].! !!MotorCalibMorph2 methodsFor: 'sensor ops' stamp: 'KK 1/30/2018 15:42'!privateSensor: sensorIndex	"Read the virtual sensor with the given index permuted according to which Scratch board is plugged in and scaled if it is a known special sensor such as the light or sound sensor. If reportRaw is true then the raw sensor value (0..1023) is reported."	"This method does not call processIncomingData. It should only be used by the step method."	| i raw |	"map the sensor index to the corresponding channel"	i _ (sensorIndex asInteger max: 1) min: readouts size."	useGoGoProtocol ifFalse: [		scratchBoardV3			ifTrue: [i _ #(8 6 7 4 5 3 2 1) at: i] 			ifFalse: [i _ #(5 6 7 8 1 2 3 4) at: i]]."	raw _ sensorValues at: i.	reportRaw _ true.	" return Rawdata surely. "	reportRaw ifTrue: [^ raw].	" Following code unexecuted in which "	scratchBoardV3 ifTrue: [		i = 6 ifTrue: [^ self scaleLight: raw].		i = 7 ifTrue: [^ self scaleSound: raw]].	raw > 1020 ifTrue: [raw _ 1023].  "avoids jitter in the range 1021-1023"	^ (100.0 * raw) / 1023.0  ! !!MotorCalibMorph2 methodsFor: 'stepping' stamp: 'KK 1/30/2018 15:44'!step	"Update my title and sensor readouts. If scanning for ports, keep scanning."	| |	self updateTitle.! !!MotorCalibMorph2 methodsFor: 'serial port' stamp: 'KK 1/30/2018 15:45'!closePort	port ifNotNil: [		Smalltalk isMacOSX ifTrue: [			port setOption: 20 to: 0.  "set DTR high"			(Delay forMilliseconds:1)wait.			port setOption: 20 to: 1.  "set DTR high"		] ifFalse: [			self partsID: 7 high:0 middle:0 low:0.		].		port flushInputBuffer.		port close].	port _ nil.! !!MotorCalibMorph2 methodsFor: 'serial port' stamp: 'KK 1/30/2018 15:56'!partsID: id high: dh middle: dm low: dl	"I make message and send it to board."	| msg1 msg2 msg3 msg4 msg |"	Transcript show:'SensroBoardMorph::partsID: high: middle: low:';cr."	(self portIsOpen) ifFalse: [ ^0. ].	msg1 _ id bitOr: 16rC0.	msg2 _ (dh bitAnd: 16r3F) bitOr: 16r80.	msg3 _ (dm bitAnd: 16r3F) bitOr: 16r40.	msg4 _ (dl bitAnd: 16r3F).	msg _ #(0 0 0 0) asByteArray.	msg at: 1 put: msg1.	msg at: 2 put: msg2.	msg at: 3 put: msg3.	msg at: 4 put: msg4."	Transcript 		show:(msg at:1); show:', ';		show:(msg at:2); show:', ';		show:(msg at:3); show:', ';		show:(msg at:4); show:', ';		cr."	port nextPutAll: msg.! !!MotorCalibMorph2 methodsFor: 'serial port' stamp: 'KK 1/30/2018 15:55'!readFromPort	"receive data"	| buf |	buf _ port readByteArray.	port flushInputBuffer.	^ buf.! !!MotorCalibMorph2 methodsFor: 'serial port' stamp: 'KK 1/30/2018 15:55'!readFromPort: time	" receive data with timeout. "	" argument time is msec. "	| buf pollMSecs msecsSincePoll |	pollMSecs _ Time millisecondClockValue.	" Get current time. "	msecsSincePoll _ 0.	[msecsSincePoll < time] whileTrue:[		msecsSincePoll _ Time millisecondClockValue - pollMSecs.	" Updtate counter. "		" Read buffer and if there is data, return data. "		buf _ port readByteArray.		(buf size > 0) ifTrue: [			port flushInputBuffer.			^ buf.		].	].	" Time over "	^ nil.! !!MotorCalibMorph2 class methodsFor: 'accessing' stamp: 'KK 2/8/2018 13:44'!dcCalibStatus	^ DCCalibStatus.! !!MotorCalibMorph2 class methodsFor: 'accessing' stamp: 'KK 2/8/2018 13:44'!dcCalibStatus: s	DCCalibStatus _ s.! !!SettingMenu methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:59'!select: aNumber	(boxes at: aNumber) on.	(boxes at: aNumber) isDisabled: true.! !!String methodsFor: 'converting' stamp: 'KK 1/25/2018 15:33'!sansSemicolonSuffix	"Return a copy of the receiver up to, but not including, the first period.  If the receiver's *first* character is a period, then just return the entire receiver. "	| likely |	likely _ self copyUpTo: $;.	^ likely size == 0		ifTrue:	[self]		ifFalse:	[likely]! !!StringFieldMorph methodsFor: 'accessing' stamp: 'KK 2/19/2018 13:58'!color: c	color _ c.! !ScratchFrameMorph removeSelector: #shiftToCalibrationMode2!ExpressionArgMorph subclass: #NumericUpDownMorph	instanceVariableNames: 'valid buttons downMorph upMorph minimum maximum '	classVariableNames: 'DownForm UpForm '	poolDictionaries: ''	category: 'Scratch-Blocks'!