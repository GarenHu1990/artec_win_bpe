'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 7 May 2018 at 6:47:07 pm'!PinAssignMorph subclass: #PinAssignMorphExtra	instanceVariableNames: 'ledTapeTitleMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Studuino'!PinAssignMorph subclass: #PinAssignMorphUS	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Studuino'!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll versionConflict keyPad fontButtons usbCSPanel serverProcess usbConnectionStatus paBoard paBoardExtra paBoardBasic '	classVariableNames: 'BoardStatus COMPort Clipboard DefaultArduinoSprite DefaultNotes DefaultSprite Fonts FontsXO IsXO LangDic NewScratchProject ScratchServers ScratchSkin ScratchSkinXO TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!ScriptableScratchMorph subclass: #ScratchStageMorph	instanceVariableNames: 'showExtraBlocks zoom hPan vPan penTrailsForm lastPenPositions runningBlocks inProcessStep sensorBoard servoCalibrationBoard midiPortNum midiPort notePlayerDict obsoleteSavedState sprites scratchServer isQuarterSize cachedForm showMotorBlocks motorCalibBoard '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Objects'!SensorBoardMorph subclass: #MotorCalibMorph2	instanceVariableNames: 'kindOfAck sketchActivation dcMotorCalibArea '	classVariableNames: 'Boxes BoxesTemp DCButtons DCCalibStatus DCMotorStatus DCSliderMorph DecisionButtons ServoMotorField SliderValueTemp Sliders '	poolDictionaries: ''	category: 'Studuino'!!BlockMorph methodsFor: 'event handling' stamp: 'KK 4/5/2018 19:22'!startDrag: evt	"ArTeC: If owner is ScratchBlockPaletteMorph then I check IOPort Array and decide DragNDrop. "	| startEvt rootForGrab partsID |	(owner isKindOf: ScratchBlockPaletteMorph) ifTrue:[		(self isKindOf: EventHatMorph) ifFalse: [			(self color = (Color r: 0.6 g: 0.6 b: 0.6)) ifTrue: [^ self.].			(self selector = 'ultrasonicSensor') 	ifTrue: [ (BlockMorph isValidBlock: StdnoPIDUltrasonic) ifFalse: [ ^ self. ]].			((self selector = 'motorNo:degree:') | 			 (self selector = 'motorNo:power:') | 			 (self selector = 'motorNo:dcMotorOn:') |			 (self selector = 'motorNo:dcMotorOff:') |			 (self selector = 'buzzerPin:freq:') |			 (self selector = 'buzzerPin:') |			 (self selector = 'ledPin:onOff:') |		 	 (self selector = 'lightSensor:') |		 	 (self selector = 'touchSensor:') |		 	 (self selector = 'soundSensor:') |		 	 (self selector = 'refPhotosensor:') |		 	 (self selector = 'accelerometer:') |		 	 (self selector = 'onBoardButton:')) ifTrue: [				self submorphs do: [ :sub |					(sub isKindOf: ChoiceArgMorph) ifTrue: [						sub choice = '' ifTrue: [							^ self.						]					]				]			].			(self selector = 'ledColor:onOff:') ifTrue: [				partsID _ 16r05.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"				" If colorLED connect with board, IOPort No.12 is sure to set colorLED ID(0x05)"				((IOPort at: 12) ~= partsID) ifTrue: [					^ self.				]			]		]	].	evt hand toolType ifNil: [		startEvt _ evt hand firstClickEvent.		startEvt ifNil: [startEvt _ evt].		rootForGrab _ self rootForGrabOf: self.		rootForGrab ifNil: [^ self].		evt hand grabMorph: rootForGrab.		rootForGrab position: evt hand position + (rootForGrab topLeft - startEvt cursorPoint)].	self handleTool: evt hand toolType hand: evt hand.! !!BlockMorph class methodsFor: 'accessing' stamp: 'KK 4/5/2018 19:21'!isValidBlock: s	"The block' parts is connected to Studuino board "	IOPort detect: [:each | each = s ]	ifNone:[ ^ false. ].	^ true.! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'KK 4/11/2018 16:26'!getValid	" set this Instance true:valid / false:invalid "	^ valid.! !!PinAssignMorph methodsFor: 'accessing' stamp: 'KK 12/26/2017 15:36'!notifyCheckChange: aSet 	self notifyCheckChangeBaseSet: aSet."	(frameMorph workPane showOptionBlocks) ifTrue: [		self notifyCheckChangeWithOption: aSet.	] ifFalse: [		self notifyCheckChangeBaseSet: aSet.	]"! !!PinAssignMorph methodsFor: 'accessing' stamp: 'KK 4/9/2018 16:31'!setCheckBoxOn: portNumber partsID: pID	| set cb |	" Set checkbox "	" If port connect nothing, do nothing. "	(pID = StdnoPIDOpen) ifTrue: [ ^ self. ].	" connect with something... "	(portNumber > 0) & (portNumber < 11) ifTrue: [	" M1 - D12 "		set := pinInfo at:portNumber.		" If the port connect with motor, set checkbox on. "		cb := set findA: ToggleButton.	" Toggle button "		cb onStuduino.		self notifyCheckChange: (cb owner).	]	ifFalse: [	" A0 - A7 "		(pID = StdnoPIDButton) ifTrue: [			" Button "			set := pinInfo at:portNumber.			cb := set findA: ToggleButton.	"Toggle button "			cb onStuduino.			self notifyCheckChange: (cb owner).		]		ifFalse: [			" Other Sensor or LED / Buzzer "			set := pinInfo at:(portNumber + 4).			cb := set findA: ToggleButton.			"Toggle button "			cb onStuduino.			self notifyCheckChange: (cb owner).		].	].! !!PinAssignMorph methodsFor: 'interaction' stamp: 'KK 4/9/2018 16:24'!returnPinAssignInfo	| index |	"Return pin assignment from temporary buffer"		index := 1.	pinAssignTemporary do: [ :parts |		self setCheckBoxOn: index partsID: parts.		index := index + 1.	].	index := 1.	pinAssignTemporary	do: [ :parts | 		self setComboBox: index partsID: parts.		index := index + 1	].! !!PinAssignMorph methodsFor: 'interaction' stamp: 'KK 4/10/2018 10:08'!savePinAssignInfo	"Set pin assignment to IOPort"		self setPinAssignInfo: pinAssignTemporary.! !!PinAssignMorph methodsFor: 'interaction' stamp: 'KK 4/6/2018 17:05'!setPinAssignInfo: buf	"Set pin assignment"		| cb name set i2cUsed |	" Initialize buf array "	1 to: (buf size) do: [:num |		buf at:num put:0.	].	" Initialize some sensor's used flag "	i2cUsed := false.	InfraredReceiverUsed := -1.	UltrasonicUsed := false.	" Set buf information "	1 to: (pinInfo size) do: [:index |		set := pinInfo at:index.		cb := set findA: ToggleButton.	" Toggle button "		(index <= 2) ifTrue: [					" DC motor "			(cb isOn) ifTrue: [buf at:index put:StdnoPIDDCMotor.]		].		((index >= 3) & (index <= 10)) ifTrue: [	" Servomotor "			(cb isOn) ifTrue: [buf at:index put:StdnoPIDServomotor.]		].		((index >= 11) & (index <= 14)) ifTrue: [	" Button "			(cb isOn) ifTrue: [buf at:index put:StdnoPIDButton.]		].		((index >= 15) & (index <= 22)) ifTrue: [	" Sensro / LED / Buzzer "			(cb isOn) ifTrue: [				" Get selected name. "				name := (set findA: ChoiceArgMorphForStuduino) choice.				(name = LightSensorName) ifTrue: [ buf at:(index-4) put:StdnoPIDLightSensor.].				(name = TouchSensorName) ifTrue: [ buf at:(index-4) put:StdnoPIDTouchSensor.].				(name = SoundSensorName) ifTrue: [ buf at:(index-4) put:StdnoPIDSoundSensor.].				(name = IRPhotoreflectorName) ifTrue: [ buf at:(index-4) put:StdnoPIDIR.].				(name = AccelerometerName) ifTrue: [ buf at:(index-4) put:StdnoPIDAcceleration.].				(name = LEDName) ifTrue: [ buf at:(index-4) put:StdnoPIDLED.].				(name = BuzzerName) ifTrue: [ buf at:(index-4) put:StdnoPIDBuzzer.].				(name = InfraredReceiverName) ifTrue: [					InfraredReceiverUsed := (index-4).					buf at:(index-4) put:StdnoPIDInfraredRecv.				].				(name = TemperatureSensorName) ifTrue: [ buf at:(index-4) put:StdnoPIDTemperature.].				(name = GyroSensorName) ifTrue: [ buf at:(index-4) put: StdnoPIDGyro.].				(name = UltrasonicSensorName) ifTrue: [Transcript show: 'Ultrasonic'; cr.					UltrasonicUsed := true.					buf at:(index-4) put: StdnoPIDUltrasonic.].				(name = ColorSensorName) ifTrue: [ buf at:(index-4) put: StdnoPIDColor.].				(name = BluetoothName) ifTrue: [ buf at:(index-4) put: StdnoPIDBluetooth.].			]		].	].	^ i2cUsed.! !!PinAssignMorphExtra methodsFor: 'private' stamp: 'KK 4/3/2018 19:34'!updateLEDTapeTitle	"Update my title to reflect the current protocol and port number."	| s  |	s := 'LED tape' localized.	s = ledTapeTitleMorph contents ifFalse: [ledTapeTitleMorph contents: s].! !!PinAssignMorphExtra methodsFor: 'private' stamp: 'KK 4/3/2018 19:36'!updateMotorButtonPAArea	"Update servomotor calibration."	|  dcPAArea dcPA pn svPAArea svPA rowTemp btnPAArea btnPA  |	" -------------------------------------------------------------------- "	" 	DC motor pin assign area. "	" -------------------------------------------------------------------- "	dcPAArea := AlignmentMorph newColumn		hResizing: #shrinkWrap;		vResizing: #spaceFill;		color: (Color r: (143/255) g: (188/255) b: (139/255));		borderWidth: 1;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	dcTitleMorph := StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	dcPAArea addMorph: dcTitleMorph.	self updateDCTitle.	dcPAArea addMorphBack: (Morph new color: dcPAArea color; extent: 5@3).  "spacer"	dcPA := AlignmentMorph newRow		color:dcPAArea color;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	dcPAArea addMorphBack: dcPA.		pn := #(M1 M2).	rowTemp := self addPACheckBox: dcPA pinNames: pn.	pinInfo at:1 put:(rowTemp at:1).		" M1 "	pinInfo at:2 put:(rowTemp at:2).		" M2 "	motorButtonPAArea addMorphBack: dcPAArea.	motorButtonPAArea addMorphBack: (Morph new color: motorButtonPAArea color; extent: 5@3).  "spacer"	" -------------------------------------------------------------------- "	" 	Servomotor pin assign area. "	" -------------------------------------------------------------------- "	svPAArea := AlignmentMorph newColumn		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: (Color r: (240/255) g: (128/255) b: (128/255));		borderWidth: 1;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	servoTitleMorph := StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	svPAArea addMorphBack: servoTitleMorph.	self updateServoTitle.	svPAArea addMorphBack: (Morph new color: svPAArea color; extent: 5@3).  "spacer"	svPA := AlignmentMorph newRow		color:svPAArea color;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	svPAArea addMorphBack: svPA.		pn := #(D2 D4 D7 D8 D9 D10 D11 D12).	rowTemp := self addPACheckBox: svPA pinNames: pn.	pinInfo at:3 put:(rowTemp at:1).		" D2 "	pinInfo at:4 put:(rowTemp at:2).		" D4 "	pinInfo at:5 put:(rowTemp at:3).		" D7 "	pinInfo at:6 put:(rowTemp at:4).		" D8 "	pinInfo at:7 put:(rowTemp at:5).		" D9 "	pinInfo at:8 put:(rowTemp at:6).		" D10 "	pinInfo at:9 put:(rowTemp at:7).		" D11 "	pinInfo at:10 put:(rowTemp at:8).	" D12 "	motorButtonPAArea addMorphBack: svPAArea.	motorButtonPAArea addMorphBack: (Morph new color: motorButtonPAArea color; extent: 5@3).  "spacer"	ledTapeTitleMorph := StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	svPAArea addMorphBack: ledTapeTitleMorph.	self updateLEDTapeTitle.	svPAArea addMorphBack: (Morph new color: svPAArea color; extent: 5@3).  "spacer"	svPA := AlignmentMorph newRow		color:svPAArea color;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	svPAArea addMorphBack: svPA.		pn := #(D2 D4 D7 D8 D9 D10 D11 D12).	rowTemp := self addPACheckBox: svPA pinNames: pn.	pinInfo at:3 put:(rowTemp at:1).		" D2 "	pinInfo at:4 put:(rowTemp at:2).		" D4 "	pinInfo at:5 put:(rowTemp at:3).		" D7 "	pinInfo at:6 put:(rowTemp at:4).		" D8 "	pinInfo at:7 put:(rowTemp at:5).		" D9 "	pinInfo at:8 put:(rowTemp at:6).		" D10 "	pinInfo at:9 put:(rowTemp at:7).		" D11 "	pinInfo at:10 put:(rowTemp at:8).	" D12 "	motorButtonPAArea addMorphBack: svPAArea.	motorButtonPAArea addMorphBack: (Morph new color: motorButtonPAArea color; extent: 5@3).  "spacer"	" -------------------------------------------------------------------- "	"	Button pin assign area. "	" -------------------------------------------------------------------- "	btnPAArea := AlignmentMorph newColumn		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (244/255) g: (164/255) b: (96/255));		borderWidth: 1;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	buttonTitleMorph := StringMorph		contents: ''"		font: (ScratchFrameMorph getFont: #Label)."		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	btnPAArea addMorph: buttonTitleMorph.	self updateButtonTitle.	btnPAArea addMorphBack: (Morph new color: btnPAArea color; extent: 5@3).  "spacer"	btnPA := AlignmentMorph newRow		color:btnPAArea color;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	btnPAArea addMorphBack: btnPA.		pn := #(A0 A2).	rowTemp := self addPACheckBox: btnPA pinNames: pn.	pinInfo at:11 put:(rowTemp at:1).		" A0 "	pinInfo at:13 put:(rowTemp at:2).	" A2 "	btnPA := AlignmentMorph newRow		color:btnPAArea color;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	btnPAArea addMorphBack: btnPA.		pn := #(A1 A3).	rowTemp := self addPACheckBox: btnPA pinNames: pn.	pinInfo at:12 put:(rowTemp at:1).		" A1 "	pinInfo at:14 put:(rowTemp at:2).	" A3 "	motorButtonPAArea addMorphBack: btnPAArea.! !!PinAssignMorphExtra methodsFor: 'accessing' stamp: 'KK 4/3/2018 14:42'!setAllOff! !!PinAssignMorphExtra methodsFor: 'accessing' stamp: 'KK 4/3/2018 14:44'!setCheckBoxOn: portNumber partsID: pID! !!PinAssignMorphExtra methodsFor: 'accessing' stamp: 'KK 4/3/2018 14:45'!setComboBox: portNumber partsID: pID! !!PinAssignMorphUS methodsFor: 'interaction' stamp: 'KK 4/5/2018 15:42'!setPinAssignInfo: buf	"Set pin assignment"		| cb name set i2cUsed |	" Initialize buf array "	1 to: (buf size) do: [:num |		buf at: num put: 0.	].	" Initialize some sensor's used flag "	i2cUsed := false.	InfraredReceiverUsed _ -1.	UltrasonicUsed := false.	" Set buf information "	1 to: (pinInfo size) do: [:index |		set := pinInfo at: index.		cb := set findA: ToggleButton.	" Toggle button "		(index <= 2) ifTrue: [					" DC motor "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDDCMotor.]		].		((index >= 3) & (index <= 10)) ifTrue: [	" Servomotor "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDServomotor.]		].		((index >= 11) & (index <= 14)) ifTrue: [	" Button "			(cb isOn) ifTrue: [buf at: index put: StdnoPIDButton.]		].		((index >= 15) & (index <= 22)) ifTrue: [	" Sensro / LED / Buzzer "			(cb isOn) ifTrue: [				" Get selected name. "				name := (set findA: ChoiceArgMorphForStuduino) choice.				(name = LightSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDLightSensor.].				(name = TouchSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDTouchSensor.].				(name = SoundSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDSoundSensor.].				(name = IRPhotoreflectorName) ifTrue: [ buf at: (index-4) put: StdnoPIDIR.].				(name = AccelerometerName) ifTrue: [ buf at: (index-4) put: StdnoPIDAcceleration.].				(name = LEDName) ifTrue: [ buf at: (index-4) put: StdnoPIDLED.].				(name = BuzzerName) ifTrue: [ buf at: (index-4) put: StdnoPIDBuzzer.].				(name = InfraredReceiverName) ifTrue: [					InfraredReceiverUsed := (index-4).					buf at: (index-4) put: StdnoPIDInfraredRecv.				].				(name = TemperatureSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDTemperature.].				(name = GyroSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDGyro.].				(name = UltrasonicSensorName) ifTrue: [					UltrasonicUsed := true.					buf at: (index-4) put: StdnoPIDUltrasonic.].				(name = ColorSensorName) ifTrue: [ buf at: (index-4) put: StdnoPIDColor.].				(name = BluetoothName) ifTrue: [ buf at: (index-4) put: StdnoPIDBluetooth.].			]		].	].	^ i2cUsed.! !!PinAssignMorphUS methodsFor: 'private' stamp: 'KK 4/5/2018 15:00'!sensorPartsNameA01OP: selfOption	| myOrderedCollection |	"Answer a collection of A0-A1 connectable parts name."	myOrderedCollection := OrderedCollection new.	myOrderedCollection add: 'Light sensor';		add: TouchSensorName;		add: SoundSensorName;		add: IRPhotoreflectorName;		add: TemperatureSensorName;		add: LEDName;		add: BuzzerName;		add: '-';		add: UltrasonicSensorName."	selectedIR ifFalse: [ myOrderedCollection add: InfraredReceiverName ]	ifTrue: [		(selfOption = InfraredReceiverName) ifTrue: [			myOrderedCollection add: InfraredReceiverName ].	].	myOrderedCollection add: TemperatureSensorName.	selectedBT ifFalse: [ myOrderedCollection add: BluetoothName ]	ifTrue: [		(selfOption = BluetoothName) ifTrue: [			myOrderedCollection add: BluetoothName ].	]."	^ myOrderedCollection.! !!PinAssignMorphUS methodsFor: 'private' stamp: 'KK 4/9/2018 10:55'!sensorPartsNameA23OP: selfOption	| myOrderedCollection |	"Answer a collection of A0-A1 connectable parts name."	" ir : true(selected) / false(not select) "	" bt : true(selected) / false(not select) "	myOrderedCollection := OrderedCollection new.	myOrderedCollection add: LightSensorName;		add: TouchSensorName;		add: SoundSensorName;		add: IRPhotoreflectorName;		add: TemperatureSensorName;		add: LEDName;		add: BuzzerName."		add: '-'.	selectedIR ifFalse: [ myOrderedCollection add: InfraredReceiverName ]	ifTrue: [		(selfOption = InfraredReceiverName) ifTrue: [			myOrderedCollection add: InfraredReceiverName ].	].	myOrderedCollection add: TemperatureSensorName.	selectedBT ifFalse: [ myOrderedCollection add: BluetoothName ]	ifTrue: [		(selfOption = BluetoothName) ifTrue: [			myOrderedCollection add: BluetoothName ].	]."	^ myOrderedCollection.! !!PinAssignMorphUS methodsFor: 'accessing' stamp: 'KK 4/5/2018 15:25'!notifyCheckChangeBaseSet: aSet 	" aSet is the owner that has check box changed "	| dc sv1 sv2 ab as a4 a5 a4CB a5CB a4CmbB a5CmbB a0 a1 a0CB a1CB a0CmbB a1CmbB setComb cmb |	" ---------------------------------- "	"	M1 Pin	"	" ---------------------------------- "	(aSet == (dc := pinInfo at: 1)) ifTrue: [		sv1 := pinInfo at: 3.		" D2 pin "		sv2 := pinInfo at: 4.		" D4 pin "		self exclusiveControlDC:dc servo1:sv1 servo2:sv2.	].		" ---------------------------------- "	"	M2 Pin	"	" ---------------------------------- "	(aSet == (dc := pinInfo at: 2)) ifTrue: [		sv1 := pinInfo at: 5.		" D7 pin "		sv2 := pinInfo at: 6.		" D8 pin "		self exclusiveControlDC:dc servo1:sv1 servo2:sv2.	].	" ---------------------------------- "	"	D2 or D4 Pin	"	" ---------------------------------- "	((aSet == (sv1 := pinInfo at: 3)) | (aSet == (sv2 := pinInfo at: 4))) ifTrue: [		dc := pinInfo at: 1.		" M1 pin "		self exclusiveControlServo: sv1 servo2: sv2 dcMotor: dc	].	" ---------------------------------- "	"	D7 or D8 Pin	"	" ---------------------------------- "	((aSet == (sv1 := pinInfo at: 5)) | (aSet == (sv2 := pinInfo at: 6))) ifTrue: [		dc := pinInfo at: 2.		" M2 pin "		self exclusiveControlServo: sv1 servo2: sv2 dcMotor: dc	].	" ---------------------------------- "	"	A0 Pin (Button side)	"	" ---------------------------------- "	(aSet == (ab := pinInfo at: 11)) ifTrue: [		as := pinInfo at: 15.		" A0(Sensor) pin "		self exclusiveSensor: ab sensor: as.	].	" ---------------------------------- "	"	A1 Pin (Button side)	"	" ---------------------------------- "	(aSet == (ab := pinInfo at: 12)) ifTrue: [		as := pinInfo at: 16.		" A1(Sensor) pin "		self exclusiveSensor: ab sensor: as.	].	" ---------------------------------- "	"	A2 Pin (Button side)	"	" ---------------------------------- "	(aSet == (ab := pinInfo at: 13)) ifTrue: [		as := pinInfo at: 17.		" A2(Sensor) pin "		self exclusiveSensor: ab sensor: as.	].	" ---------------------------------- "	"	A3 Pin (Button side)	"	" ---------------------------------- "	(aSet == (ab := pinInfo at: 14)) ifTrue: [		as := pinInfo at: 18.		" A3(Sensor) pin "		self exclusiveSensor: ab sensor: as.	].	" ---------------------------------- "	"	A0 or A1 Pin (Sensor)	"	" ---------------------------------- "	((aSet == (a0 := pinInfo at: SA0Index)) | (aSet == (a1 := pinInfo at: SA1Index))) ifTrue: [		a0CB := a0 findA: ToggleButton.	" A0 pin Toggle button "		a1CB := a1 findA: ToggleButton.	" A1 pin Toggle button "		a0CmbB := a0 findA: ChoiceArgMorph.		" A0 pin argment "		a1CmbB := a1 findA: ChoiceArgMorph.		" A1 pin argment "		((a0CB isOn) & (a1CB isOn)) ifTrue: [			" Added accelerometer menu "			a0CmbB options: (self sensorPartsNameA01OP: (a0CmbB choice)).			a1CmbB options: (self sensorPartsNameA01OP: (a1CmbB choice)).		] ifFalse: [			" normal menu "			" If I select Infrared receiver or Bluttooth, select Light sensor and set flag to false. "			setComb := aSet findA: ChoiceArgMorph.			(setComb choice = InfraredReceiverName) ifTrue: [				setComb choice: LightSensorName.				selectedIR := false. 			].			(setComb choice = BluetoothName) ifTrue: [ 				setComb choice: LightSensorName.				selectedBT := false.			].			a0CmbB options: (self sensorPartsNameA23OP: (a0CmbB choice)).			a1CmbB options:  (self sensorPartsNameA23OP: (a1CmbB choice)).		].		(aSet == (a0)) ifTrue: [			ab := pinInfo at: BA0Index." A0(Button) pin "			self exclusiveSensor: a0 sensor: ab.			self changeSelectorStatus: a0.		].		(aSet == (a1)) ifTrue: [			ab := pinInfo at: BA1Index." A0(Button) pin "			self exclusiveSensor: a1 sensor: ab.			self changeSelectorStatus: a1.		].	].	" ---------------------------------- "	"	A2 Pin (Sensor side)	"	" ---------------------------------- "	(aSet == (as := pinInfo at: SA2Index)) ifTrue: [		ab := pinInfo at: 13.		" A2(Button) pin "		self exclusiveSensor: as sensor: ab.		self changeSelectorStatus: as.		" add menu "		cmb := as findA: ChoiceArgMorph.		cmb options: self sensorPartsName0123.	].	" ---------------------------------- "	"	A3 Pin (Sensor side)	"	" ---------------------------------- "	(aSet == (as := pinInfo at: SA3Index)) ifTrue: [		ab := pinInfo at: 14.		" A3(Button) pin "		self exclusiveSensor: as sensor: ab.		self changeSelectorStatus: as.		" add menu "		cmb := as findA: ChoiceArgMorph.		cmb options: self sensorPartsName0123.	].	" ---------------------------------- "	"	A4 or A5 Pin (Sensor)	"	" ---------------------------------- "	((aSet == (a4 := pinInfo at: SA4Index)) | (aSet == (a5 := pinInfo at: SA5Index))) ifTrue: [		a4CB := a4 findA: ToggleButton.	" A4 pin Toggle button "		a5CB := a5 findA: ToggleButton.	" A5 pin Toggle button "		a4CmbB := a4 findA: ChoiceArgMorph.		" A4 pin argment "		a5CmbB := a5 findA: ChoiceArgMorph.		" A5 pin argment "		((a4CB isOn) & (a5CB isOn)) ifTrue: [			" Added accelerometer menu "			a4CmbB options: self sensorPartsName45.			a5CmbB options: self sensorPartsName45.		]		ifFalse: [			" normal menu "			a4CmbB options: self sensorPartsName0123.			a5CmbB options: self sensorPartsName0123.		].		(aSet == (a4)) ifTrue: [ self changeSelectorStatus: a4. ].		(aSet == (a5)) ifTrue: [ self changeSelectorStatus: a5. ].	].	" ---------------------------------- "	"	A6 Pin (Sensor side)	"	" ---------------------------------- "	(aSet == (as := pinInfo at: SA6Index)) ifTrue: [		self changeSelectorStatus: as.		" add menu "		cmb := as findA: ChoiceArgMorph.		cmb options: self sensorPartsName67.	].	" ---------------------------------- "	"	A7 Pin (Sensor side)	"	" ---------------------------------- "	(aSet == (as := pinInfo at: SA7Index)) ifTrue: [		self changeSelectorStatus: as.		cmb := as findA: ChoiceArgMorph.		cmb options: self sensorPartsName67.	].! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'KK 4/6/2018 17:05'!initialize	super initialize.	fillScreenFlag _ false.	paintingInProgress _ false.	projectInfo _ Dictionary new.	watcherPositions _ Dictionary new.	justSaved _ false.	author _ ''.	loginName _ ''.	loginPassword _ ''.	viewMode _ #normal.	self createBasicPanes.	self createLogo.	self createMenuPanel.	self createFontSizeButton.	self createViewModeButtonsPanel.	self createStageButtonsPanel.	self createToolbar.	self extent: 1000@600.	paBoardBasic _ PinAssignMorph new.	paBoardExtra _ PinAssignMorphUS new.	paBoard _ paBoardBasic.	libraryPane isHidden: true.	readoutPane isHidden: true.! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'KK 4/11/2018 14:00'!updatePanes	| p |	menuPanel ifNotNil: [ menuPanel delete ].	self createMenuPanel."----------	toolbarPanel delete.	self createToolbar.----------"	viewModeButtonsPanel delete.	self createViewModeButtonsPanel.	stageButtonsPanel delete.	self createStageButtonsPanel.	titlePane addMorph: stageButtonsPanel."----------	scriptsPane tabPane delete.	scriptsPane createTabPane.	readoutPane delete.	self createReadoutPane.----------"	workPane sensorBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ stageFrame position - ((workPane sensorBoard width)@0) + (-20@20)].	workPane sensorBoard addReadouts.	p ifNotNil:[		self showSensorBoard.		workPane sensorBoard position: p].	" Calibration Board "	workPane motorCalibrationBoard owner		ifNil: [p _ nil]		ifNotNil: [			p _ workPane motorCalibrationBoard position.			workPane motorCalibrationBoard saveCalibrationInfo.		].	workPane motorCalibrationBoard addReadouts.	p ifNotNil:[		workPane motorCalibrationBoard setCalibrationInfo.		self showCalibrationBoard.		workPane motorCalibrationBoard position: p.	].	" Pin Assign Board "	paBoard ifNotNil: [		paBoard savePinAssignInfo.		paBoard addReadouts.		paBoard returnPinAssignInfo.	].	libraryPane clearLibrary.	self scratchWatchers do: [:w | w languageChanged].	self listWatchers do: [:w | w fixLayoutForNewLanguage].	World startSteppingSubmorphsOf: self.	self fixLayout.	scriptsPane fixLayout.	self updateViewModeButtons.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/9/2018 16:47'!editMenu: t1 	| t2 |	t2 _ CustomMenu new.	t2 add: 'Undelete' action: #undoTool.	t2 addLine.	ScratchProcess blockHighlightMSecs <= 1		ifTrue: [t2 add: 'Start Single Stepping' action: #toggleSingleStepping]		ifFalse: [t2 add: 'Stop Single Stepping' action: #toggleSingleStepping].	t2 add: 'Set Single Stepping' action: #setSingleStepping.	t2 addLine.	t2 add: 'Export Arduino Language' action: #translateArduLang.	t2 addLine.	(DuringTest = true)	" During a test ? "	ifTrue: [ 	" yes -> hide "		t2 add: 'Port Settings' action: #setPinAssign.		"t2 add: 'Board selection' action: #selectBoardType." "Uncomment if Board selection is needed."		t2 addLine.		workPane showExtraBlocks			ifTrue: [t2 add: 'Hide Extra Blocks' action: #hideExtraBlocks]			ifFalse: [t2 add: 'Show Extra Blocks' action: #showExtraBlocks].		t2 localize.		#(3 4 5) do: [:t3 | t2 labels at: t3 put: ((t2 labels at: t3)					copyFrom: 1 to: (t2 labels at: t3) size - 1)					, ScratchTranslator ellipsesSuffix].	]	ifFalse: [	" no -> show "		t2 add: 'Motor Calibration' action: #calibrateMotor.		t2 add: 'Port Settings' action: #setPinAssign.		"t2 add: 'Board selection' action: #selectBoardType." "Uncomment if Board selection is needed."		t2 addLine.		workPane showExtraBlocks			ifTrue: [t2 add: 'Hide Extra Blocks' action: #hideExtraBlocks]			ifFalse: [t2 add: 'Show Extra Blocks' action: #showExtraBlocks].		t2 localize.		#(3 4 5 6) do: [:t3 | t2 labels at: t3 put: ((t2 labels at: t3)					copyFrom: 1 to: (t2 labels at: t3) size - 1)					, ScratchTranslator ellipsesSuffix].	].	t2 invokeOn: self at: t1 bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/11/2018 17:35'!fileMenu: aMenuTitleMorph	| menu |	menu _ CustomMenu new.	menu add: 'New' action: #newScratchProject.	menu add: 'Open' action: #openScratchProject.	menu add: 'Save' action: #saveScratchProjectNoDialog.	menu add: 'Save As' action: #saveScratchProject.	menu addLine.	menu add: 'Import Scripts' action: #importScripts.	menu add: 'Calibration Setting Options' action: #openStuduinoSettingMenu.	Sensor shiftPressed ifTrue: [  "developer menu"		menu addLine.		fillScreenFlag			ifTrue: [				menu add: 'Exit User Mode' action: #fillScreenOff]			ifFalse: [				menu add: 'Enter User Mode' action: #fillScreenOn.				menu add: 'Save Image in User Mode' action: #saveImageForEndUser]].	menu addLine.	menu add: 'Quit' action: #quitScratch.	menu localize.	"	#(2 4 5 6 7) do: [:n |"	#(2 4 5) do: [:n |		menu labels at: n put:			((menu labels at: n) copyFrom: 1 to: (menu labels at: n) size - 1), ScratchTranslator ellipsesSuffix].	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0@10).! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/9/2018 16:42'!hideExtraBlocks	workPane showExtraBlocks: false.	IOPort _ IOPort collect: [:each |		 (each = StdnoPIDUltrasonic) ifTrue: [			each _ StdnoPIDLightSensor .		] ifFalse: [			each _ each.		].	].	UltrasonicUsed _ false.	viewerPane refresh.	self setLanguage: (ScratchTranslator currentLanguage).! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 5/7/2018 13:22'!initStuduinoGlobalVars	""	| arrayID svSize index |	(BoardType = 0 or: [BoardType = 2]) ifTrue: [ " Studuino "Transcript show: 'Studuino selected.'.		arrayID := Array new: 18.		index _ 1.		#(1 1 0 0 0 0 2 2 2 0 21 21 21 21 0 0 0 0) do: [:each |			arrayID at: index put: each.			index _ index + 1.		].		svSize _ 8.]	ifFalse: [ "BoardType 1: Studuino mini"Transcript show: 'Studuino mini selected.'.		arrayID _ #(0 0 5 5 5 2 2 0 0 0 0 0 0 0 0 0 0 0 0).		svSize _ 5.].Transcript show: 'size: ', arrayID size asString; cr.	" Redefine IOPOrt basing on arrayID size."	IOPort _ arrayID.	self updateIOInfo.	SvCalib _ Array new: svSize.	SvCalib atAllPut: 0.	DCCalib _ Array new: 2.	DCCalib atAllPut: 255.	CalibInfoLocation = 1 ifTrue: [		self updateCalibInfo	] ifFalse: [		ScratchFrameMorph getCalibData: SvCalib swap: false.		ScratchFrameMorph getDCCalibData: DCCalib.	].	SvDegree _ Array new: svSize.	SvDegree atAllPut: 90.	SvDegreeTemp _ Array new: svSize.	SvDegreeTemp atAllPut: 90.	SvSentAlready _ Array new: svSize.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.	UltrasonicUsed _ false.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/11/2018 17:45'!openScratchProjectNamed: fName	"Open a Scratch project with the given name."	| f projData newProj dir fn |	self closeMediaEditorsAndDialogs ifFalse: [^ self].		fn _ fName.	f _ FileStream readOnlyFileNamedOrNil: fn. 	f ifNil: ["try a different encoding, fixes a Firefox bug, -Jens"		fn _ fName isoLatinToMac asUTF8.		f _ FileStream readOnlyFileNamedOrNil: fn.		f ifNil: [^ self inform: 'Could not read' withDetails: fName]].	[	projData _ f binary contentsOfEntireFile.		newProj _ self extractProjectFrom: projData.		projectInfo _ self extractInfoFrom: projData.	] ifError: [:err :rcvr |		err = 'unsupported0' ifTrue: [			^ self inform: 'Could not read project' withDetails: '(Project created by Studuino mini)'].		 ^ self inform: 'Could not read project; file may be damaged' withDetails: '(', err, ')'].	dir _ FileDirectory dirPathFor: fn.	projectDirectory _ FileDirectory on: dir.	ScratchFileChooserDialog setLastFolderTo: projectDirectory forType: #project.	projectName _ FileDirectory localNameFor: fn.	self installNewProject: newProj.	self initializeWatcherPositions.	viewerPane updateContents.	" updating I/O "	self updateIOInfo.	InfraredReceiverUsed _ -1.	UltrasonicUsed _ false.	1 to: (IOPort size) do: [ :index |		((IOPort at: index) = StdnoPIDUltrasonic) ifTrue: [ UltrasonicUsed _ true. ].		((IOPort at: index) = StdnoPIDInfraredRecv) ifTrue: [ InfraredReceiverUsed _ index. ].	].	" updating calibration info "	CalibInfoLocation = 1 ifTrue: [		(projectInfo includesKey: 'calibsv') ifTrue: [			SvCalib _ (projectInfo at: 'calibsv')].		(projectInfo includesKey: 'calibdc') ifTrue: [			DCCalib _ (projectInfo at: 'calibdc')].		(projectInfo includesKey: 'calibdcImm') ifTrue: [			DCCalib _ (projectInfo at: 'calibdcImm')].		self updateCalibInfo	] ifFalse: [		ScratchFrameMorph getCalibData: SvCalib swap: true.		ScratchFrameMorph getDCCalibData: DCCalib.	]! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/11/2018 17:28'!shiftToCalibrationMode	"Move onto calibration mode for Studuino."	| s line  dialogBox comPort msgID sb result calibData dcCalibData |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending1 ----------'; cr.		s sendCommand: 'TEST'.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						" Wait for program creation and updating to end  "		Transcript show: '---------- Recving2 ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show: comPort; show:', '; show: line; cr.	" Display message "		" Send message "		Transcript show: '---------- Sending3 ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board "		sb _ workPane motorCalibrationBoard.		sb portIsOpen ifTrue: [			Transcript show:'[ScratchFrameMorph::calibrationMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self calibrateMotor.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Connected Studuino. "			ServomotorSynchroMotion _ false.			sb data: 16r0100 msgID: 5.			" Get offset data (Sv and DC) from PC to temporary value "			calibData _ Array new: 8.			dcCalibData _ Array new: 2.			ScratchFrameMorph getCalibData: calibData swap: true.			ScratchFrameMorph getDCCalibData: dcCalibData.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1.					sb setCalibrationField: (elm-2) valid: true.				] ifTrue: [					calibData at: (elm-2) put: 0.					sb setCalibrationField: (elm-2) valid: false.				].			].			" Set DC motor status "			(((IOPort at: 1) = 0) | ((IOPort at: 2) = 0)) ifTrue: [				" Set Unusable "				sb initDCMotorCalibrationField: false.			] ifFalse: [				" Set Usable "				sb initDCMotorCalibrationField: true.			].			" Hide communication box "			dialogBox no.			" Set temporary value to CalibrationMorph  "			sb setDefaultValue: calibData.			sb setDCDefaultValue: dcCalibData.			" Set default position to the servomotor. "			sb setDefaultPosition.			" Invalidate menu "			ScratchMenuTitleMorph setMenuEnable: false.			self showCalibrationBoard.			sb initSyncProc.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'KK 4/5/2018 19:55'!showExtraBlocks	workPane showExtraBlocks: true.	viewerPane currentCategory: 'motion'.	viewerPane pageViewer vScrollRelative: 1.0.! !!ScratchFrameMorph methodsFor: 'startup' stamp: 'KK 4/10/2018 10:04'!processSettingsFile	"Process settings from the Scratch.ini file."	| lang settings k ratio |	self class setVisibleDrives: nil.	lang _ nil.	ratio _ 1.	self setCalibInfoLocation: 0.	ScratchFileChooserDialog clearFolderCache. "clear homeDir and last folder cache"	PathSettingArgMorph initDefaultPath.	settings _ self readSettingsFile.	settings associationsDo: [:assoc |		k _ assoc key.		k = 'exportlistpath' ifTrue: [PathSettingArgMorph setDefaultPath: assoc value.].		k = 'calibinfostore' ifTrue: [self setCalibInfoLocation: assoc value asNumber].		k = 'fontmagnification' ifTrue: [ratio _ assoc value asNumber].		"k = 'tabletmode' ifTrue: [self setTabletMode: (assoc value) ~= '0']."		k = 'language' ifTrue: [lang _ assoc value].		k = 'home' ifTrue: [ScratchFileChooserDialog setHomeDir: assoc value].		k = 'visibledrives' ifTrue: [self class setVisibleDrives: assoc value]].	lang ifNil: [lang _ ScratchTranslator guessLanguage].	self setLanguage: lang.	self fontMagnifyBy: ratio.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/11/2018 17:56'!installNewProject: newWorkpane	"Called after creating or reading a new project to clear the process scheduler, pick an object to view, clear the library thumbnails, and perform other housekeeping."	| viewTarget sb cb |	self stopAll.	SvCalib ifNil: [		SvCalib _ Array new:8. 		SvCalib atAllPut: 0.	].	DCCalib ifNil: [		DCCalib _ Array new:2. 		DCCalib atAllPut: 255.	].	IOPort ifNil: [ IOPort _ Array new:18. ].	SvDegree ifNil: [ SvDegree _ Array new:8. ].	SvDegreeTemp ifNil: [ SvDegreeTemp _ Array new:8. ].	SvSentAlready ifNil: [ SvSentAlready _ Array new:8. ].	SvDegree atAllPut: 90.	SvDegreeTemp atAllPut: 90.	SvSentAlready atAllPut: false.	ServomotorSynchroMotion _ false.	newWorkpane class = ScratchStageMorph		ifFalse: [^ self inform: 'Incompatible Scratch file format'].	"self exitScratchSession."	workPane scratchServer ifNotNil: [		workPane scratchServer clearCaches.		workPane scratchServer stage: newWorkpane.		newWorkpane scratchServer: workPane scratchServer].	newWorkpane isQuarterSize: workPane isQuarterSize.	newWorkpane bounds: workPane bounds.	newWorkpane midiPortNum: workPane midiPortNum.	workPane closeMIDI.	"use the same sensorboard for the new project"	sb _ workPane sensorBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: SensorBoardMorph) ifTrue: [			sb position: m position.			newWorkpane replaceSubmorph: m by: sb.			sb tryToOpenPort]].	newWorkpane sensorBoard: sb.	"use the same calibrationboard for the new project"	cb _ workPane motorCalibrationBoard.	newWorkpane submorphs do: [:m |		(m isKindOf: MotorCalibMorph2) ifTrue: [			cb position: m position.			newWorkpane replaceSubmorph: m by: cb.			cb tryToOpenPort]].	newWorkpane motorCalibrationBoard: cb.	workPane owner replaceSubmorph: workPane by: newWorkpane.	workPane _ newWorkpane.	self fixByteReversedSounds.	"fix sprite positions (backward compatability)"	workPane submorphs do: [:m |		(m isKindOf: WatcherMorph) ifTrue: [m convertFromOldWatcher].		(m respondsTo: #costume) ifTrue: [			m position: m position + m costume rotationCenter]. "fix up positions"		m layoutChanged].	workPane layoutChanged.	"reset timer"	ScriptableScratchMorph resetTimer.	"pick an object view, or view the background if there is no other"	viewTarget _ workPane.	workPane submorphs do: [:m |		(m respondsTo: #scripts) ifTrue: [			m scripts size >= viewTarget scripts size ifTrue: [viewTarget _ m]]].	viewTarget viewBlocksAndScripts.	"populate the sprites list if it is empty (backward compatability)"	workPane sprites isEmpty ifTrue: [		workPane submorphs do: [:m |			(m isKindOf: ScriptableScratchMorph) ifTrue: [workPane sprites addLast: m]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	(projectInfo at: 'isHosting' ifAbsent: [false]) ifTrue: [		self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false]) ifTrue: [		self showMotorBlocks].	(projectInfo includesKey: 'penTrails') ifTrue: [		workPane penTrailsForm: (projectInfo at: 'penTrails')].	(projectInfo at: 'hasExtraBlocks' ifAbsent: [false]) ifTrue: [		self showExtraBlocks].	Clipboard _ nil.	World cleanseStepList.  "make sure garbage collect can clean up the old sprites"	Smalltalk garbageCollect.  "get rid of old sprite instances"	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/10/2018 17:54'!saveScratchProject	| fName result r |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	fName _ ScratchFileChooserDialog saveScratchFileFor: self.	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self].	[(result _ ScratchFileChooserDialog confirmFileOverwriteIfExisting: fName) = false] whileTrue: [		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].		fName _ ScratchFileChooserDialog saveScratchFileFor: self.		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].		(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self]].	(result = #cancelled) ifTrue: [^ self].	self updateLastHistoryEntryIfNeeded.	fName _ (self nameFromFileName: fName), '.bpd'.	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: fName).	projectName _ FileDirectory localNameFor: fName.	projectInfo at: 'author' put: author.	" saving calibration info "	CalibInfoLocation = 1 ifTrue: [		projectInfo at: 'calibsv' put: SvCalib.		r _ Array new:2.		r at: 1 put: (((DCCalib at: 1) / 255.0) * 100.0) truncated.		r at: 2 put: (((DCCalib at: 2) / 255.0) * 100.0) truncated.		projectInfo at: 'calibdc' put: r.		projectInfo at: 'calibdcImm' put: DCCalib.	].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/10/2018 12:04'!saveScratchProjectNoDialog	| fName dir r |	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	self closeMediaEditorsAndDialogs ifFalse: [^ self].	projectName ifNil: [projectName _ ''].	fName _ self nameFromFileName: projectName.	dir _ ScratchFileChooserDialog getLastFolderForType: #project.	(fName size = 0 | (dir fileExists: fName , '.bpd') not) ifTrue: [^ self saveScratchProject].	ScratchFileChooserDialog lastFolderIsSampleProjectsFolder ifTrue:  [^ self saveScratchProject].	self updateLastHistoryEntryIfNeeded.	projectName _ FileDirectory localNameFor: (fName, '.bpd').  "ignore path, if any; save in the original project directory"	projectDirectory _ dir.	" saving calibration info "	CalibInfoLocation = 1 ifTrue: [		projectInfo at: 'calibsv' put: SvCalib.		r _ Array new:2.		r at: 1 put: (((DCCalib at: 1) / 255.0) * 100.0) truncated.		r at: 2 put: (((DCCalib at: 2) / 255.0) * 100.0) truncated.		projectInfo at: 'calibdc' put: r.		projectInfo at: 'calibdcImm' put: DCCalib].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/9/2018 10:20'!setIOPortFrom: fileStream put: flag	"Read I/O Port Information from .bpd file"	| i id newBoardType |	(self hasStandardIO: fileStream) ifTrue: [		newBoardType _ 0.		IOPort _ Array new: 18]	ifFalse: [		BoardType = 0 ifTrue: [			self error: 'unsupported0'.			^ nil].		newBoardType _ 1.		IOPort _ Array new: 19].	newBoardType = BoardType ifFalse: [		BoardType _ newBoardType.		self sendBoardTypeToBM].	i _ 1.	IOPort size timesRepeat: [		id _ fileStream next.		flag ifTrue: [			(id > 21 and: [((id = StdnoPIDTemperature) | (id = StdnoPIDGyro) | (id = StdnoPIDUltrasonic)) not]) ifTrue: [				id _ 0.				versionConflict _ true.			].			IOPort at: i put: id.		]		ifFalse: [			(id > 21 and: [((id = StdnoPIDTemperature) | (id = StdnoPIDGyro) | (id = StdnoPIDUltrasonic)) not]) ifTrue: [				versionConflict _ true.			].		].		i _ i + 1.	].	^ fileStream.! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'KK 4/6/2018 08:37'!updateHistoryProjectName: projName op: operation	"The given user is about to save or upload a project with the given name. Update the project history. operation is a string specifying the operation."	| timestamp tab history platform osVersion |	projectInfo removeKey: 'organization' ifAbsent: [].	"obsolete"	projectInfo at: 'scratch-version' put: Version.	timestamp _ (Date today printFormat: #(3 2 1 $- 1 1)), ' ', Time now print24.	tab _ String tab.	history _ projectInfo at: 'history' ifAbsent: [''].	history _ history, timestamp, tab.	history _ history, operation, tab, (self nameFromFileName: projName), tab, loginName, tab, author.	history _ history, String cr.	projectInfo at: 'history' put: history.	"record other data"	projectInfo at: 'scratch-version' put: Version.	projectInfo at: 'language' put: ScratchTranslator currentLanguage.	platform _ Smalltalk platformName.	platform ifNil: [platform _ 'unknown'].	'linux' = platform ifTrue: [		Display extent = (1200@900) ifTrue: [platform _ 'XO']].	projectInfo at: 'platform' put: platform.	osVersion _ Smalltalk osVersion.	osVersion ifNil: [osVersion _ 'unknown'].	projectInfo at: 'os-version' put: osVersion.	(workPane scratchServer notNil and:	 [workPane scratchServer isHosting])		ifTrue: [projectInfo at: 'isHosting' put: true]		ifFalse: [projectInfo removeKey: 'isHosting' ifAbsent: []].	(self allBlocksString includesSubString: 'motor')		ifTrue: [projectInfo at: 'hasMotorBlocks' put: true]		ifFalse: [projectInfo removeKey: 'hasMotorBlocks' ifAbsent: []].	(workPane showExtraBlocks)		ifTrue: [projectInfo at: 'hasExtraBlocks' put: true]		ifFalse: [projectInfo removeKey: 'hasExtraBlocks' ifAbsent: []].	workPane penTrailsForm		ifNil: [projectInfo removeKey: 'penTrails' ifAbsent: []]		ifNotNil: [projectInfo at: 'penTrails' put: workPane penTrailsForm].	projectInfo at: 'boardType' put: BoardType.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/11/2018 10:03'!setPinAssign	| pab index resp |	" Set pin assing. "	workPane showExtraBlocks		ifTrue: [			paBoard := paBoardExtra.		] ifFalse: [			paBoard := paBoardBasic.		].	paBoard addReadouts.	pab _ paBoard.	pab setFrameMorph: self.	pab setAllOff.	" set all checkbox off "	pab position: (self extent - pab extent) / 2.	"	self world addMorph: pab."	" Set check box "	index := 1.	IOPort		do: [ :parts | 			pab setCheckBoxOn: index partsID: parts.			index := index + 1 ].		index := 1.	IOPort		do: [ :parts | 			pab setComboBox: index partsID: parts.			index := index + 1 ].	" Waiting for the response. "	ScratchMenuTitleMorph setMenuEnable: false.	resp := pab getUserResponse.	resp		ifTrue: [ 			self viewerPane refresh.			self refreshWorkPane.			DuringTest ifTrue: [				self testModeOff.			].	 ].	ScratchMenuTitleMorph setMenuEnable: true.	paBoard _ nil.	self updateIOInfo.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/6/2018 12:16'!shiftToTestMode	"Move onto test mode for Studuino."	| s dialogBox line sb mid ival comPort msgID result partsID type |	(BoardStatus = 1) ifFalse: [		s _ self createBMHandle.		s ifNil: [^ self].		"---------- Success in connection ----------"		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'TEST'.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"						" Wait for program creation and updating to end  "		Transcript show: '---------- Recving ----------'; cr.		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		comPort _ line sansSemicolonSuffix.		COMPort _ comPort.	" set class value "		line _ self waitForBMResponse: s.		(line = '-1') ifTrue: [			dialogBox ifNotNil: [dialogBox no].			^ self].		msgID _ line sansSemicolonSuffix.		" Hide Status DialogBox "Transcript show:comPort; show:', '; show:line;cr.	" Display message "		" Send message "		Transcript show: '---------- Sending ----------'; cr.		s sendCommand: 'BREAK'.		s disconnect.		s destroy.		BoardStatus _ 1.	] " End communication with Boardmanager."	ifTrue: [		comPort _ COMPort.		" Display Status DialogBox "		dialogBox _ NotificationMessage show: 16r11.	"Shifting to testmode"	].	(comPort = 'ERR') ifFalse: [	" Success to Transfer "		"Check if the port is available."		(self isPortAvailable: comPort) ifFalse: [			COMPort _ nil.			BoardStatus _ 0.			" Hide communication box "			dialogBox no.			self testMode.			^ self		].		" Connect with Arduino board ""sc _ workPane servoCalibrationBoard."		sb _ workPane sensorBoard.		sb portIsOpen ifTrue: [Transcript show:'[ScratchFrameMorph::testMode] close & open port';cr.			sb closePort.		].		sb selectPort: comPort.		" Wait for run arduino board "			result _ sb isBoardSetup.		result ifFalse: [			" Hide communication box "			dialogBox no.			sb closePort.			BoardStatus _ 0.			self testMode.		]		ifTrue: [			"  Set sensorboard items "			sb addReadouts.			" Send port configuration "			mid _ 5.			0 to: 7 do: [: index |				partsID _ IOPort at: (11 + index).				((partsID = 17) | (partsID = 21)) ifTrue: [					type _ 0]. "Digital"				((partsID = 16) | (partsID = 18) | (partsID = 19)) ifTrue: [					type _ 1]. "Analog"				(partsID = 20) ifTrue: [					type _ 2]. "Accelerometer"				(partsID = 24) ifTrue: [					type _ 3]. "Temperature"				(partsID = 25) ifTrue: [					type _ 4]. "Gyro"				(partsID = StdnoPIDUltrasonic) ifTrue: [					UltrasonicUsed _ true.					type _ 5]. "Ultrasonic"				(partsID > 15) & (partsID < 27) ifTrue: [					ival _ 16r0100 + (type bitShift: 4) + index.					sb data:ival msgID:mid.					Transcript show: ival; cr]].			" Set A0 as digital input for dummy if no sensor is selected.			  It's necessary for preventing from the disconnection. "			(IOPort select: [:each | (each > 15) & (each < 25)]) size = 0				ifTrue: [ sb data: 16r0100 msgID: 5 ].			" Set Servomotors' degree connected Studuino. "			1 to: (SvDegree size) do: [ : i |				SvDegree at: i put: 90.				SvDegreeTemp at:i put:90.			].			ServomotorSynchroMotion _ false.			" Set servomotors 90 deg. with offsets. "			(3 to: 10) do: [:elm |				((IOPort at: elm) = 0) ifFalse: [					sb data: (DataCreation getServoWithOffsetFor: (elm - 3) degree: 90) msgID: 1]].			" Hide communication box "			dialogBox no.			self showSensorBoard.			sb initSyncProc.			DuringTest _ true.		]	]	ifTrue: [		" Hide communication box "		dialogBox no.		BoardStatus _ 0.		ErrorMessage show: msgID asNumber.	].! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/10/2018 11:02'!updateCalibInfo	" Updating calibration files with the latest info. [Variables -> Files] "	| filename f |	"---------------------------------------------------------"	" Get Servomotor Info "	"---------------------------------------------------------"	filename _ '..\common\sv_offset_ini'.	f _ StandardFileStream fileNamed: filename.	f binary.	SvCalib do: [:elm |		(elm < 0) ifTrue: [			f nextPut: elm + 256]		ifFalse: [			f nextPut: elm]].	f close.	"---------------------------------------------------------"	" Get DC motor Info "	"---------------------------------------------------------"	filename _ '..\common\dc_calib_ini_imm'.	f _ StandardFileStream fileNamed: filename.	f binary.	DCCalib do: [:elm |		elm <= 100 ifTrue: [			f nextPut: ((elm / 100.0) * 255) truncated.		] ifFalse: [			f nextPut: elm]	].	f close.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'KK 4/9/2018 09:59'!updateProjectName	"Update the project name display in the Scratch title bar."	| s |	projectName ifNil: [projectName _ ''].	projectTitleMorph contents: (self nameFromFileName: projectName).	projectTitleMorph contents size > 0		ifTrue: [s _ projectTitleMorph contents, '- Studuino BLOCK Programming Environment']		ifFalse: [s _ 'Studuino BLOCK Programming Environment'", Version"].	ScratchPlugin primSetWindowTitle: s.	self fixLayout.! !!ScratchFrameMorph class methodsFor: 'utilities' stamp: 'KK 4/10/2018 11:42'!getDCCalibData: buf2Array 	| filename f dir |	"Set my language and update my blocks."	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini_imm'.	] ifFalse: [	" for Unix / Mac "		dir _ FileDirectory default.	" Get target directory "		filename := dir pathName, '/../common/dc_calib_ini_imm'.	].	f _ FileStream fileNamed: filename.	f binary.	" If file is not exist, intialize 100 and create file. "	f size = 0 ifTrue: [		buf2Array at:1 put:255.		buf2Array at:2 put:255.		f nextPut: 255.		f nextPut: 255.	] ifFalse: [		buf2Array at:1 put:(f next).		buf2Array at:2 put:(f next).	].	f close.! !!ScriptableScratchMorph methodsFor: 'sensing ops' stamp: 'KK 4/5/2018 13:30'!ultrasonicSensor	"Answer the value of the given sensor, or zero if the sensorboard is not available."	^ self sensor: 'A0'.! !!ScriptableScratchMorph methodsFor: 'motor ops' stamp: 'KK 4/18/2018 11:50'!motorNo: n degree: d	"Set degree the servo motor selected"	| stage sb mid ival pin offset index svPort |	" Check argument. "	n = '' ifTrue: [^0].	(stage := self ownerThatIsA: ScratchStageMorph) ifNil: [^0].	sb _ stage sensorBoard.	offset _ 0.	mid _ 1.		" 1 : Servo Motor ID"	index _ 1.	(BoardType = 0 or: [BoardType = 2]) ifTrue: [		(n = 'D2') ifTrue: [			pin _ 16r0000.			"b0000 0000 0000 0000"			offset _ SvCalib at: 5.	" Servomotor offset"			index _ 1.		].		(n = 'D4') ifTrue: [			pin _ 16r0200.			"b0000 0010 0000 0000"			offset _ SvCalib at: 6.	" Servomotor offset"			index _ 2.		].		(n = 'D7') ifTrue: [			pin _ 16r0400.			"b0000 0100 0000 0000"			offset _ SvCalib at: 7.	" Servomotor offset"			index _ 3.		].		(n = 'D8') ifTrue: [			pin _ 16r0600.			"b0000 0110 0000 0000"			offset _ SvCalib at: 8.	" Servomotor offset"			index _ 4.		].		(n = 'D9') ifTrue: [			pin _ 16r0800.			"b0000 1000 0000 0000"			offset _ SvCalib at: 1.	" Servomotor offset"			index _ 5.			(SvSentAlready at: index) ifTrue: [			] ifFalse: [				SvSentAlready at: index put: true.			].		].		(n = 'D10') ifTrue: [			pin _ 16r0A00.			"b0000 1010 0000 0000"			offset _ SvCalib at: 2.	" Servomotor offset"			index _ 6.		].		(n = 'D11') ifTrue: [			pin _ 16r0C00.			"b0000 1100 0000 0000"			offset _ SvCalib at: 3.	" Servomotor offset"			index _ 7.		].		(n = 'D12') ifTrue: [			pin _ 16r0E00.			"b0000 1110 0000 0000"			offset _ SvCalib at: 4.	" Servomotor offset"			index _ 8.		].		ival _ d asNumber.		ival _ ival + offset.	" Calibration "		(ival >= 180)  ifTrue: [ ival _ 180. ].		(ival <= 0)	 ifTrue: [ ival _ 0.   ].		ServomotorSynchroMotion ifTrue: [ SvDegreeTemp at: index put: ival. ]		ifFalse: [			SvDegreeTemp at: index put: ival. 			SvDegree at: index put: ival.		].		ival _ pin + ival rounded.	]	ifFalse: [		svPort _ #(D5 D6 D9 D10 D11).		index _ svPort asOrderedCollection find: n.		ival _ ((index - 1) bitShift: 9) + d.].	^sb data: ival msgID: mid.! !!ScriptableScratchMorph methodsFor: 'motor ops' stamp: 'KK 4/18/2018 11:48'!motorNo: n power: p"Set Power the DC motor selected"	| stage sb mid ival tmp ratio |	"Check argument."	n = '' ifTrue: [^0].	(stage := self ownerThatIsA: ScratchStageMorph) ifNil: [^0].	sb _ stage sensorBoard.	mid _ 0.		" 0: DC Motor ID "	(n = 'M1') ifTrue: [		ratio _ (DCCalib at: 1) / 255.0.		tmp _ 16r0400.		"b0000 0100 0000 0000"	].	(n = 'M2') ifTrue: [		ratio _ (DCCalib at: 2) / 255.0.		tmp _ 16r0C00.		"b0000 1100 0000 0000"	].	ival _ (p asNumber) * ratio.	(ival >= 100)  ifTrue: [ ival _ 100. ].	(ival <= 0)	 ifTrue: [ ival _ 0.   ].	ival _ tmp + (ival rounded).				"b0000 n100 + val "	^sb data:ival msgID:mid.! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 19:32'!blockFromSpec: spec color: blockColor	"Create a block from the given block specification. Answer nil if I don't implement the block spec selector."	| blockLabelSpec blockType selector defaultArgs block rcvr argPermutation dispBlockColor isDetect offset partsID invalidR invalidG invalidB gray |	invalidR _ 0.6.	invalidG _ 0.6.	invalidB _ 0.6.	gray _ (Color r: invalidR g: invalidG b: invalidB).	blockLabelSpec _ ScratchTranslator translationFor: (spec at: 1).	argPermutation _ CommandBlockMorph argPermutationForSpec: (spec at: 1) withTranslation: blockLabelSpec.	blockType _ spec at: 2.	selector _ (spec at: 3) asSymbol.	defaultArgs _ self defaultArgsFor: spec.	dispBlockColor _ blockColor.	((defaultArgs size ~= 0) & (#doBroadcastAndWait ~= selector)) ifTrue: [		((defaultArgs at: 1) = '') ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).		]	].	(BoardType = 1) ifTrue: [	" Clock's validity check. "	((IOPort at: 19) ~= 6) ifTrue: [		(#hour:min: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#month:day:year: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#alhour:almin: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#red:green:blue: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBackLight: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBuzzerOnFreq:For:elapsed:from: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clkBuzzerOff = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#clockValue: = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].		(#isInAlarm = selector) ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).].].].	" Color LED is used ? "	(#ledColor:onOff: = selector) ifTrue: [		isDetect _ false.			" detect buzzer? "		offset _ 10.				" 1-2:DC 3-10:SV 11-18:Sensor "		partsID _ 16r05.			" 01:DC 02:SV 03:LED 04:BZR 05:CLED 10:LS 11:TS 12:SS 13:IRS 14:3S 15:BTN"		1 to: 4 do: [ :index |			(((IOPort at: (index+offset)) = partsID) & (isDetect = false)) ifTrue: [				isDetect _ true.			]		].		isDetect = false ifTrue: [			dispBlockColor _ (Color r: invalidR g: invalidG b: invalidB).		].	].	(selector = 'ultrasonicSensor') 	ifTrue: [ (BlockMorph isValidBlock: StdnoPIDUltrasonic) ifFalse: [ dispBlockColor _ gray. ]].	(#(E K M S W) includes: blockType) ifTrue: [		^ (self hatBlockType: blockType) color: blockColor].	"basic block type: normal or C-shaped"	(blockType includes: $c)		ifTrue:	[			selector = #doIfElse				ifTrue: [block _ IfElseBlockMorph new isSpecialForm: true]				ifFalse: [block _ CBlockMorph new isSpecialForm: true]]		ifFalse:	[			(blockType includes: $r) | (blockType includes: $b)				ifTrue: [block _ ReporterBlockMorph new]				ifFalse: [block _ CommandBlockMorph new]].	(blockType includes: $b) ifTrue: [block isBoolean: true].	(blockType includes: $s) ifTrue: [block isSpecialForm: true].	(blockType includes: $t) ifTrue: [block isTimed: true].	(ScriptableScratchMorph isSpriteSpecificTarget: self selector: selector)		ifTrue: [rcvr _ self]		ifFalse: [rcvr _ self ownerThatIsA: ScratchStageMorph].	^ block		argPermutation: argPermutation;"		color: blockColor;"		color: dispBlockColor;		selector: selector;		commandSpec: blockLabelSpec;		defaultArgs: defaultArgs;		receiver: rcvr! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 20:12'!viewerPageForMotion	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin isStage addMotorBlocks s x y addExtraBlocks |	bin _ ScratchBlockPaletteMorph new.	(self isKindOf: ScratchStageMorph)		ifTrue: [			isStage _ true.			addMotorBlocks _ self showMotorBlocks.			addExtraBlocks _ self showExtraBlocks]		ifFalse: [			isStage _ false.			s _ self ownerThatIsA: ScratchStageMorph.			addMotorBlocks _ s notNil and: [s showMotorBlocks].			addExtraBlocks _ s notNil and: [s showExtraBlocks]].	addMotorBlocks _ true.	(isStage & addMotorBlocks not) ifTrue: [ ^ bin ]."		font _ (ScratchFrameMorph getFont: #ViewerPage).		x _ 20.		y _ 12.		m _ StringMorph contents: 'Stage selected:' localized font: font.		bin addMorph: (m color: Color white; position: x@y).		m _ StringMorph contents: 'No motion blocks' localized font: font.		bin addMorph: (m color: Color white; position: x@(y + 17)).		^ bin]."	x _ 12.	y _ 10.	(self blocksFor: 'motion') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"				(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	addMotorBlocks ifFalse: [^ bin].	isStage ifFalse: [		y _ y + 7.		bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).		y _ y + 20].	(self blocksFor: 'motor') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"				(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	addExtraBlocks ifTrue: [		(self blocksFor: 'studuinoextra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].		(self blocksFor: 'studuino control extra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	" Only for Studuino mini "	(BoardType = 1) ifTrue: [		(self blocksFor: 'motion mini') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [y _ y + 5]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].].	^ bin! !!ScriptableScratchMorph methodsFor: 'blocks' stamp: 'KK 4/5/2018 20:31'!viewerPageForSensing	"Answer a morph containing mtion blocks for the given category for use in the given ScratchViewer."	| bin x y addExtraBlocks |	bin _ ScratchBlockPaletteMorph new.	addExtraBlocks _ self showExtraBlocks.	x _ 12.	y _ 10.	(self blocksFor: 'sensing') do: [:blockOrSym |		(blockOrSym = #-) | (blockOrSym = #~)			ifTrue: [				(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"				(blockOrSym = #~) ifTrue: [					y _ y + 7.					bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).					y _ y + 20]]			ifFalse: [				y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	" Only for Extra blocks "	addExtraBlocks ifTrue: [		(self blocksFor: 'sensing extra') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue: [y _ y + 15].  "insert a full space"					(blockOrSym = #~) ifTrue: [						y _ y + 7.						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 20]]  "insert a half space"				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].	].	" Only for Studuino mini "	(BoardType = 1) ifTrue: [		(self blocksFor: 'sensing mini') do: [:blockOrSym |			(blockOrSym = #-) | (blockOrSym = #~)				ifTrue: [					(blockOrSym = #-) ifTrue:[y _ y + 15]. "insert a full space"					(blockOrSym = #~) ifTrue: [						y _ y + 7.						bin addMorph: ((ImageMorph new form: (ScratchFrameMorph skinAt: #connector)) position: x@y).						y _ y + 20]]				ifFalse: [					y _ self createBlock: blockOrSym atPosition: x@y onPage: bin]].].	^ bin! !!ScriptableScratchMorph methodsFor: 'private' stamp: 'KK 4/28/2018 14:05'!printArduLangOn: aStream 	| stacks hats evtName index partsName portName offset initCode isI2CFirst isUsFirst |	stacks _ blocksBin submorphs select: [:m | m isKindOf: BlockMorph].	stacks size = 0 ifTrue: [		^ self].	hats _ stacks select: [:m | m isKindOf: HatBlockMorph].	" Include file declaration "	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: '// Servomotor calibration data'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: 'char SvCalibrationData[] = { '.	(BoardType = 0 or: [BoardType = 2]) ifTrue: [		5 to: 8 do: [:i|			offset _ SvCalib at:(i).			aStream nextPutAll: offset asString, ', '].		1 to: 4 do: [:i|			offset _ SvCalib at:(i).			aStream nextPutAll: offset asString, ', ']]	ifFalse: [ " Studuino mini "		SvCalib do: [:elm |			offset _ elm.			aStream nextPutAll: offset asString, ', '.]	].	aStream nextPutAll: ' };'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: '// DC motor calibration data'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: 'byte DCCalibrationData[] = { '.	offset _ (((DCCalib at: 1) / 255.0) * 100.0) truncated.	aStream nextPutAll: offset asString, ', '.	offset _ (((DCCalib at: 2) / 255.0) * 100.0) truncated.	aStream nextPutAll: offset asString.	aStream nextPutAll: ' };'; cr.	" Prototype declaration "	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: '// prototype declaration'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	hats do: [:item |		evtName _ item eventName.		evtName = 'Scratch-StartClicked'			ifTrue: [aStream nextPutAll: 'void artecRobotMain();']			ifFalse: [aStream nextPutAll: 'void ARSR_', evtName, '();'].		aStream cr.	].	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: '// Global variable'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	"Define value"	self varNames do: [:v |		aStream nextPutAll: 'float ARVAL_' , v, ';'.		aStream cr.	].	"Define list"	self listVarNames do: [:v |		aStream nextPutAll: 'cell ARLIST_' , v, ';'.		aStream cr.	].	aStream nextPutAll: 'byte port[8];';cr.	aStream nextPutAll: 'byte degree[8];';cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: '// Artec robot setup routine'; cr.	aStream nextPutAll: '// ---------------------------------------'; cr.	aStream nextPutAll: 'void artecRobotSetup() {'; cr.	aStream nextPutAll: '    board.SetServomotorCalibration(SvCalibrationData);'; cr.	aStream nextPutAll: '    board.SetDCMotorCalibration(DCCalibrationData);'; cr.	"For Studuino mini clock initialization."	(BoardType == 1) ifTrue: [		((IOPort at: 19) = 6) ifTrue: [ "Clock is enabled."			aStream nextPutAll: '    board.InitClock();'; cr.].].	isUsFirst _ true.	" Ultrasonic sensor has not set yet. "	isI2CFirst _ true.	" I2C has not set yet. "	index _ 0.	IOPort do: [ :partsID |		(partsID ~= 0) ifTrue: [			(index = 0) ifTrue: [				aStream nextPutAll: '    board.InitDCMotorPort(PORT_M1);'; cr."Transcript show: 'initDCMotor('; show:index; show: ');'; cr."			].			(index = 1) ifTrue: [				aStream nextPutAll: '    board.InitDCMotorPort(PORT_M2);'; cr."Transcript show: 'initDCMotor('; show:index; show: ');'; cr."			].	" Board selection "	(BoardType = 0 or: [BoardType = 2]) ifTrue: [	" For Studuino "			(index = 2) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D2);'; cr.			].			(index = 3) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D4);'; cr.			].			(index = 4) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D7);'; cr.			].			(index = 5) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D8);'; cr.			].			(index = 6) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D9);'; cr.			].			(index = 7) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D10);'; cr.			].			(index = 8) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D11);'; cr.			].			(index = 9) ifTrue: [				aStream nextPutAll: '    board.InitServomotorPort(PORT_D12);'; cr.			].]	ifFalse: [	" For Studuino mini "		((index > 1) & (index < 10)) ifTrue: [			(partsID = 2) ifTrue: [				initCode _ '    board.InitServomotorPort(']			ifFalse: [				initCode _ '    board.InitDigitalPort('].			(index = 2) ifTrue: [				initCode _ initCode, 'PORT_D5'.].			(index = 3) ifTrue: [				initCode _ initCode, 'PORT_D6'.].			(index = 4) ifTrue: [				initCode _ initCode, 'PORT_D9'.].			(index = 5) ifTrue: [				initCode _ initCode, 'PORT_D10'.].			(index = 6) ifTrue: [				initCode _ initCode, 'PORT_D11'.].			(partsID = 5) ifTrue: [				initCode _ initCode, ', PIDLED'.].			aStream nextPutAll: initCode, ');'; cr.].]."			((index > 1) & (index < 10)) ifTrue: [				aStream nextPutAll: '    initSVMotor('.				aStream nextPutAll: (index-2) asString.				aStream nextPutAll: ');'; cr.			]."			(index > 9) & (index < 18) ifTrue: [				(partsID = 16r03) ifTrue: [ partsName _ 'PIDLED' ].				(partsID = 16r04) ifTrue: [ partsName _ 'PIDBUZZER' ].				(partsID = 16r05) ifTrue: [ partsName _ 'PIDCOLORLED' ].				(partsID = 16r10) ifTrue: [ partsName _ 'PIDLIGHTSENSOR' ].				(partsID = 16r11) ifTrue: [ partsName _ 'PIDTOUCHSENSOR' ].				(partsID = 16r12) ifTrue: [ partsName _ 'PIDSOUNDSENSOR' ].				(partsID = 16r13) ifTrue: [ partsName _ 'PIDIRPHOTOREFLECTOR' ].				(partsID = 16r14) ifTrue: [ partsName _ 'PIDACCELEROMETER' ].				(partsID = 16r15) ifTrue: [ partsName _ 'PIDPUSHSWITCH' ].				(partsID = 16r18) ifTrue: [ partsName _ 'PIDTEMPERATURESENSOR' ].				" New sensor parts "				(partsID = StdnoPIDUltrasonic) ifTrue: [ partsName _ 'PIDULTRASONICSENSOR' ].				(partsID = StdnoPIDInfraredRecv) ifTrue: [ partsName _ 'PIDIRRECEIVER' ].				(partsID = StdnoPIDBluetooth) ifTrue: [ partsName _ 'PIDTEMPERATURESENSOR' ].				(partsID = StdnoPIDGyro) ifTrue: [ partsName _ 'PIDGYROSCOPE' ].				(partsID = StdnoPIDColor) ifTrue: [ partsName _ 'PIDCOLORSENSOR' ].				(index = 10) ifTrue: [ portName _ 'PORT_A0' ].				(index = 11) ifTrue: [ portName _ 'PORT_A1' ].				(index = 12) ifTrue: [ portName _ 'PORT_A2' ].				(index = 13) ifTrue: [ portName _ 'PORT_A3' ].				(index = 14) ifTrue: [ portName _ 'PORT_A4' ].				(index = 15) ifTrue: [ portName _ 'PORT_A5' ].				(index = 16) ifTrue: [ portName _ 'PORT_A6' ].				(index = 17) ifTrue: [ portName _ 'PORT_A7' ].				" Connect Infrared Receiver. "				(partsID = StdnoPIDInfraredRecv) ifTrue: [					aStream nextPutAll: '    IRRemoteUsed = true;';cr.				].				" Connect Ultrasonic sensro to A0/A1 port. "				(partsID = StdnoPIDUltrasonic) ifTrue: [					isUsFirst ifTrue: [						aStream nextPutAll: '    board.InitSensorPort(PORT_A0, PORT_A1, '.						aStream nextPutAll: partsName.						aStream nextPutAll: ');'; cr.						isUsFirst _ false.					].				] ifFalse: [					" I2C devices "					(partsID = StdnoPIDAcceleration) |					(partsID = StdnoPIDGyro) |					(partsID = StdnoPIDColor) ifTrue: [						isI2CFirst ifTrue: [							aStream nextPutAll: '    board.InitI2CPort('.							aStream nextPutAll: partsName.							aStream nextPutAll: ');'; cr.							isI2CFirst _ false.						].					] ifFalse: [						" Bluetooth "						(partsID = StdnoPIDBluetooth) ifTrue: [							aStream nextPutAll: '    board.InitBluetooth();';cr.						] ifFalse: [							" Other parts "							aStream nextPutAll: '    board.InitSensorPort('.							aStream nextPutAll: portName.							aStream nextPutAll: ', '.							aStream nextPutAll: partsName.							aStream nextPutAll: ');'; cr.						].					].				].			].		].		index _ index + 1.	 ].	aStream nextPutAll: '}'; cr.	NumberOfdoRepeat _ 0.	hats do: [:item |		item printArduCodeOn: aStream indent: 0.		(item isKindOf: ReporterBlockMorph) ifTrue: [aStream cr].		aStream cr].! !!ScratchStageMorph methodsFor: 'initialization' stamp: 'KK 4/5/2018 20:18'!initialize	|  |	super initialize.	color _ Color white.	self enableDragNDrop: true.	objName _ 'Stage' localized.	costume _ self defaultImageMedia.	media _ OrderedCollection with: costume with: SoundMedia new.	zoom _ 1.0.	hPan _ 0.	vPan _ 0.	runningBlocks _ OrderedCollection new.	inProcessStep _ false.	sensorBoard _ SensorBoardMorph new.	motorCalibBoard _ MotorCalibMorph2 new.	midiPortNum _ -1.	notePlayerDict _ Dictionary new.	obsoleteSavedState _ nil.	sprites _ OrderedCollection new.	showExtraBlocks _ false.	showMotorBlocks _ false.	servoCalibrationBoard _ SensorBoardMorph new.! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'KK 4/5/2018 20:26'!showExtraBlocks	^ showExtraBlocks! !!ScratchStageMorph methodsFor: 'accessing' stamp: 'KK 4/5/2018 19:55'!showExtraBlocks: aBoolean	showExtraBlocks _ aBoolean.! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'KK 4/5/2018 13:24'!blockColorFor: aCategory	"Answer the block color for the given category."	'control' = aCategory ifTrue: [^ (Color h: 41 s: 0.85 v: 0.9)].	'motion' = aCategory ifTrue: [^ (Color h: 225 s: 0.65 v: 0.83)].	'motor' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'studuinoextra' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'motion mini' = aCategory ifTrue: [^ (Color h: 220 s: 0.85 v: 0.725)].	'looks' = aCategory ifTrue: [^ (Color h: 264 s: 0.62 v: 0.89)].	'pen' = aCategory ifTrue: [^ (Color h: 165 s: 1 v: 0.63)].	'operators' = aCategory ifTrue: [^ (Color h: 93 s: 0.9 v: 0.76)].	'sound' = aCategory ifTrue: [^ (Color h: 296 s: 0.66 v: 0.85)].	'sensing' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'sensing extra' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'sensing mini' = aCategory ifTrue: [^ (Color h: 200 s: 0.98 v: 0.86)].	'variables' = aCategory ifTrue: [^ (Color h: 25 s: 0.88 v: 0.95)].	'list' = aCategory ifTrue: [^ ListBlockColor].	'notSensing' = aCategory ifTrue: [^ (Color h: 0 s: 0 v: 0.5)].	'compatible' = aCategory ifTrue: [^ (Color h: 28 s: 0.61 v: 0.96)].	^ (Color h: 0 s: 0.81 v: 0.83)  "a shade of red"! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'KK 4/5/2018 13:20'!blockSpecs	"Answer a collection of block specifications for the blocks that are common to all objects. Block specificatons (Arrays) are interspersed with category names (Strings). A block specification is an Array of the form: (<block spec string> <block type> <selector> [optional initial argument values]).	Explanation of flags:		-	no flags		b	boolean reporter		c	c-shaped block containing a sequence of commands (always special form)		r	reporter		s	special form command with its own evaluation rule		t	timed command, like wait or glide		E	message event hat		K	key event hat		M	mouse-click event hat		S	start event hat		W	when <condition> hat (obsolete)"	| blocks |	blocks _ #(		'control'			('%e function'			E	-)			('call %e function'			s	doBroadcastAndWait)			-			('wait %n secs'					t	wait:elapsed:from: 1)			-			('forever'						c	doForever)			('repeat %n'						c	doRepeat 10)			-"			('broadcast %e'					-	broadcast:)"			('forever if %b'					c	doForeverIf)			('if %b'							c	doIf)			('if %b'							c	doIfElse)			('wait until %b'					s	doWaitUntil)			('repeat until %b'				c	doUntil)"			-			('stop script'					s	doReturn)			('stop all'						-	stopAll)"			('Servomotor synchro motion speed:%E'						c	doSvmSyncMotion2 10)		'compatible'			('Servomotor synchro motion delay:%E'						c	doSvmSyncMotion 10)		'operators'			('%n + %n'						r	+ - -)			('%n - %n'						r	- - -)			('%n * %n'						r	* - -)			('%n / %n'						r	/ - -)			-			('pick random %n to %n'		r	randomFrom:to: 1 10)			-			('%n < %n'						b	< - -)			('%n = %n'						b	= - -)			('%n > %n'						b	> - -)			-			('%b and %b'					b	&)			('%b or %b'						b	|)			('not %b'						b	not)"			-			('join %s %s'					r	concatenate:with: 'hello ' 'world')			('letter %n of %s'				r	letter:of: 1 'world')			('length of %s'					r	stringLength: 'world')"			-			('%n mod %n'					r	\\ - -)			('round %n'						r	rounded -)			-			('%f of %n'						r	computeFunction:of: 'sqrt' 10)		'sound'"			('play sound %S'				-	playSound:)			('play sound %S until done'		s	doPlaySoundAndWait)			('stop all sounds'				-	stopAllSounds)			-			('play drum %D for %n beats'	t 	drum:duration:elapsed:from: 48 0.2)			('rest for %n beats'				t 	rest:elapsed:from: 0.2)			-			('play note %N for %n beats'	t	noteOn:duration:elapsed:from: 60 0.5)			('set instrument to %I'			- 	midiInstrument: 1)			-			('change volume by %n'		- 	changeVolumeBy: -10)			('set volume to %n%'			- 	setVolumeTo: 100)			('volume'						r 	volume)			-			('change tempo by %n'			- 	changeTempoBy: 20)			('set tempo to %n bpm'			- 	setTempoTo: 60)			('tempo'							r 	tempo)"		'motor'"			('motor on for %n secs'			t	motorOnFor:elapsed:from: 1)			('motor on'						-	allMotorsOn)			('motor off'						-	allMotorsOff)			('motor power %n'				-	startMotorPower: 100)			('motor direction %W'			-	setMotorDirection: 'this way')"			('Set servomotor %J to %F degrees'			-	motorNo:degree: 'PIN' 90)			('DC motor %j power %n'		-	motorNo:power: 'PIN' 100)			('DC motor %j on at %t'		-	motorNo:dcMotorOn: 'PIN' 'cw.')			('DC motor %j off %T'		-	motorNo:dcMotorOff:'PIN' 'Brake')			('Buzzer %B on frequency %N'	-	buzzerPin:freq: 'PIN' 60)			('Buzzer %B off'					-	buzzerPin: 'PIN')			('LED %p %o'					-	ledPin:onOff: 'PIN' 'on')		'studuinoextra'"			('Set LED tape %J no.%n red %n green %n blue %n'	-	ledTapeNo:pos:r:g:b: 'PIN' 1 255 255 255)			('Set LED tape %J all red %n green %n blue %n'		-	ledTapeNo:r:g:b: 'PIN' 255 255 255)"		'motion mini'			('Onboard LED %p1 %o'			-	boardLED:onOff: 'Red(D5)' 'on')			('Set time %nh %nm'			-	hour:min: 0 0)			('Set date %n/%n/%n'			-	month:day:year: 1 1 2016)			('Set alarm %nh %nm'			-	alhour:almin: 0 0)			('Set backlight R%n G%n B%n'	-	red:green:blue: 0 0 0)			('Backlight %o'					-	clkBackLight: 'on')			('Clock''s buzzer on frequency %N for %n'	t	clkBuzzerOnFreq:For:elapsed:from: 60 1)"			('Clock''s buzzer off'				-	clkBuzzerOff)""			('Color LED %w %o'				-	ledColor:onOff: 'White' 'on')"			-"			('Move %q for %n msec at %n power and %T'	-	direct:time:power:stop 'Forward' 100  100 'Brake')""			('Set servomotors %E ms/deg, D2:%F D4:%F D7:%F D8:%F D9:%F D10:%F D11:%F D12:%F' - setServoSpeed:d2:d4:d7:d8:d9:d10:d11:d12: 10 90 90 90 90 90 90 90 90)"			-		'variables'"			('show variable %v'				-	showVariable:)			('hide variable %v'				-	hideVariable:)"		'list'			('add %n to %L'					-	append:toList: 0)			-			('delete %y of %L'				-	deleteLine:ofList: 1)			('insert %n at %i of %L'			-	insert:at:ofList: 0 1)			('replace item %i of %L with %n'		-	setLine:ofList:to: 1 'list' 0)			-			('item %i of %L'					r	getLine:ofList: 1)			('length of %L'					r	lineCountOfList:)			('%L contains %n'				b	list:contains: 'list' 0)			-			('write %L to %A as text file'	-	list:export: 'list' 'path')	).	^ blocks, self obsoleteBlockSpecs! !!ScratchStageMorph class methodsFor: 'block specs' stamp: 'KK 4/5/2018 13:23'!blockSpecs	| blocks |	blocks _ #(		'sensing'"			('ask %s and wait'			s	doAsk 'What''s your name?')			('answer'					r	answer)			-			('mouse x'					r	mouseX)			('mouse y'					r	mouseY)			('mouse down?'				b	mousePressed)			-			('key %k pressed?'			b	keyPressed: 'space')			-			('reset timer'				-	timerReset)			('timer'						r	timer)			-			('%a of %m'					r	getAttribute:of:)			-			('loudness'					r	soundLevel)			('loud?'						b	isLoud)			~			('%H sensor value'			r	sensor: 'slider')			('sensor %h?'				b	sensorPressed: 'button pressed')			~""			('set servo motor %J to %n degrees'			-	motorNo:degree: 'No.1' 90)			('set DC motor %j  %z'		-	motorNo:onOff: 'No.1' 'on')""			('%z sensor value'			r	sensor: 'A0')"			('Light Sensor %P value'		r	lightSensor: 'PIN')			('Touch Sensor %V value'	r	touchSensor: 'PIN')			('Sound Sensor %O value'	r	soundSensor: 'PIN')			('IR Photoreflector %Z value'	r	refPhotosensor: 'PIN')			('Temperature sensor %w value'	r	temperatureSensor: 'PIN')			('3-Axis Digital Accelerometer %Y value'	r	accelerometer: 'AXIS')			('Gyro sensor %G value'	r	gyroSensor: 'X(Acc)')			('Button %X value'	r		onBoardButton: 'PIN')			~			('reset timer'				-	timerReset)			('timer'						r	timer)			~		'sensing extra'			('Ultrasonic sensor value'	r	ultrasonicSensor)		'sensing mini'			('Clock''s %Z1'	r	clockValue: 'Hour')			('becoming in alarm time'		b	isInAlarm)			('Onboard Light Sensor value'	r		onBoardLightSensor)			('Power value'	r		power)		'looks'"xxx			('switch to background %l'	-	showBackground: 'background1')			('next background'			-	nextBackground)			('background #'				r	backgroundIndex)			-			('change %g effect by %n'	-	changeGraphicEffect:by: 'color' 25)			('set %g effect to %n'		-	setGraphicEffect:to: 'color' 0)			('clear graphic effects'		-	filterReset)			-""xxx			('place sprites for scene %x'	-	showScene:) "		'pen'"xxx			('clear'						-	clearPenTrails)"	).	^ blocks, super blockSpecs! !!SensorBoardMorph methodsFor: 'initialization' stamp: 'KK 4/6/2018 11:27'!addReadouts	| readoutNames sensorID offset light touch sound infrared acceleration button setAcceleration open led buzzer colorLED kindOfSensor sizeAx tmp header cont temperature setGyro setUltrasonic |	" Check IOPort ""	Transcript show:'[SensorBoardMorph::addReadouts] ';show:(IOPort);cr."	setGyro _ false.	" Set gyro sensor flag "	offset _ 10.		" Offset for sensor ID "	open _ 16r00.			" Not connected "	led _ 16r03.				" LED ID "	buzzer _ 16r04.			" Buzzer ID "	colorLED _ 16r05.		" Color LED ID "	light _ 16r10.			" Light sensor ID "	touch _ 16r11.			" Touch sensor ID "	sound _ 16r12.			" Sound sensor ID "	infrared _ 16r13.		" IR Photoreflector ID "	acceleration _ 16r14.		" Accelerometer ID "	button _ 16r15.			" Button sensor ID "	temperature _ 16r18.		" Temperature sensor ID "	setAcceleration _ false.	" Set acceleration sensor flag "	setUltrasonic _ false.	" Disapper A1 line, ultarsonic use A0/A1 port"	(BoardType = 0 or: [BoardType = 2]) ifTrue: [		sizeAx _ 8.]	ifFalse: [		sizeAx _ 6.].	readoutNames _ OrderedCollection new.	1 to: sizeAx do: [ :index |		sensorID _ IOPort at: (index + offset).		(sensorID = open) ifTrue: [	" Not connected "			readoutNames add:'[A', (index - 1) asString,']',' Not connected'.		].		(sensorID = led) ifTrue: [	" LED "			readoutNames add:'[A', (index - 1) asString,']',' LED'.		].		(sensorID = buzzer) ifTrue: [	" Buzzer "			readoutNames add:'[A', (index - 1) asString,']',' Buzzer'.		].		(sensorID = colorLED) ifTrue: [	" Color LED "			readoutNames add:'[A', (index - 1) asString,']',' Color LED'.		].		(sensorID = light) ifTrue: [	" Light Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Light sensor'.		].		(sensorID = touch) ifTrue: [	" Touch Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Touch sensor'.		].		(sensorID = sound) ifTrue: [	" Sound Sensor "			readoutNames add:'[A', (index - 1) asString,']',' Sound sensor'.		].		(sensorID = infrared) ifTrue: [	" IR Photoreflector "			readoutNames add:'[A', (index - 1) asString,']',' IR Photoreflector'.		].		(sensorID = acceleration) ifTrue: [	" Accelerometer "			(setAcceleration = false) ifTrue: [				readoutNames add:'[A4/A5] Accelerometer (X)'.				readoutNames add:'[A4/A5] Accelerometer (Y)'.				readoutNames add:'[A4/A5] Accelerometer (Z)'.				setAcceleration _ True.			].		].		(sensorID = temperature) ifTrue: [	" Temperature sensor "			readoutNames add:'[A', (index - 1) asString,']',' Temperature sensor'.			listTempBuf at: index put: (TemperatureSensor new).		].		(sensorID = StdnoPIDGyro) ifTrue: [	" Gyro Sensor "			(setGyro = false) ifTrue: [				readoutNames add:'[A4/A5] Gyro sensor (X(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (Y(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (Z(Acc))'.				readoutNames add:'[A4/A5] Gyro sensor (X(Gyro))'.				readoutNames add:'[A4/A5] Gyro sensor (Y(Gyro))'.				readoutNames add:'[A4/A5] Gyro sensor (Z(Gyro))'.				setGyro _ True.			].		].		(sensorID = StdnoPIDUltrasonic) ifTrue: [	" Ultrasonic Sensor "			(setUltrasonic = false) ifTrue: [				readoutNames add:'[A0/A1] Ultrasonic sensor'.				setUltrasonic _ True.			].		].		(sensorID = button) ifTrue: [	" Button "			readoutNames add:'[A', (index - 1) asString,']',' Button'.		].	].	column _ AlignmentMorph newColumn		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: (Color r: (193/255) g: (196/255) b: (199/255));		borderWidth: 2;		borderColor: (Color r: (148/255) g: (145/255) b: (145/255));		useRoundedCorners;		inset: 3.	titleMorph _ StringMorph		contents: ''		font: (StrikeFont fontName: 'VerdanaBold' size: 10).	column addMorph: titleMorph.	self updateTitle.	column addMorphBack: (Morph new color: column color; extent: 5@3).  "spacer"	self removeAllMorphs.	readouts _ readoutNames collect: [:i |		(((i findString: 'Not connected') ~= 0) | ((i findString: 'LED') ~= 0) | ((i findString: 'Buzzer') ~= 0)) ifTrue: [			kindOfSensor _ false.		] ifFalse: [			kindOfSensor _ true.		].		(i size = 1)			ifTrue:[self addReadoutLabeled: i isSensor: kindOfSensor]			ifFalse:[				tmp _ i findTokens: ' '.				header _ tmp at: 1.				cont _ ''.				2 to: (tmp size) do: [:index |					cont _ cont, (tmp at: index).					(index = tmp size) ifFalse: [cont _ cont, ' '].].				self addReadoutLabeled: (header localized, ' ', cont localized) isSensor: kindOfSensor.]	].	" For Studuino mini "	(BoardType = 1) ifTrue: [		readouts add: (self addReadoutLabeled: 'Onboard LightSensor' localized).		readouts add: (self addReadoutLabeled: 'Battery voltage [V]' localized).		clock _ ColorClock new].	column position: self position - 2.	self addMorph: column.	self extent: column extent - 4.! !!SensorBoardMorph methodsFor: 'private' stamp: 'KK 4/9/2018 10:36'!processScratchByte: aByte	"Process one byte of the incoming data stream from a Scratch sensor board."	"Sensor messages are two bytes with the following format:		Byte1: <1><sensor number (4 bits)><sensor value high bits (3 bits)>		Byte2: <0><sensor value low bits (7 bits)>"	| sensorNum val dtype isExtendedRead pos obj  |	(aByte bitShift: -5) = 4 ifTrue: [		dtype _ aByte bitAnd: 16r1F.		dtype = 0 ifTrue: [	"ACK"			resCommand _ 1].		dtype = 1 ifTrue: [	"NACK"			resCommand _ -1].		dtype = 16r1F ifTrue: [	"syncFinish"			onSyncServo _ false].		^ self].	" Not update if the data is dummy. (No sensor is selected but A0 dat comes as dummy.) "	(IOPort select: [:each | (each > 15) & (each < 27)]) size = 0		ifTrue: [^ self].	"Extended data coming."	isExtendedRead _ false.	(((aByte bitShift: -6) = 2) | ((aByte bitShift: -6) = 3)) ifTrue: [		isExtendedRead _ true].	currentState = #idle ifTrue: [  "wait for first byte of message"		(aByte bitShift: -6) = 0 ifTrue: [			currentState _ #firstByteSeen.			highByte _ aByte].		^ self].	currentState = #firstByteSeen ifTrue: [		(aByte bitShift: -6) = 0 ifTrue: [  "must have lost second byte; stay in firstByteSeen state"			highByte _ aByte.			^ self].		"good second byte: report the sensor value"		sensorNum _ ((highByte bitShift: -2) bitAnd: 16rF) + 1.		val _ ((highByte bitAnd: 3) bitShift: 6) + (aByte bitAnd: 16r3F).		" Checking an extended data. "		sensorNum <= 8 ifTrue: [			"Temperature sensor"			(IOPort at: (10 + sensorNum)) = 16r18 ifTrue: [				isExtendedRead ifFalse: [					secondByte _ aByte.					^ self				].				val _ ((highByte bitAnd: 3) bitShift: 6) + (secondByte bitAnd: 16r3F).				val _ val + ((aByte bitAnd: 16r3F) bitShift: 8).			].			"Ultrasonic sensor"			(IOPort at: (10 + sensorNum)) = StdnoPIDUltrasonic ifTrue: [				isExtendedRead ifFalse: [					secondByte _ aByte.					^ self				].				val _ ((highByte bitAnd: 3) bitShift: 6) + (secondByte bitAnd: 16r3F).				val _ val + ((aByte bitAnd: 16r1F) bitShift: 8).			]		] ifFalse: [			"Gyro sensor"			(IOPort at: 15) = 16r19 ifTrue: [				isExtendedRead ifFalse: [					secondByte _ aByte.					^ self.				] ifTrue: [					(((aByte bitShift: -6) bitAnd: 3) = 2) ifTrue: [						thirdByte _ aByte.						^ self					].				].				val _ ((highByte bitAnd: 3) bitShift: 6) + (secondByte bitAnd: 16r3F).				val _ val + ((thirdByte bitAnd: 16r1F) bitShift: 8).				val _ val + ((aByte bitAnd:16r07) bitShift: 13).				(val > 32767) ifTrue: [					val _ val - 65536.				].			]		].		(val = 128) ifTrue: [ ^ self ].		(val = 128) ifTrue: [ val _ 0. ].	" 128 is open port or output parts "				(BoardType = 1) & (sensorNum = (readouts size)) ifTrue: [			val _ (val / 10.0)].		sensorNum <= sensorValues size ifTrue: [			pos _ sensorNum.			((sensorNum = 7 ) | (sensorNum = 8))				ifTrue: [					(readouts size ) > 8 ifTrue: [ pos _ sensorNum + 1]. "A6/A7 position increment by Acc"					(readouts size ) > 10 ifTrue: [ pos _ sensorNum + 4]]. "A6/A7 position increment by Gyro"			sensorNum > 8				ifTrue: [					pos _ sensorNum - 4.  "Accelerometer readout position to I2C"					(IOPort at: 15) = StdnoPIDAcceleration ifTrue: [						val _ self convertAccelerometer: val					].					(IOPort at: 15) = StdnoPIDGyro ifTrue: [						val _ (self convertGyro: val kind: sensorNum).					].				] ifFalse: [					(IOPort at: (10 + sensorNum)) = 16r18						ifTrue: [							obj _ listTempBuf at: sensorNum.							val _ (obj average: (self convertToCelcius: val)) asFloat.].					(IOPort at: (10 + sensorNum)) = StdnoPIDUltrasonic						ifTrue: [							val _ val / 10.0]].			(UltrasonicUsed) ifTrue: [				(pos > 1) ifTrue: [ pos _ pos - 1. ]			].			sensorValues at: pos put: val.			sensorNum = 16 ifTrue: [				(val == 3) | (val == 4) ifTrue: [					scratchBoardV3 _ true				]			]		].  "ScratchBoard, version 3 or 4"		currentState _ #idle	].! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/11/2018 13:46'!addReadoutLabeled: aString field: clmn	"Add a readout row with the given label. Answer the stringmorph that's the readout."	| row box readout |	row _ AlignmentMorph newRow		color: clmn color;		inset: 2.	row addMorphBack: (Morph new color: clmn color; extent: 1@3). "spacer"	row addMorphBack: (StringMorph contents: aString capitalized font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	row addMorphBack: (AlignmentMorph new color: clmn color; extent: 10@1; hResizing: #spaceFill). "spacer"	box _ NumericUpDownMorph new		extent: 42@14;		color: (ScriptableScratchMorph blockColorFor: 'sensing').	box setDefault: 0 min: -15 max: 15 width: 30 isEdit: false.	Boxes add: box.	" Set the box "	row addMorphBack: box.	row addMorphBack: (StringMorph contents: ('deg.' localized) font: (StrikeFont fontName: 'VerdanaBold' size: 10)).	readout _ StringMorph contents: '0' font: (StrikeFont fontName: 'VerdanaBold' size: 10).	readout color: Color white.	clmn addMorphBack: row.	ServoMotorField add: row.	^ readout! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/11/2018 11:56'!setDCDefaultValue: data	| index def ratio |	index _ 1.	Sliders do: [:sliderInfo |		def _ data at:index.		sliderInfo submorphs do: [ :earch |			(earch isMemberOf: DCSliderMorph2) ifTrue: [				ratio _ def / 255.0.				earch setScaledValue: ratio.	" Set slider position. "				self motorNo: (earch getPortName) displayPower: ratio.			].		].		index _ index + 1.	].! !!MotorCalibMorph2 methodsFor: 'initialization' stamp: 'KK 4/18/2018 11:38'!setDefaultPosition	|  partsID box val pins pin |	pins _ #(16r0000 16r0200 16r0400 16r0600 16r0800 16r0A00 16r0C00 16r0E00). 	3 to: 10 do: [ :i |		partsID _ IOPort at:i.		" Get Parts ID "		" Send only servomotor info to board "		(partsID = StdnoPIDServomotor) ifTrue: [			pin _ pins at: (i-2).			box _ Boxes at: (i-2).			val _ box getValue.			val _ val + 90.			val _ pin + val rounded.			self data: val msgID: 1.		].	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/11/2018 16:26'!reset	"Reset calibration"		Boxes do: [ :box |		box getValid ifTrue: [			box numExpression: 0.			box notifyOwner: 0.		].	].! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/10/2018 11:30'!setDCCalibration	"Set calibration"		| filename f index val |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/dc_calib_ini'.	].	f _ FileStream fileNamed: filename.	f binary.	index _ 1.		Sliders do: [ :sliderInfo |		sliderInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				val _ (elm getScaledValue * 100) truncated.				f nextPut: val.			].		].		index _ index + 1.	].	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/10/2018 11:34'!setDCCalibrationImm	"Set calibration"		| filename f index val |	Smalltalk isWindows ifTrue: [	" for Windows "		filename := '..\common\dc_calib_ini_imm'.	] ifFalse: [	" for Unix / Mac "		filename := '../common/dc_calib_ini_imm'.	].	f _ FileStream fileNamed: filename.	f binary.	index _ 1.		Sliders do: [ :sliderInfo |		sliderInfo submorphs do: [ :elm |			(elm isMemberOf: DCSliderMorph2) ifTrue: [				val _ (elm getScaledValue * 255) truncated.				DCCalib at: index put: val.				f nextPut: val.			].		].		index _ index + 1.	].	f close.! !!MotorCalibMorph2 methodsFor: 'interaction' stamp: 'KK 4/10/2018 10:41'!yes	"Set calibration"		((DCCalibStatus = 0) | (DCCalibStatus = -1)) ifTrue: [	" if STOP and Invalid status... "		Smalltalk isMacOSX ifFalse: [			self stop.		].		self setServoCalibration.		self setDCCalibration.		self setDCCalibrationImm.		self closePort.		self delete.		ScratchMenuTitleMorph setMenuEnable: true.		DuringCalib _ false.	].! !ScratchStageMorph removeSelector: #showStuduinoBlocks!ScratchStageMorph removeSelector: #showStuduinoBlocks:!ScratchFrameMorph removeSelector: #hideStuduinoBlocks!ScratchFrameMorph removeSelector: #readCalibInfo!ScratchFrameMorph removeSelector: #showStuduinoBlocks!PinAssignMorphUS removeSelector: #notifyCheckChange:!PinAssignMorphUS removeSelector: #notifyCheckChangeWithOption:!PinAssignMorph removeSelector: #setCheckBox:partsID:!