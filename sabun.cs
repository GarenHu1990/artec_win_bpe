'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 22 March 2017 at 7:04:51 pm'!Morph subclass: #KeyPadMorph	instanceVariableNames: 'buttons lastContents targetField '	classVariableNames: 'BaseColor ButtonColor ButtonSize FontColor '	poolDictionaries: ''	category: 'Studuino'!KeyPadMorph class	instanceVariableNames: ''!ExpressionArgMorph subclass: #NumericUpDownMorph	instanceVariableNames: 'menuMorph getMenuSelector specialValue downMorph valid upMorph minimum maximum upButtonOn downButtonOn buttons '	classVariableNames: 'DownForm UpForm '	poolDictionaries: ''	category: 'Scratch-Blocks'!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll versionConflict keyPad fontButtons '	classVariableNames: 'BoardStatus COMPort Clipboard DefaultNotes DefaultSprite Fonts FontsXO IsXO LangDic NewScratchProject ScratchServers ScratchSkin ScratchSkinXO TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!!BlockMorph methodsFor: 'event handling' stamp: 'sk 3/15/2017 13:13'!mouseDown: evt	"Handle a mouse click. Left button either drags or performs click action. Right button brings up a menu."	evt hand newKeyboardFocus: nil.	evt rightButtonPressed		ifTrue: [^ self rightButtonMenu]		ifFalse:	[evt hand waitForClicksOrDrag: self event: evt].! !!CommandBlockMorph methodsFor: 'private' stamp: 'sk 3/17/2017 18:35'!uncoloredArgMorphFor: t1 	| t2 |	" Check if a single character or a string."	(t1 size = 2) ifTrue: [		t2 _ t1 at: 2.	]	ifFalse: [		t2 _ t1 copyFrom: 2 to: (t1 size).].	$a = t2 ifTrue: [^ AttributeArgMorph new choice: 'volume'].	$b = t2 ifTrue: [^ BooleanArgMorph new].	$B = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #bzrPinNo;		 choice: 'A0'].	$c = t2 ifTrue: [^ ColorArgMorph new showPalette: true].	$C = t2 ifTrue: [^ ColorArgMorph new showPalette: false].	$d = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0';		 menuSelector: #directionMenu].	$D = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '48';		 menuSelector: #midiDrumMenu].	$e = t2 ifTrue: [^ EventTitleMorph new].	$E = t2 ifTrue: [^ NumericUpDownMorph new  setDefault:10 min:0 max:20 width:15 isEdit:true].	$f = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mathFunctionNames;		 choice: 'sqrt'].	$F = t2 ifTrue: [^ NumericUpDownMorph new  setDefault:90 min:0 max:180 width:20 isEdit:true].	$g = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #graphicEffectNames;		 choice: 'color'].	$H = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSensorNames].	$h = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupBooleanSensorNames].	$I = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #midiInstrumentMenu]."	$i = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexMenu]."	$i = t2 ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$j = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorNo;		 choice: 'PIN'].	$J = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #svMotorNo;		 choice: 'PIN'].	$k = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #keyNames;		 choice: 'space'].	$L = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #listVarMenu].	$l = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #costumeNames;		 choice: 'costume1'].	$m = t2 ifTrue: [^ SpriteArgMorph new].	$M = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorNames].	$n = t2 ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$N = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '60';		 menuSelector: #noteSelector].	$o = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledOnOff;		 choice: 'on'].	$O = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSoundPin].	$p = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledPinNo;		 choice: 'A0'].	'p1' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #boardLED;			choice: 'Red(D5)'.].	$P = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupLightPin].	$q = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #moveDirection;		 choice: 'Forward'].	$s = t2 ifTrue: [^ ExpressionArgMorph new stringExpression: ''].	$S = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #soundNames;		 choice: 'pop'].	$t = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorOn;		 choice: 'cw.'].	$T = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #dcMotorOff;		 choice: 'Brake'].	$v = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #varNamesMenu;		 choice: ''].	$V = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupTouchPin].	$w = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #ledColor;		 choice: 'White'].	$W = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorDirection].	$x = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #sceneNames;		 choice: ''].	$X = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARButton]."	$y = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexForDeleteMenu]."	$y = t2 ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$Y = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARSensorXYZ].	$z = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupARSensorNames].	$Z = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupIRPin].	'Z1' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #clockVars].^ ExpressionArgMorph new numExpression: '10'! !!DialogBoxMorph methodsFor: 'geometry' stamp: 'sk 2/6/2017 11:31'!topCenterOnScreen	"Center myself on the screen, if possible. Otherwise, adjust position so buttons are visible."	| w |	w _ self world.	self extent: self extent.  "force layout"	self position: ((w width // 2) - (self width // 2))@5.  "top center on screen but disregard the shadow on the bottom"	self bottom > w bottom ifTrue: [		self bottom: w bottom + 37.  "make sure cancel button is on screen"		self top > -2 ifTrue: [self top: -2]]. "make top flush with the top of the screen"	(self top < -2 and: [self top > -34]) ifTrue: [		"if title bar partway off screen, move it all the way off"		self top: -34].! !!EventTitleMorph methodsFor: 'event handling' stamp: 'sk 3/22/2017 18:40'!presentMenu	"Pop up a menu of choices."	| eventNames sFrame menu choice s |	eventNames _ #().	(sFrame _ self ownerThatIsA: ScratchFrameMorph)		ifNotNil: [eventNames _ sFrame workPane allEventNames].	menu _ CustomMenu new.	eventNames do: [:n | menu add: n action: n asString].	menu addLine.	menu add: ('new' localized, ScratchTranslator ellipsesSuffix) action: #newEvent.	(choice _ menu startUp) ifNil: [^ self].	choice == #newEvent ifTrue: [		TabletMode ifTrue: [			sFrame sendMessageToBMnoBlocking: 'SHOWKEYPAD'].		ValueOrList _ true.		s _ StringDialog ask: 'Function name:(Only alphanumeric characters are allowed)'.		TabletMode ifTrue: [			sFrame sendMessageToBMnoBlocking: 'HIDEKEYPAD'].		s size = 0 ifTrue: [^ self].		^ self eventName: s].	self eventName: choice.! !!ExpressionArgMorphWithMenu methodsFor: 'accessing' stamp: 'sk 2/10/2017 16:53'!menuSelector: menuSelector	| scale |	"Add a drop-down menu button with the given selector. The selector should result in a menu whose action items are values that can be put into this type argument, typically numbers or strings."	scale _ ScratchTranslator renderScale rounded.	menuMorph _ ImageMorph new form: (DropDownMenuForm magnifyBy: scale).	getMenuSelector _ menuSelector.	self addMorphFront: menuMorph.	self fixArgLayout.! !!ExpressionArgMorphWithMenu methodsFor: 'event handling' stamp: 'sk 1/26/2017 12:57'!mouseDown: evt	| rcvr menu choice frame kw vPos |	menuMorph ifNil: [^ super mouseDown: evt].	(evt cursorPoint x < (menuMorph left - 1)) ifTrue: [^ super mouseDown: evt].	(getMenuSelector notNil and:	 [(owner isKindOf: BlockMorph) and: 	 [(rcvr _ owner receiver) notNil]]) ifFalse: [^ self beep].	menu _ rcvr perform: getMenuSelector.	(menu isKindOf: ScratchNoteSelector) ifTrue: [		"menu position: owner bottomLeft + (((owner width - menu width) // 2) @ -4)"		frame _ owner ownerThatIsA: ScratchFrameMorph.		kw _ (frame width * 0.04) truncated.		menu buildKeyboard: 2 baseOctave: 4 keyWidth: kw.		menu setUpNoteDisplay: (20 * kw // 13).		vPos _ owner bottom -4.		(vPos + (menu extent y)) > frame height ifTrue: [			vPos _ owner top + 4 - (menu extent y)].		menu position: ((frame width - menu width) // 2) @ vPos].	choice _ menu startUp.	choice ifNil: [^ self].	evt hand newKeyboardFocus: nil.  "close mini-editor, if any"	(#(listIndexMenu listIndexForDeleteMenu) includes: getMenuSelector) ifTrue: [		^ self specialValue: choice].	isNumber		ifTrue: [self numExpression: choice]		ifFalse: [self stringExpression: choice].! !!ExpressionArgMorphWithMenu methodsFor: 'private' stamp: 'sk 2/10/2017 16:36'!fixArgLayout	| dx |	dx _ 9 * (ScratchTranslator renderScale).	super fixArgLayout.	menuMorph ifNil: [^ self].	self width: self width + dx.	menuMorph position: (self right - dx - 2)@(self top + (self height // 3)).	(thisContext sender receiver isKindOf: StringFieldMorph) ifTrue: [		"clear only when user edit my label, but not on other arg layout changes"		specialValue _ nil].! !!HatBlockMorph methodsFor: 'private' stamp: 'sk 3/16/2017 17:46'!fixBlockLayout	"Update the positions of my submorphs."	| x centerY nextB nonBlockSubmorphs oldExtent oldPos |	blockLayoutNeeded ifFalse: [^ self].	super fixBlockLayout.	oldExtent _ self extent.	oldPos _ self position.	ScratchTranslator isRTL		ifTrue: [x _ self right - 8]		ifFalse: [x _ self left + 8].	centerY _ self top + 3 + ((self height) // 2).	self nonControlFlowSubmorphs do: [:m |		(m isKindOf: ArgMorph) ifTrue: [m fixArgLayout].		ScratchTranslator isRTL			ifTrue: [m position: (x - m width)@(centerY - (m height // 2)). 				x _ x - m width - 5]			ifFalse: [m position: x@(centerY - (m height // 2)). 				x _ x + m width + 5]].	ScratchTranslator isRTL		ifTrue: [x _ x - 4.			self width: ((self right - x) max: self hatTopForm width)]		ifFalse: [x + x + 4.			self width: ((x - self left) max: self hatTopForm width)].	ScratchTranslator isRTL ifTrue: [		self left: oldPos x + (oldExtent x - self width)].	nonBlockSubmorphs _ self submorphs select: [:m |		(m isKindOf: BlockMorph) not or: [m isKindOf: ArgMorph]].	self height: self hatTopForm height + (nonBlockSubmorphs inject: CBlockBracketThickness into: [:h :m | h max: (m height + 8)]).	(nextB _ self nextBlock) ifNotNil: [		ScratchTranslator isRTL			ifTrue: [nextB right: self right]			ifFalse: [nextB left: self left].		nextB top: self bottom - 4.		nextB fixBlockLayout].! !!KeyPadMorph methodsFor: 'stepping and presenter' stamp: 'sk 3/14/2017 11:30'!step

	| keyPadTarget expArg dispPosition frame |
	keyPadTarget _ World activeHand keyboardFocus.
	(keyPadTarget isKindOf: StringFieldMorph) ifTrue: [
		lastContents _ keyPadTarget contents.
		self target: keyPadTarget.
		expArg _ keyPadTarget ownerThatIsA: ExpressionArgMorph.
		frame _ expArg ownerThatIsA: ScratchFrameMorph.

		dispPosition _ expArg bottomLeft.
		((dispPosition y) + (self height)) > frame height ifTrue: [
			dispPosition _ (dispPosition x)@((dispPosition y) - (expArg height) - (self height))].
		self position: dispPosition.
		self comeToFront]
	ifFalse: [
		self delete].
! !!KeyPadMorph methodsFor: 'stepping and presenter' stamp: 'sk 2/7/2017 10:16'!stepTime

	^ 50! !!KeyPadMorph methodsFor: 'initialization' stamp: 'sk 3/15/2017 14:40'!initialize

	| col row bt size |
	super initialize.

	self color: Color transparent.
	col _ AlignmentMorph new.
	col orientation: #vertical.
	col color: BaseColor.
	col useRoundedCorners.

	buttons _ OrderedCollection new.
	size _ (ButtonSize + (10 * ScratchTranslator renderScale)) truncated.
	#(
		#(#('-' 45) #(0 48) #('.' 46))
		#(#(7 55) #(8 56) #(9 57))
		#(#(4 52) #(5 53) #(6 54))
		#(#(1 49) #(2 50) #(3 51))
		) do: [:num1 |
		row _ AlignmentMorph new.
		row color: BaseColor.
		num1 reverseDo: [:num2 |
			bt _ (SimpleButtonMorph new)
				label: ((num2 at: 1) asString) font: (StrikeFont fontName: #Verdana size: 20);
				extent: (size@size);
				color: ButtonColor;
				borderWidth: 1;
				borderColor: FontColor;
				target: self;
				actionSelector: #input:;
				arguments: {num2 at: 2};				actWhen: #buttonDown.
			(bt findA: StringMorph) color: FontColor.
			buttons add: bt.
			row addMorph: bt.
			row addMorph: (Morph new extent: (2@40); color: (Color transparent))].
		col addMorph: row].

	row _ AlignmentMorph new.
	row color: BaseColor.

	bt _ IconicButton new labelGraphic: ((ScratchFrameMorph skinAt: #bs) magnifyBy: 0.5) borderWidth: 0.
	bt target: self;
		actionSelector: #deleteChar;		actWhen: #buttonDown.
	buttons add: bt.

	row addMorph: bt.
	row addMorph: (Morph new extent: (20@30); color: (Color transparent)).

	bt _ SimpleButtonMorph new
		label: 'C' font: (StrikeFont fontName: #Verdana size: 20);
		extent: (70@30);
		color: ButtonColor;
		borderWidth: 1;
		borderColor: FontColor;
		target: self;
		actionSelector: #clearTarget;		actWhen: #buttonDown.
	(bt findA: StringMorph) color: FontColor.
	"buttons add: bt."
	row addMorph: bt.
	col addMorph: row.

	"col addMorph: sf."   "For debug"
	self addMorph: col.
	self extent: col extent.! !!KeyPadMorph methodsFor: 'accessing' stamp: 'sk 2/7/2017 09:30'!clearTarget

	targetField selectAll; removeSelection.
	World activeHand newKeyboardFocus: targetField.
! !!KeyPadMorph methodsFor: 'accessing' stamp: 'sk 2/7/2017 09:26'!deleteChar

	| curPosition |
	targetField backspace.
	curPosition _ targetField cursorPosition.
	World activeHand newKeyboardFocus: targetField.
	targetField moveCursorAt: curPosition.
! !!KeyPadMorph methodsFor: 'accessing' stamp: 'sk 2/22/2017 10:34'!input: aValue

	| curPosition |
	targetField contents: lastContents.
	(lastContents = '0') ifTrue: [
		targetField selectAll].

	targetField insertCharacter: aValue.	lastContents _ targetField contents.
	curPosition _ targetField cursorPosition.
	World activeHand newKeyboardFocus: targetField.
	targetField moveCursorAt: curPosition.
! !!KeyPadMorph methodsFor: 'accessing' stamp: 'sk 3/14/2017 11:52'!setLocation	| keyPadTarget expArg dispPosition frame |	keyPadTarget _ World activeHand keyboardFocus.	(keyPadTarget isKindOf: StringFieldMorph) ifTrue: [		expArg _ keyPadTarget ownerThatIsA: ExpressionArgMorph.		frame _ expArg ownerThatIsA: ScratchFrameMorph.		dispPosition _ expArg bottomLeft.		((dispPosition y) + (self height)) > frame height ifTrue: [			dispPosition _ (dispPosition x)@((dispPosition y) - (expArg height) - (self height))].		self position: dispPosition.		self comeToFront].! !!KeyPadMorph methodsFor: 'accessing' stamp: 'sk 2/6/2017 20:38'!target: aStringField

	targetField _ aStringField.

"	buttons do: [:bt |
		bt target: aStringField]
"! !!KeyPadMorph class methodsFor: 'class initialization' stamp: 'sk 2/20/2017 16:27'!initialize
	"self initialize"

	BaseColor _ Color r: 0.753 g: 0.764 b: 0.776.
	ButtonColor _ Color r: 0.3 g: 0.3 b: 0.3.
	FontColor _ Color white.
	ButtonSize _ 40.
! !!NumericUpDownMorph methodsFor: 'accessing' stamp: 'sk 3/17/2017 19:05'!addUpDownButton	| scale |	buttons _ AlignmentMorph new		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		inset: 0;		color: (Color transparent).	scale _ ScratchTranslator renderScale rounded.	upMorph _ IconicButton new labelGraphic: (UpForm magnifyBy: scale).	upMorph color: (Color transparent);		borderWidth: 0;		target: self;		height: (self height);		actWhen: #whilePressed;		actionSelector: #incValue.	buttons addMorphBack: upMorph.	downMorph _ IconicButton new labelGraphic: (DownForm magnifyBy: scale).	downMorph color: (Color transparent);		target: self;		borderWidth: 0;		height: (self height);		actWhen: #whilePressed;		actionSelector: #decValue.	buttons addMorphBack: downMorph.	self addMorphFront: buttons.	self fixArgLayout! !!NumericUpDownMorph methodsFor: 'private' stamp: 'sk 2/14/2017 18:57'!decValue	| val |	val _ self evaluate.	val _ val - 1.	self setNum: val.	! !!NumericUpDownMorph methodsFor: 'private' stamp: 'sk 3/17/2017 19:05'!fixArgLayout	| dx |	dx _ 9 * (ScratchTranslator renderScale).	super fixArgLayout.	upMorph ifNil: [^ self].	downMorph ifNil: [ ^ self].	dx _ upMorph width.	self width: self width + (dx * 2) + 5.	buttons position: (self right - (dx * 2) - 2)@(self top)."	upMorph position: (self right - dx - 2)@(self top + (self height // 3)).	downMorph position: (self right - (dx * 2) - 2)@(self top + (self height // 3))."! !!NumericUpDownMorph methodsFor: 'private' stamp: 'sk 2/14/2017 18:57'!incValue	| val |	val _ self evaluate.	val _ val + 1.	self setNum: val.! !!NumericUpDownMorph methodsFor: 'private' stamp: 'sk 2/16/2017 13:55'!setNum: aValue	| val |	aValue isNumber ifFalse: [^ self].	val _ aValue within: minimum and: maximum.	self numExpression: val.	self notifyOwner: val.! !!NumericUpDownMorph methodsFor: 'initialization' stamp: 'sk 12/22/2016 11:40'!setDefault: defVal min: minVal max: maxVal width:w isEdit: e	" Set initial value, minimum value, maximum value, and up/down button. "	minimum _ minVal.	maximum _ maxVal.	self numExpression: defVal.	labelMorph width: (w* (ScratchTranslator renderScale)).	labelMorph doResizing: false.	labelMorph rightJustify: true.	labelMorph isEditable: e.	self addUpDownButton.! !!ScratchFileChooserDialog methodsFor: 'initialization' stamp: 'sk 3/16/2017 14:49'!createScratchFileChooserFor: aScratchFrameMorph saving: savingFlag	"Create a Scratch file chooser dialog box with a project thumbnail and info box."	| labelFont contentsFont commentFont thumbnailHolder |	scratchFrame _ aScratchFrameMorph.	readingScratchFile _ savingFlag not.	list _ ScratchFilePicker new extensions: #(scratch bpd).	TabletMode ifTrue: [		list extent: 380@220].	self removeAllMorphs.	bottomSpacer delete.	bottomSpacer _ nil.	mainColumn addMorphBack: list.	savingFlag ifFalse: [		self title: 'Open Project'.		list scratchInfoClient: self].	labelFont _ (ScratchFrameMorph getFont: #FileChooserLabel).	contentsFont _ (ScratchFrameMorph getFont: #FileChooserContents).	commentFont _ (ScratchFrameMorph getFont: #FileChooserComment).	savingFlag ifTrue: [		self title: 'Save Project'.		newFileTitle _ StringMorph contents: ('New Filename:' localized, ' ') font: labelFont.		newFileTitle color: (Color gray: 0.3).		newFileName _ StringFieldMorph new			contents: scratchFrame projectName;			client: self;			font: contentsFont;			color: (Color r: (211/255) g: (214/255) b: (216/255));			width: 180.		tabFields add: newFileName.		newTitleBin			addMorphBack: newFileTitle;			addMorphBack: (Morph new extent: (5@5); color: Color transparent);			addMorphBack: newFileName;			addMorphBack: (AlignmentMorph newSpacer: Color transparent).		ScratchTranslator isRTL			ifTrue: [newTitleBin submorphs reversed do: [:m |				m delete.				newTitleBin addMorphBack: m]]].	mainColumn		addMorphBack: (Morph new extent: (5@9); color: Color transparent);		addMorphBack: newTitleBin.	thumbnailHolder _ AlignmentMorph newColumn		centering: #center;		color: Color transparent.	thumbnailFrameMorph _ ImageFrameMorph new		initFromForm: (ScratchFrameMorph skinAt: #dialogThumbnailFrame).	thumbnailFrameMorph extent: (170@130).	thumbnailHolder addMorph: thumbnailFrameMorph."	fileInfoColumn		addMorphBack: thumbnailHolder;		addMorphBack: (Morph new extent: (5@6); color: Color transparent)." "spacer"	thumbnailMorph _ ImageMorph new form: (Form extent: 160@120 depth: 1).	thumbnailFrameMorph addMorphFront: (thumbnailMorph position: ((thumbnailFrameMorph position) + (5@5))).	authorLabelMorph _ StringMorph contents: 'Project author:' localized font: labelFont.	authorLabelMorph color: (Color gray: 0.3)."	fileInfoColumn addMorphBack: authorLabelMorph."	savingFlag		ifTrue: [authorMorph _ StringFieldMorph new			useStringFieldFrame;			contents: '';			font: contentsFont.			tabFields add: authorMorph]		ifFalse: [fileInfoColumn addMorphBack: (Morph new extent: (5@6); color: Color transparent). "spacer"			authorMorph _ StringFieldMorph new				color: Color transparent;				borderWidth: 0;				contents: '';				isEditable: false;				font: contentsFont].	fileInfoColumn		addMorphBack: authorMorph;		addMorphBack: (Morph new extent: (5@6); color: Color transparent). "spacer"	commentLabelMorph _ StringMorph contents: 'About this project:' localized font: labelFont.	commentLabelMorph color: authorLabelMorph color."	fileInfoColumn addMorphBack: commentLabelMorph."	commentMorph _ ScrollingStringMorph new		borderWidth: 0;		contents: '';		font: commentFont;		extent: (210@110).	savingFlag		ifTrue: [commentMorph backForm: (ScratchFrameMorph skinAt: #stringFieldFrame).			tabFields add: commentMorph]		ifFalse: [commentMorph isEditable: false]."	fileInfoColumn addMorphBack: commentMorph.""	fileInfoColumn addMorphBack: buttonRow."	TabletMode ifTrue: [		newTitleBin addMorphBack: buttonRow]	ifFalse: [		mainColumn addMorphBack: buttonRow].	self		addMorphBack: shortcutColumn;		addMorphBack: mainColumn."		addMorphBack: fileInfoColumn."	savingFlag ifTrue: [		self scratchInfo: scratchFrame projectInfo.		thumbnailMorph form: scratchFrame workPane thumbnailForm.		"default author field to login name if known; else author"		(aScratchFrameMorph loginName size > 0)			ifTrue: [authorMorph contents: aScratchFrameMorph loginName]			ifFalse: [authorMorph contents: aScratchFrameMorph author]].! !!ScratchFileChooserDialog methodsFor: 'initialization' stamp: 'sk 2/20/2017 17:47'!getUserResponse	"Wait for the user to respond, then answer the full path name of the chosen file or #cancelled if the user cancels the operation. If opening a remote file for reading, answer a HTTPFetcher on the remote file."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w |	self openInWorld.	w _ self world.	w activeHand newKeyboardFocus: (tabFields at: 1).	TabletMode ifTrue: [		self topCenterOnScreen]	ifFalse: [		self centerOnScreen].	newFileName ifNotNil: [w activeHand newKeyboardFocus: newFileName].	list getDirectoryContents.	response _ #cancelled.  "default response"	done _ false.	[done or: [list isFinalSelection]] whileFalse: [w doOneCycle].	self delete.	w doOneCycle.  "erase myself from the screen"	((response = #cancelled) and: [list isFinalSelection not]) ifTrue: [^ #cancelled].	list selectedFile ifNil: [^ #cancelled].	(thumbnailMorph notNil & readingScratchFile not) ifTrue: [  "save info in project"		scratchFrame author: authorMorph contents withBlanksTrimmed.		scratchFrame projectComment: commentMorph contents].	(list currentDirectory isKindOf: ScratchServerDirectory)		ifTrue: [^ list projectFetcher]		ifFalse: [^ list currentDirectory fullNameFor: list selectedFile].! !!ScratchFileChooserDialog methodsFor: 'initialization' stamp: 'sk 2/20/2017 17:51'!initialize	"Create the file chooser dialog box"	super initialize.	choosingFolder _ false.	scratchFrame _ nil.	readingScratchFile _ false.	newTitleBin _ AlignmentMorph newRow		centering: #center;		color: Color transparent.	buttonRow hResizing: #spaceFill.	TabletMode ifTrue: [		mainColumn orientation: #horizontal.		newTitleBin orientation: #vertical].	self withButtonsForYes: false no: false okay: true cancel: true.! !!ScratchFileChooserDialog methodsFor: 'accessing' stamp: 'sk 2/20/2017 17:44'!createFileChooserLayout: allowNewFile	"Create the file chooser dialog box."	list _ ScratchFilePicker new.	self removeAllMorphs.	bottomSpacer delete.	bottomSpacer _ nil.	mainColumn addMorphBack: list.	self title: 'Open'.	allowNewFile ifTrue: [		self title: 'Save As'.		newFileTitle _ StringMorph new			contents: 'New Filename:' localized, ' ';			color: (Color gray: 0.3);			font: (ScratchFrameMorph getFont: #FileChooserNewFileTitle).		newFileName _ StringFieldMorph new			font: (ScratchFrameMorph getFont: #FileChooserNewFilename);			color: (Color r: (211/255) g: (214/255) b: (216/255));			width: 180.		newTitleBin			addMorphBack: newFileTitle;			addMorphBack: (Morph new extent: (5@5); color: Color transparent);			addMorphBack: newFileName;			addMorphBack: (AlignmentMorph newSpacer: Color transparent).			ScratchTranslator isRTL		ifTrue: [newTitleBin submorphs reversed do: [:m |			m delete.			newTitleBin addMorphBack: m]]].	TabletMode ifTrue: [		newTitleBin addMorphBack: buttonRow.		mainColumn addMorphBack: newTitleBin]	ifFalse: [		mainColumn addMorphBack: newTitleBin;			addMorphBack: buttonRow].	self		addMorphBack: shortcutColumn;		addMorphBack: mainColumn."		addMorphBack: fileInfoColumn."! !!ScratchFileChooserDialog methodsFor: 'interaction' stamp: 'sk 2/20/2017 17:49'!getUserResponseForNewFile	"Wait for the user to respond, then answer the full path name of the new file or #cancelled if the user cancels the operation."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w fn |	self openInWorld.	w _ self world.	w activeHand newKeyboardFocus: (tabFields at: 1).	self extent: self extent.  "force layout"	TabletMode ifTrue: [		self position: ((w width // 2) - (self width // 2)@5)]	ifFalse: [		self position: w center - (self extent // 2) + (0@5)].    "center on screen but disregard the shadow on the bottom"	newFileName ifNotNil: [w activeHand newKeyboardFocus: newFileName].	list getDirectoryContents.	[true] whileTrue: [		done _ false.		[done] whileFalse: [w doOneCycle].		response = #cancelled ifTrue: [^ #cancelled].		thumbnailMorph ifNotNil: [  "save info in project"			scratchFrame author: authorMorph contents withBlanksTrimmed.			scratchFrame projectComment: commentMorph contents].		fn _ newFileName contents withBlanksTrimmed.		fn size > 0 ifTrue: [			fn _ fn collect: [:ch | ('\/:' includes: ch) ifTrue: [$-] ifFalse: [ch]].  "replace directory delimiters with dashes"			^ list currentDirectory pathName, FileDirectory pathNameDelimiter asString, fn].		newFileTitle color: Color red.		self openInWorld.		w activeHand newKeyboardFocus: newFileName].! !!ScratchFileChooserDialog methodsFor: 'geometry' stamp: 'sk 3/16/2017 14:40'!extent: aPoint	super extent: aPoint.	mainColumn ifNotNil: [		mainColumn submorphs do: [:elm |			elm class = ScratchFilePicker ifTrue: [				elm height: ((elm height) - 22)]]].! !!ScratchFileChooserDialog methodsFor: 'stepping and presenter' stamp: 'sk 1/23/2017 23:40'!step	| current pos |	newFileName ifNil: [^ self].	current _ World activeHand keyboardFocus.	(current isKindOf: StringFieldMorph) ifTrue: [		]	ifFalse: [		pos _ World activeHand position.		(pos - (self position)) > (0@0) & ((pos - (self position)) < (self extent)) ifFalse: [			self cancelled]].! !!ScratchFileChooserDialog methodsFor: 'stepping and presenter' stamp: 'sk 1/23/2017 23:41'!stepTime	^ 200! !!ScratchFileChooserDialog class methodsFor: 'instance creation' stamp: 'sk 3/16/2017 14:50'!chooseExistingFileType: type extensions: anArrayOrNil title: titleString	| m |	ScratchFileChooserDialog deleteDuplicates.	m _ self new		createFileChooserLayout: false;		type: type;		extensions: anArrayOrNil;		title: titleString.	TabletMode ifTrue: [		m listExtent: 380@220].	^ m getUserResponse! !!ScratchFileChooserDialog class methodsFor: 'instance creation' stamp: 'sk 3/16/2017 14:49'!chooseNewFileDefault: defaultName title: titleString type: type	| m |	ScratchFileChooserDialog deleteDuplicates.	m _ self new		createFileChooserLayout: true;		type: type;		defaultName: defaultName;		title: titleString.	TabletMode ifTrue: [		m listExtent: 380@220]	ifFalse: [		m listExtent: 400@280].	^ m getUserResponseForNewFile! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'sk 3/17/2017 18:34'!addShortcutButtonsTo: rowMorph	| buttonSpecs b |	buttonSpecs _ #(		"name		tool tip				selector"		(language	'Set language'		languageMenu:)		(save		'Save this project'	saveScratchProjectNoDialog)	).	buttonSpecs do: [:spec |		b _ ToggleButton			onForm: ((ScratchFrameMorph skinAt: (spec at: 1), 'ButtonOver') magnifyBy: FontMagnification)			offForm: ((ScratchFrameMorph skinAt: (spec at: 1), 'Button') magnifyBy: FontMagnification)			overForm: ((ScratchFrameMorph skinAt: (spec at: 1), 'ButtonOver') magnifyBy: FontMagnification).		b			target: self;			actionSelector: (spec at: 3);			setBalloonText: (spec at: 2) localized;			actWhen: #buttonUp;			isMomentary: true.				('language' = (spec at: 1)) ifTrue: [  "language special case"			b arguments: (Array with: b)].		('save' = (spec at: 1)) ifTrue: [  "spacer"			rowMorph addMorphBack: (Morph new extent: (10@5); color: Color transparent)].		rowMorph addMorphBack: b].	rowMorph addMorphBack: (Morph new extent: (20@5); color: Color transparent).! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'sk 3/16/2017 15:19'!createFontSizeButton	| bt |	fontButtons _ AlignmentMorph new			color: (Color transparent);			centering: #bottomRight.	#(1.0 1.5 2.0) do: [:fSize |		bt _ SimpleButtonMorph new			color: (Color gray);			borderColor: (Color white);			target: self;			actionSelector: #setFontMagnification:;			arguments: {fSize};			label: 'aA' font: (StrikeFont fontName: #Verdana size: fSize * 10);			extent: (fSize * 10 + 17)@(fSize * 10 + 17).		fontButtons addMorphBack: bt.		fontButtons addMorphBack: (Morph new extent: 5@0)].	fontButtons position: (topPane topRight).	topPane addMorph: fontButtons.! !!ScratchFrameMorph methodsFor: 'intialization' stamp: 'sk 2/22/2017 09:43'!initialize	super initialize.	fillScreenFlag _ false.	paintingInProgress _ false.	projectInfo _ Dictionary new.	watcherPositions _ Dictionary new.	justSaved _ false.	author _ ''.	loginName _ ''.	loginPassword _ ''.	viewMode _ #normal.	self createBasicPanes.	self createLogo.	self createMenuPanel.	self createFontSizeButton.	self createViewModeButtonsPanel.	self createStageButtonsPanel.	self createToolbar.	self extent: 1000@600.	libraryPane isHidden: true.	readoutPane isHidden: true.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'sk 3/16/2017 18:57'!showSensorBoard	| sb |	sb _ workPane sensorBoard.	sb position: stageFrame position - ((sb width)@0) + (-20@20).	sb openInWorld.	"self workPane addMorph: sb."	" Only if a board is Studuino. "	(BoardType = 0) ifTrue: [		sb tryToOpenPort.].	World startSteppingSubmorphsOf: sb.! !!ScratchFrameMorph methodsFor: 'menu/button actions' stamp: 'sk 2/22/2017 11:51'!writeArduLangFile: fullFileName	"Translate block into Arduino language and write to a file."	| s sprites f fName ltmp dir headCode footCode dialogBox response  blocks |	"Convert to block sign"	ltmp _ ScratchTranslator currentLanguage.	"---------------------------------------------------------"	" Check hatless blocks "	"---------------------------------------------------------"	blocks _ workPane getHatlessBlocks.	(blocks size = 0) ifFalse: [	" exist hatless blocks "		" Display a hatless block in red "		blocks do: [:item |			item color: Color red.		].		" Warn the hatless block exists "		dialogBox  _ DialogBoxMorph new.		dialogBox withButtonsForYes: true no: true okay: false cancel: false.		dialogBox title: 'Unconnected blocks present'.		dialogBox openInWorld.		" Display Dialogbox "		dialogBox centerOnScreen.	" Set center position "		dialogBox world doOneCycle.		(fullFileName size = 0) ifFalse: [			" Transfer "			dialogBox message: 'These blocks will not be built.Do you wish to continue?'.		] ifTrue: [			" Export Arduino Language "			dialogBox message: 'These blocks will not be exported to Arduino Language.Do you wish to continue?'.		].		" Stop Building "		response _ dialogBox getUserResponse.		(response = false) ifTrue: [			self setLanguage: ltmp. 			 ^ false.		].	].	" Continue Building "	self setLanguage: ltmp. 	" Build... "	self setLanguage: 'atc'. 	s _ WriteStream on: (String new: 10000).	workPane printArduLangOn: s.	self setLanguage: ltmp. 	sprites _ workPane submorphs select: [:m | m isKindOf: ScratchSpriteMorph].	sprites do: [:m |		s skip: -2.  "remove last cr"		s nextPutAll: '--------'; cr.		m printSummaryOn: s]."	s nextPutAll: '--------'; cr."	ParagraphEditor clipboardTextPut: s contents asText.	fName _ fullFileName.	fullFileName size = 0		ifTrue: [			TabletMode ifTrue: [				self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].			fName _ ScratchFileChooserDialog				chooseNewFileDefault: self uniqueSummaryFileName				title: 'File Name?'				type: #projectSummary.			TabletMode ifTrue: [				self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].			fName = #cancelled ifTrue: [				"Turn setting laguage"				self setLanguage: ltmp. 				^ self].			f _ CrLfFileStream newScratchFileNamed: fName.		]		ifFalse: [			(StandardFileStream isAFileNamed: fName) ifTrue: [				" Exist file "				dir _ FileDirectory default directoryNamed: 'user'.	" Get target directory "				dir deleteFileNamed: 'artecRobot.cpp'.					" delete file "			].			f _ StandardFileStream new open: fName forWrite: true.		].	f ifNil: [		"Turn setting laguage"		self setLanguage: ltmp. 		^ self].	" Head and Footer file "	" Default English. "	headCode _ StandardFileStream new open: 'code\head_en.txt' forWrite: false.	footCode _ StandardFileStream new open: 'code\foot_en.txt' forWrite: false.	((ltmp = 'ja') | (ltmp = 'ja_HIRA')) ifTrue: [		Transcript show: '---------- Trans to Japan ----------'; cr.		(BoardType = 0 or: [BoardType = 2]) ifTrue: [			headCode _ StandardFileStream new open: 'code\head.txt' forWrite: false.]		ifFalse: [			headCode _ StandardFileStream new open: 'code\head_mini.txt' forWrite: false.].		footCode _ StandardFileStream new open: 'code\foot.txt' forWrite: false.	]	ifFalse: [		(ltmp = 'zh_CN') ifTrue: [			Transcript show: '---------- China ----------'; cr.			headCode _ StandardFileStream new open: 'code\head_zh.txt' forWrite: false.			footCode _ StandardFileStream new open: 'code\foot_zh.txt' forWrite: false.		]		ifFalse: [			(ltmp = 'ko') ifTrue: [				Transcript show: '---------- Korea ----------'; cr.				headCode _ StandardFileStream new open: 'code\head_ko.txt' forWrite: false.				footCode _ StandardFileStream new open: 'code\foot_ko.txt' forWrite: false.			]		].	].	[headCode atEnd] whileFalse: [		f nextPut: headCode next.	].	f nextPutAll: ((s contents) asUTF8).	[footCode atEnd] whileFalse: [		f nextPut: footCode next.	].	headCode close.	footCode close.	f close.	"Turn setting laguage"	self setLanguage: ltmp. ! !!ScratchFrameMorph methodsFor: 'geometry' stamp: 'sk 3/21/2017 13:50'!fixLayout	| stageExtent xyReadout w |	stageExtent _		workPane isQuarterSize			ifTrue: [(180@(self bottom)) - (0@(stageFrame top+42))]			ifFalse: [(180@(self bottom)) - (0@(stageFrame top+42))].	topPane		position: self topLeft;		width: self width;		height: (menuPanel height + 0 max: logoMorph height + 10).	stageFrame		extent: stageExtent + (14@42);		top: topPane bottom;		right: self right.	titlePane		position: stageFrame topLeft + (0@1);		width: stageFrame width - 6;		height: 36.	self fixProjectTitleMorphLayout.	scriptsPane fixLayout.	w _ (viewerPane catButtonsExtent x + 17)		within: 40		and: (self width - (scriptsPane bareMinimumWidth + stageFrame width)).	viewerPane position: topPane bottomLeft;		width: w;		height: self bottom - topPane bottom.	scriptsPane		position: viewerPane topRight;		width: self width - (stageFrame width + viewerPane width);		height: self bottom - topPane bottom;		fixLayout."	libraryPane position: stageFrame bottomLeft;		width: (self right - scriptsPane right);		height: self bottom - libraryPane top."	libraryPane delete.	menuPanel		left: logoMorph right + 18;		top: topPane top + ((topPane height - menuPanel height) // 2) + 2.	fontButtons		position: ((topPane topRight) - ((fontButtons width + 30)@0)).	viewModeButtonsPanel		right: stageFrame right - 8;		top: self top + 7.	stageButtonsPanel		position: (stageFrame left + 10)@(topPane bottom + 5);		width: stageFrame width - 28;		height: (workPane top - stageFrame top) - 8.	xyReadout _ readoutPane submorphs at: 1.	readoutPane		width: xyReadout width + 23;		height: xyReadout height + 15;		position: stageFrame bottomRight - ((readoutPane width + 6)@3).	xyReadout position: readoutPane position + (18@5).	toolbarPanel		left: (stageFrame left - 4 max: menuPanel right);		top: self top + ((topPane height - toolbarPanel height) // 2) + 3.	((toolbarPanel right - 5) > viewModeButtonsPanel left)		ifTrue: [toolbarPanel delete]		ifFalse: [			(toolbarPanel owner = self) ifFalse: [				self addMorphFront: toolbarPanel]].	workPane position: stageFrame topLeft + (4@37).	workPane height: stageExtent y - 20.	workPane width: 180.! !!ScratchFrameMorph methodsFor: 'stepping' stamp: 'sk 3/14/2017 11:58'!step	"Run each process until it gives up control, then filter out any processes that have terminated."	| screenExtent oldJustSaved keyPadTarget |	fillScreenFlag ifTrue: [		screenExtent _ Display extent.		((self position = (0@0)) and: [self extent = screenExtent]) ifFalse: [			oldJustSaved _ justSaved.			self position: 0@0.			self extent: screenExtent.			self enterQuarterModeIfSmallScreen.			scriptsPane currentCategory: scriptsPane currentCategory.			justSaved _ oldJustSaved.			^ self]].	workPane ifNotNil: [		ScriptableScratchMorph scratchOrigin: workPane center.		viewerPane target isNil 			ifTrue: [workPane viewBlocksAndScripts]			ifFalse: [viewerPane target isInWorld ifFalse: [workPane viewBlocksAndScripts]]].	Sensor processOSMenuEvents.	paintingInProgress ifTrue: [^ self].	workPane scratchServer ifNotNil: [workPane scratchServer stepServer].	self checkForWeDo.	self updateToolButtons.	self processWhenConditions.	self processKeyboardEvents.	workPane stepProcesses.	workPane scratchServer ifNotNil: [workPane scratchServer stepServer].	self processDroppedFiles.	workPane processesToRun size > 0		ifTrue: [flagButton on]		ifFalse: [flagButton off].	(workPane sensorBoard disconnected) ifTrue: [Transcript show: 'disconnected'; cr.		self testModeOff.		workPane sensorBoard disconnected: false].	TabletMode ifTrue: [		keyPadTarget _ World activeHand keyboardFocus.		(keyPadTarget isKindOf: StringFieldMorph) ifTrue: [			(keyPadTarget ownerThatIsA: ExpressionArgMorph) ifNotNil: [				keyPad ifNil: [					keyPad _ KeyPadMorph new openInWorld]]]		ifFalse: [			keyPad _ nil]].! !!ScratchFrameMorph methodsFor: 'startup' stamp: 'sk 3/16/2017 15:21'!processSettingsFile	"Process settings from the Scratch.ini file."	| lang settings k ratio |	self class setVisibleDrives: nil.	lang _ nil.	ratio _ 1.	ScratchFileChooserDialog clearFolderCache. "clear homeDir and last folder cache"	settings _ self readSettingsFile.	settings associationsDo: [:assoc |		k _ assoc key.		k = 'fontmagnification' ifTrue: [ratio _ assoc value asNumber].		"k = 'tabletmode' ifTrue: [self setTabletMode: (assoc value) ~= '0']."		k = 'language' ifTrue: [lang _ assoc value].		k = 'home' ifTrue: [ScratchFileChooserDialog setHomeDir: assoc value].		k = 'visibledrives' ifTrue: [self class setVisibleDrives: assoc value]].	lang ifNil: [lang _ ScratchTranslator guessLanguage].	self setLanguage: lang.	self fontMagnifyBy: ratio.! !!ScratchFrameMorph methodsFor: 'startup' stamp: 'sk 3/9/2017 11:06'!readSettingsFile	"Read my settings file and answer a Dictionary of settings."	"ScratchFrameMorph new readSettingsFile"	| f dict s tokens k |	f _ FileStream readOnlyFileNamedOrNil: 'Block.ini'.	f ifNil: [^ Dictionary new].	dict _ Dictionary new.	f contentsOfEntireFile lines do: [:line |		s _ line collect: [:c | (c asciiValue < 32) ifTrue: [Character space] ifFalse: [c]].		tokens _ s findTokens: '='.		k _ tokens first withBlanksTrimmed asLowercase.		tokens size = 2			ifTrue: [dict at: k put: tokens second withBlanksTrimmed]			ifFalse: [dict at: k put: '1']].	^ dict! !!ScratchFrameMorph methodsFor: 'file read/write' stamp: 'sk 2/20/2017 18:27'!saveScratchProject	| fName result |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	(DuringTest = true)	" During a test ? "	ifTrue: [ self testModeOff. ].	" yes -> off "	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	fName _ ScratchFileChooserDialog saveScratchFileFor: self.	TabletMode ifTrue: [		self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self].	[(result _ ScratchFileChooserDialog confirmFileOverwriteIfExisting: fName) = false] whileTrue: [		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'SHOWKEYPAD'].		fName _ ScratchFileChooserDialog saveScratchFileFor: self.		TabletMode ifTrue: [			self sendMessageToBMnoBlocking: 'HIDEKEYPAD'].		(fName size = 0 or: [fName = #cancelled]) ifTrue: [^ self]].	(result = #cancelled) ifTrue: [^ self].	self updateLastHistoryEntryIfNeeded.	fName _ (self nameFromFileName: fName), '.bpd'.	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: fName).	projectName _ FileDirectory localNameFor: fName.	projectInfo at: 'author' put: author.	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/14/2017 11:12'!fontMagnifyBy: ratio	| s baseScale buttons targetIndex |	FontMagnification _ ratio.	baseScale _ 1.	s _ ScratchTranslator translationDict at: 'Font-Scale' ifAbsent: [''].	s size > 0 ifTrue: [		baseScale _ s asString asNumberNoError.		baseScale = 0 ifTrue: [baseScale _ 1]].  "non-number string"	buttons _ fontButtons submorphs select: [:each | each class == SimpleButtonMorph].	targetIndex _ #(1 1.5 2.0) indexOf: ratio.	buttons do: [:elm |		(buttons indexOf: elm) = targetIndex ifTrue: [			elm color: (Color lightOrange)]		ifFalse: [			elm color: (Color gray)]].	self setScaling: (baseScale * ratio)! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/14/2017 10:14'!recordFontMagnification: aString	"Record font magnification in the settings file."	| fName f sz settings all |	fName _ FileDirectory default fullNameFor: 'Block.ini'.	f _ FileStream concreteStream new open: fName forWrite: true.	f ifNil: [^ self].	sz _ f size.	settings _ (f next: sz) lines.	settings _ settings reject: [:s | s asLowercase beginsWith: 'fontmagnification='].	settings _ settings reject: [:s | all _ s asByteArray asSet. (all size = 1) and: [all asArray first = 0]].	settings _ settings copyWith: ('FontMagnification=', aString).	f position: 0.	settings do: [:s | f nextPutAll: s, String crlf].	[f position < sz] whileTrue: [f nextPut: 0 asCharacter].	f close.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/9/2017 11:06'!recordLanguage: aString	"Record my language in the settings file."	"ScratchFrameMorph new recordLanguage: 'English'"	| fName f sz settings all |	fName _ FileDirectory default fullNameFor: 'Block.ini'.	f _ FileStream concreteStream new open: fName forWrite: true.	f ifNil: [^ self].	sz _ f size.	settings _ (f next: sz) lines.	settings _ settings reject: [:s | s asLowercase beginsWith: 'language='].	settings _ settings reject: [:s | all _ s asByteArray asSet. (all size = 1) and: [all asArray first = 0]].	settings _ settings copyWith: ('Language=', aString).	f position: 0.	settings do: [:s | f nextPutAll: s, String crlf].	[f position < sz] whileTrue: [f nextPut: 0 asCharacter].	f close.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 1/24/2017 09:38'!sendMessageToBMnoBlocking: aMessage	 | s |	" Communicate with Board Manager "	s _ self createBMHandle.	s ifNil: [^ self].	" Success in connection "	" Send message "	Transcript show: '---------- Sending ----------'; cr.	s sendCommand: aMessage.	" Send message "	Transcript show: '---------- Sending BREAK----------'; cr.	s sendCommand: 'BREAK'.	s disconnect.	s destroy.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/14/2017 10:16'!setFontMagnification: aRatio	self fontMagnifyBy: aRatio.	self recordFontMagnification: aRatio asString.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/14/2017 11:21'!setLanguage: aString	"Set my language and update my blocks."	| tempJustSaved |	tempJustSaved _ justSaved.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertStacksToTuples]].	ScratchTranslator setLanguage: (ScratchTranslator isoCodeForName: aString).	viewerPane rebuildCategorySelectors.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertTuplesToStacks]].	self updatePanes.	self		view: scriptsPane target		tab: scriptsPane tabPane currentTab		category: viewerPane currentCategory.	justSaved _ tempJustSaved.	self fontMagnifyBy: FontMagnification.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 2/7/2017 11:59'!setScaling: aNumber	"Set my language and update my blocks."	| tempJustSaved |	ScratchTranslator fontScale: aNumber.	tempJustSaved _ justSaved.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertStacksToTuples]].	"ScratchTranslator setLanguage: (ScratchTranslator isoCodeForName: aString)."	viewerPane rebuildCategorySelectors.	(workPane submorphs copyWith: workPane) do: [:m |		(m isKindOf: ScriptableScratchMorph) ifTrue: [			m convertTuplesToStacks]].	self updatePanes.	self		view: scriptsPane target		tab: scriptsPane tabPane currentTab		category: viewerPane currentCategory.	justSaved _ tempJustSaved.! !!ScratchFrameMorph methodsFor: 'private' stamp: 'sk 3/17/2017 10:20'!updatePanes	| p |	menuPanel delete.	self createMenuPanel."----------	toolbarPanel delete.	self createToolbar.----------"	viewModeButtonsPanel delete.	self createViewModeButtonsPanel.	stageButtonsPanel delete.	self createStageButtonsPanel.	titlePane addMorph: stageButtonsPanel."----------	scriptsPane tabPane delete.	scriptsPane createTabPane.	readoutPane delete.	self createReadoutPane.----------"	workPane sensorBoard owner		ifNil: [p _ nil]		ifNotNil: [p _ stageFrame position - ((workPane sensorBoard width)@0) + (-20@20)].	workPane sensorBoard addReadouts.	p ifNotNil:[		self showSensorBoard.		workPane sensorBoard position: p].	libraryPane clearLibrary.	self scratchWatchers do: [:w | w languageChanged].	self listWatchers do: [:w | w fixLayoutForNewLanguage].	World startSteppingSubmorphsOf: self.	self fixLayout.	scriptsPane fixLayout.	self updateViewModeButtons.! !!ScratchNoteSelector methodsFor: 'initialization' stamp: 'sk 1/26/2017 13:58'!setUpNoteDisplay: aSize	| height rectMorph |	height _ aSize within:aSize and: 40.	"set up the rect morph which holds the note text"	rectMorph _ BorderedMorph new		color: Color white;		position: self bottomLeft - (0@2);		extent: (self width @ height).	self extent: self fullBounds extent.	self addMorph: rectMorph.	labelMorph _ StringMorph new.	labelMorph font: (ScratchFrameMorph getFont: #Label).	labelMorph position: rectMorph position + (0@4).	rectMorph addMorph: labelMorph.	self extent: self fullBounds extent.	self updateNoteDisplay: 60.	ScratchTranslator updateScratchUI.! !!ScratchNoteSelector methodsFor: 'interaction' stamp: 'sk 3/15/2017 13:11'!startUp	"Waits for the user to click a value or to click outside, then returns the selected note or nil."	| w result |	self openInWorld.	w _ self world.	"Sensor waitNoButton."  "start with mouse up"	16 timesRepeat: [w doOneCycle].	"25ms x 16 = 400ms wait"	w activeHand newMouseFocus: self.	selectedVal _ nil.	done _ false.	[done] whileFalse: [		(w activeHand hasMouseFocus: self) ifFalse: [done _ true].		w doOneCycle].	result _ selectedVal.	self shutDown.	^ result! !!ScratchNoteSelector methodsFor: 'private' stamp: 'sk 3/21/2017 13:38'!updateNoteDisplay: noteNum	| s |	s _ #('C' 'C#' 'D' 'Eb' 'E' 'F' 'F#' 'G' 'G#' 'A' 'Bb' 'B') at: ((noteNum rem: 12) + 1).	labelMorph		contents: s, ' (' , noteNum asString, ')';		font: (StrikeFont fontName: 'VerdanaBold' size: 16);		centerInOwner.! !!ScratchScriptsMorph methodsFor: 'event handling' stamp: 'sk 3/15/2017 13:50'!mouseDown: evt	| m |	evt hand newKeyboardFocus: nil.	evt hand toolType ifNotNil: [		"revert to normal cursor"		evt hand toolType: nil.		^ self].	evt rightButtonPressed ifTrue: [		"Sensor waitNoButton."		(m _ self ownerThatIsA: ScratchScriptEditorMorph) ifNil: [^ self].		(m target notNil and: [m currentCategory = 'Scripts'])			ifTrue: [m scriptsMenu: evt hand position].		^ self].	evt hand waitForClicksOrDrag: self event: evt.! !!ScratchTranslator class methodsFor: 'rendering menu' stamp: 'sk 2/7/2017 11:58'!fontScale: aNumber	RenderScale _ aNumber.	self updateScratchUI.! !!ScratchViewerMorph methodsFor: 'initialization' stamp: 'sk 3/21/2017 13:51'!rebuildCategorySelectors	| catList maxExtent buttons label offForm onForm overForm b pad leftColumnX rightColumnX x y |"xxx	catList _ #(		motion		control		looks		sensing		sound		operators		pen			variables)."	catList _ #(		motion		control					sensing					operators					variables).	"First, delete the old category buttons"	submorphs do: [:m | (m isKindOf: ResizableToggleButton2) ifTrue: [m delete]].	"Create new buttons, keeping track of the maximum extent."	maxExtent _ 95@0.	buttons _ catList collect: [:cat |		label _ (ScratchTranslator translationFor: cat asString) capitalized.		offForm _ (ScratchFrameMorph skinAt: cat).		onForm _ (ScratchFrameMorph skinAt: (cat, 'Pressed')).		overForm _ (ScratchFrameMorph skinAt: (cat, 'Over')).		ScratchTranslator isRTL			ifTrue:[				b _ ResizableToggleButton2 new					offForm:	(offForm flipBy: #horizontal centerAt: offForm center)					onForm:		(onForm flipBy: #horizontal centerAt: onForm center)					overForm:	(overForm flipBy: #horizontal centerAt: overForm center)]			ifFalse:[				b _ ResizableToggleButton2 new					offForm:	offForm					onForm:		onForm					overForm:	overForm].		b			label: label font: (ScratchFrameMorph getFont: #Category);			setLabelColor: Color white;			target: self;			actionSelector: #currentCategory:;			arguments: (Array with: cat);			toggleButtonMode: true;			toggleMode: false.		ScratchTranslator isRTL			ifTrue:[b rightJustifyInset: 10]			ifFalse:[b leftJustifyInset: 10].		maxExtent _ maxExtent max: (b extent + (3 @ -6)).		b].	"calculate catButtonsExtent"	pad _ 25. "padding on left, right, and betwen the button columns"	catButtonsExtent _ ((2 * maxExtent x) + (3 * pad)) @ (((catList size // 2+1) * (maxExtent y + 6)) + 25).	"place the buttons"	leftColumnX _ self left + 12 + pad.	rightColumnX _ leftColumnX + maxExtent x + pad.	x _ leftColumnX.	y _ self top + 17.	1 to: buttons size do: [:i |		b _ buttons at: i.		b extent: maxExtent.		self addMorph: (b position: x@y).		i even			ifTrue: [x _ leftColumnX. y _ y + b height + 6]			ifFalse: [x _ rightColumnX]].	self width: catButtonsExtent x.	pageViewer position: self position + (0@catButtonsExtent y).	topSectionHeight _ catButtonsExtent y - 4.! !!ScriptableScratchMorph methodsFor: 'list ops' stamp: 'sk 2/22/2017 10:55'!addGlobalList	| sFrame listName |	(sFrame _ self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self beep].		ValueOrList _ true.	TabletMode ifTrue: [		sFrame sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	listName _ StringDialog ask: 'List name?(Only alphanumeric characters are allowed)'.	TabletMode ifTrue: [		sFrame sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	listName size = 0 ifTrue: [^ self].	sFrame workPane createListNamed: listName.	sFrame viewerPane categoryChanged: 'variables'.! !!ScriptableScratchMorph methodsFor: 'list ops' stamp: 'sk 2/8/2017 13:49'!createListNamed: listName	| list stage n |	(self variableNameInUse: listName) ifTrue: [		self beep.		DialogBoxMorph warn: 'That variable name is already in use'.		^ self].	lists at: listName put: (list _ ScratchListMorph new listName: listName target: self).	(stage _ self ownerThatIsA: ScratchStageMorph) ifNotNil: [		n _ (stage submorphs select: [:m | m isKindOf: ScratchListMorph]) size.		"stage addMorph: (list position: stage topRight - ((list width + 10)@0) + (0@(10+(20*n))))."		stage addMorph: (list position: stage topLeft + (10@(10+(20*n)+(stage height // 2)))).		list startStepping].! !!ScriptableScratchMorph methodsFor: 'variables' stamp: 'sk 2/22/2017 10:56'!addGlobalVariable	"Ask the user for a variable name, then add a background (global) variable of that name."	| sFrame varName |	(sFrame _ self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self beep].	ValueOrList _ true.	TabletMode ifTrue: [		sFrame sendMessageToBMnoBlocking: 'SHOWKEYPAD'].	varName _ StringDialog ask: 'Variable name?(Only alphanumeric characters are allowed)'.	TabletMode ifTrue: [		sFrame sendMessageToBMnoBlocking: 'HIDEKEYPAD'].	varName size = 0 ifTrue: [^ self].	varName _ varName asUTF8.	(sFrame workPane variableNameInUse: varName) ifTrue: [		self beep.		DialogBoxMorph warn: 'That variable name is already in use'.		^ self].	sFrame workPane addVariable: varName.	sFrame viewerPane categoryChanged: 'variables'.	self addWatcherForNewVariable: varName withScope: sFrame workPane.! !!StringDialog methodsFor: 'interaction' stamp: 'sk 2/20/2017 18:00'!getUserResponse	"Wait for the user to type in and accept a string, then report that string. Answer the empty string if the user cancels the operation."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w |	self openInWorld.	TabletMode ifTrue: [		self topCenterOnScreen]	ifFalse: [		self centerOnScreen].	w _ self world.	w activeHand newKeyboardFocus: typeinMorph.	done _ false.	[done] whileFalse: [w doOneCycle].  "wait for user to press a button"	self delete.	w doOneCycle.  "erase myself from the screen"	response = #cancelled		ifTrue: [^ '']		ifFalse: [^ typeinMorph contents asString].! !!StringFieldMorph methodsFor: 'text editing' stamp: 'sk 2/7/2017 09:07'!moveCursorAt: index	"Move the cursor to the specified index of the current line."	self recordUndoState.	selectionStart _ index within: 0 and: (stringMorph contents size).	selectionEnd _ selectionStart.	self changed.! !!StringFieldMorph methodsFor: 'private' stamp: 'sk 2/7/2017 09:11'!cursorPosition	^ selectionStart! !NumericUpDownMorph removeSelector: #defaultValue:!NumericUpDownMorph removeSelector: #evaluate!NumericUpDownMorph removeSelector: #handlesMouseDown:!NumericUpDownMorph removeSelector: #handlesMouseOver:!NumericUpDownMorph removeSelector: #initFieldsFrom:version:!NumericUpDownMorph removeSelector: #menuSelector!NumericUpDownMorph removeSelector: #menuSelector:!NumericUpDownMorph removeSelector: #mouseDown:!NumericUpDownMorph removeSelector: #mouseLeave:!NumericUpDownMorph removeSelector: #mouseMove:!NumericUpDownMorph removeSelector: #mouseUp:!NumericUpDownMorph removeSelector: #nitialize!NumericUpDownMorph removeSelector: #setDefault:!NumericUpDownMorph removeSelector: #setDefault:min:max:!NumericUpDownMorph removeSelector: #specialValue:!NumericUpDownMorph removeSelector: #step!NumericUpDownMorph removeSelector: #stepTime!NumericUpDownMorph removeSelector: #storeFieldsOn:!ExpressionArgMorph subclass: #NumericUpDownMorph	instanceVariableNames: 'buttons downMorph upMorph minimum maximum '	classVariableNames: 'DownForm UpForm '	poolDictionaries: ''	category: 'Scratch-Blocks'!KeyPadMorph initialize!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."ScratchFrameMorph initialize.Smalltalk at: #TabletMode put: true.Smalltalk at: #ValueOrList put: false.Smalltalk at: #FontMagnification put: 1.ScratchFrameMorph readSkinFrom:(FileDirectory default directoryNamed: 'ScratchSkin').!